import { ErrorMessage, Field, Formik, FormikHelpers, FormikValues } from 'formik';
import React, { useState } from 'react';
import {
  Form as BSForm,
  Accordion,
  Col,
  Row,
  Spinner
} from 'react-bootstrap';
import LoadingSpinner from '@valkyr/component-library/LoadingSpinner';
import { FaCheckCircle, FaCogs, FaRegPlusSquare } from 'react-icons/fa';
import CoolButton from '@valkyr/component-library/CoolButton';
import * as Yup from 'yup';
import { SmartField } from '@valkyr/component-library/ForeignKey/SmartField';

import { PermissionDialog } from '@valkyr/component-library/PermissionDialog';
import { AclGrantRequest, PermissionType } from '@valkyr/component-library/PermissionDialog/types';


import {
  Principal,
} from '@thor/model';

import { useAddPrincipalMutation } from '../../services/PrincipalService';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-03T07:35:49.309640-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelForm.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description:
The Valkyr Principal. Represents a user, service, or agent in the system with preferences and privileges.
*/

/* -----------------------------------------------------
   ENUM VALIDATION ARRAYS (Yup oneOf checks), if any
-------------------------------------------------------- */

/* -----------------------------------------------------
   YUP VALIDATION SCHEMA (skip read-only fields)
-------------------------------------------------------- */
const asNumber = (schema: Yup.NumberSchema) =>
  schema.transform((val, orig) => (orig === '' || orig === null ? undefined : val));

const validationSchema = Yup.object().shape({
  username: Yup.string().required("username is required."),
  password: Yup.string().required("password is required."),
  email: Yup.string().email("Invalid email").required("email is required.").matches(/^[a-zA-Z0-9_!#$%&â€™*+\/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$/, "email must match pattern The main email address"),
  firstName: Yup.string(),
  middleName: Yup.string(),
  lastName: Yup.string(),
  federalIdentification: Yup.string().matches(/^\\d{3}-\\d{2}-\\d{4}$/, "federalIdentification must match pattern SSN or a 10 digit federal government ID (encrypted)"),
  residenceCountry: Yup.string(),
  stateIdentification: Yup.string().matches(/^\\d{10}$/, "stateIdentification must match pattern Driver\&#39;s License or a 10 digit state government ID"),
  residenceState: Yup.string(),
  phone: Yup.string().matches(/^\\+?[1-9]\\d{1,14}$/, "phone must match pattern The main phone number"),
  social: Yup.string(),
  bio: Yup.string(),
  notes: Yup.string(),
  avatarUrl: Yup.string(),
  acceptedCookies: Yup.boolean(),
  acceptedTos: Yup.boolean(),
  enabled: Yup.boolean(),
  credentialNonExpired: Yup.boolean(),
  accountEnabled: Yup.boolean(),
  accountNonLocked: Yup.boolean(),
  accountNonExpired: Yup.boolean(),
  id: Yup.string(),
  ownerId: Yup.string(),
  createdDate: Yup.date()
    .transform((value, originalValue) => {
      if (!originalValue) {
        return value;
      }
      const parsed = new Date(originalValue);
      return Number.isNaN(parsed.getTime()) ? value : parsed;
    }).typeError("createdDate must be a valid date"),
  keyHash: Yup.string(),
  lastAccessedById: Yup.string(),
  lastAccessedDate: Yup.date()
    .transform((value, originalValue) => {
      if (!originalValue) {
        return value;
      }
      const parsed = new Date(originalValue);
      return Number.isNaN(parsed.getTime()) ? value : parsed;
    }).typeError("lastAccessedDate must be a valid date"),
  lastModifiedById: Yup.string(),
  lastModifiedDate: Yup.date()
    .transform((value, originalValue) => {
      if (!originalValue) {
        return value;
      }
      const parsed = new Date(originalValue);
      return Number.isNaN(parsed.getTime()) ? value : parsed;
    }).typeError("lastModifiedDate must be a valid date"),
});

/* -----------------------------------------------------
   COMPONENT
-------------------------------------------------------- */
const PrincipalForm: React.FC = () => {
  const [addPrincipal, addPrincipalResult] = useAddPrincipalMutation();

  // Permission Management State
  const [showPermissionDialog, setShowPermissionDialog] = useState(false);
  const [createdObjectId, setCreatedObjectId] = useState<string | null>(null);

  // Mock current user - in real implementation, this would come from auth context
  const currentUser = {
    username: 'current_user',
    permissions: {
      isOwner: true,
      isAdmin: true,
      canGrantPermissions: true,
      permissions: [PermissionType.READ, PermissionType.WRITE, PermissionType.CREATE, PermissionType.DELETE, PermissionType.ADMINISTRATION],
    },
  };

  /* -----------------------------------------------------
     INITIAL VALUES - only NON read-only fields
  -------------------------------------------------------- */
  const initialValues: Partial<Principal> = {
    username: '',
    password: '',
    email: '',
    firstName: '',
    middleName: '',
    lastName: '',
    federalIdentification: '',
    residenceCountry: '',
    stateIdentification: '',
    residenceState: '',
    phone: '',
    social: '',
    bio: '',
    notes: '',
    avatarUrl: '',
    acceptedCookies: false,
    acceptedTos: false,
    enabled: false,
    credentialNonExpired: false,
    accountEnabled: false,
    accountNonLocked: false,
    accountNonExpired: false,
    id: '',
    ownerId: '',
    createdDate: new Date(),
    keyHash: '',
    lastAccessedById: '',
    lastAccessedDate: new Date(),
    lastModifiedById: '',
    lastModifiedDate: new Date(),
  };

  // Permission Management Handlers
  const handleManagePermissions = (objectId: string) => {
    setCreatedObjectId(objectId);
    setShowPermissionDialog(true);
  };

  const handlePermissionDialogClose = () => {
    setShowPermissionDialog(false);
    setCreatedObjectId(null);
  };

  const handlePermissionsSave = (grants: AclGrantRequest[]) => {
    console.log('Permissions saved for new Principal:', grants);
  };

  /* SUBMIT HANDLER */
  const handleSubmit = async (values: FormikValues, { setSubmitting }: FormikHelpers<Principal>) => {
    try {
      console.log("Principal form values:", values);

      // NOTE: depending on your generated endpoint, you may need { body: values }
      const result = await addPrincipal(values as any).unwrap();

      if (result && result.id && currentUser.permissions.canGrantPermissions) {
        const shouldSetPermissions = window.confirm(
          `Principal created successfully! Would you like to set permissions for this object?`
        );
        if (shouldSetPermissions) {
          handleManagePermissions(result.id);
        }
      }

      setSubmitting(false);
    } catch (error) {
      console.error('Failed to create Principal:', error);
      setSubmitting(false);
    }
  };

  return (
    <div>
      <Formik
        validateOnBlur={true}
        initialValues={initialValues as Principal}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >
        {({
          isSubmitting,
          isValid,
          errors,
          values,
          setFieldValue,
          touched,
          setFieldTouched,
          handleSubmit
        }) => (
          <form onSubmit={handleSubmit} className="form">
            <Accordion defaultActiveKey="1">

              {/* Editable Fields (NON read-only) */}
              <Accordion.Item eventKey="1">
                <Accordion.Header>
                  <FaRegPlusSquare size={28} /> &nbsp; Add New Principal
                </Accordion.Header>
                <Accordion.Body>
                  <label htmlFor="username" className="nice-form-control">
                    <b>
                      Username:
                      {touched.username &&
                        !errors.username && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>



                    {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                    <SmartField
                      name="username"
                      value={values?.username}
                      placeholder="Username"
                      setFieldValue={setFieldValue}
                      setFieldTouched={setFieldTouched}
                    />







                    <ErrorMessage
                      className="error"
                      name="username"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="password" className="nice-form-control">
                    <b>
                      Password:
                      {touched.password &&
                        !errors.password && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>



                    {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                    <SmartField
                      name="password"
                      value={values?.password}
                      placeholder="Password"
                      setFieldValue={setFieldValue}
                      setFieldTouched={setFieldTouched}
                    />







                    <ErrorMessage
                      className="error"
                      name="password"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="email" className="nice-form-control">
                    <b>
                      Email:
                      {touched.email &&
                        !errors.email && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>



                    {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                    <SmartField
                      name="email"
                      value={values?.email}
                      placeholder="Email"
                      setFieldValue={setFieldValue}
                      setFieldTouched={setFieldTouched}
                    />







                    <ErrorMessage
                      className="error"
                      name="email"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="firstName" className="nice-form-control">
                    <b>
                      First Name:
                      {touched.firstName &&
                        !errors.firstName && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>



                    {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                    <SmartField
                      name="firstName"
                      value={values?.firstName}
                      placeholder="First Name"
                      setFieldValue={setFieldValue}
                      setFieldTouched={setFieldTouched}
                    />







                    <ErrorMessage
                      className="error"
                      name="firstName"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="middleName" className="nice-form-control">
                    <b>
                      Middle Name:
                      {touched.middleName &&
                        !errors.middleName && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>



                    {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                    <SmartField
                      name="middleName"
                      value={values?.middleName}
                      placeholder="Middle Name"
                      setFieldValue={setFieldValue}
                      setFieldTouched={setFieldTouched}
                    />







                    <ErrorMessage
                      className="error"
                      name="middleName"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="lastName" className="nice-form-control">
                    <b>
                      Last Name:
                      {touched.lastName &&
                        !errors.lastName && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>



                    {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                    <SmartField
                      name="lastName"
                      value={values?.lastName}
                      placeholder="Last Name"
                      setFieldValue={setFieldValue}
                      setFieldTouched={setFieldTouched}
                    />







                    <ErrorMessage
                      className="error"
                      name="lastName"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="federalIdentification" className="nice-form-control">
                    <b>
                      Federal Identification:
                      {touched.federalIdentification &&
                        !errors.federalIdentification && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>



                    {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                    <SmartField
                      name="federalIdentification"
                      value={values?.federalIdentification}
                      placeholder="Federal Identification"
                      setFieldValue={setFieldValue}
                      setFieldTouched={setFieldTouched}
                    />







                    <ErrorMessage
                      className="error"
                      name="federalIdentification"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="residenceCountry" className="nice-form-control">
                    <b>
                      Residence Country:
                      {touched.residenceCountry &&
                        !errors.residenceCountry && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>



                    {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                    <SmartField
                      name="residenceCountry"
                      value={values?.residenceCountry}
                      placeholder="Residence Country"
                      setFieldValue={setFieldValue}
                      setFieldTouched={setFieldTouched}
                    />







                    <ErrorMessage
                      className="error"
                      name="residenceCountry"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="stateIdentification" className="nice-form-control">
                    <b>
                      State Identification:
                      {touched.stateIdentification &&
                        !errors.stateIdentification && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>



                    {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                    <SmartField
                      name="stateIdentification"
                      value={values?.stateIdentification}
                      placeholder="State Identification"
                      setFieldValue={setFieldValue}
                      setFieldTouched={setFieldTouched}
                    />







                    <ErrorMessage
                      className="error"
                      name="stateIdentification"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="residenceState" className="nice-form-control">
                    <b>
                      Residence State:
                      {touched.residenceState &&
                        !errors.residenceState && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>



                    {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                    <SmartField
                      name="residenceState"
                      value={values?.residenceState}
                      placeholder="Residence State"
                      setFieldValue={setFieldValue}
                      setFieldTouched={setFieldTouched}
                    />







                    <ErrorMessage
                      className="error"
                      name="residenceState"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="phone" className="nice-form-control">
                    <b>
                      Phone:
                      {touched.phone &&
                        !errors.phone && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>



                    {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                    <SmartField
                      name="phone"
                      value={values?.phone}
                      placeholder="Phone"
                      setFieldValue={setFieldValue}
                      setFieldTouched={setFieldTouched}
                    />







                    <ErrorMessage
                      className="error"
                      name="phone"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="social" className="nice-form-control">
                    <b>
                      Social:
                      {touched.social &&
                        !errors.social && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>



                    {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                    <SmartField
                      name="social"
                      value={values?.social}
                      placeholder="Social"
                      setFieldValue={setFieldValue}
                      setFieldTouched={setFieldTouched}
                    />







                    <ErrorMessage
                      className="error"
                      name="social"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="bio" className="nice-form-control">
                    <b>
                      Bio:
                      {touched.bio &&
                        !errors.bio && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>



                    {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                    <SmartField
                      name="bio"
                      value={values?.bio}
                      placeholder="Bio"
                      setFieldValue={setFieldValue}
                      setFieldTouched={setFieldTouched}
                    />







                    <ErrorMessage
                      className="error"
                      name="bio"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="notes" className="nice-form-control">
                    <b>
                      Notes:
                      {touched.notes &&
                        !errors.notes && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>



                    {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                    <SmartField
                      name="notes"
                      value={values?.notes}
                      placeholder="Notes"
                      setFieldValue={setFieldValue}
                      setFieldTouched={setFieldTouched}
                    />







                    <ErrorMessage
                      className="error"
                      name="notes"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="avatarUrl" className="nice-form-control">
                    <b>
                      Avatar Url:
                      {touched.avatarUrl &&
                        !errors.avatarUrl && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>



                    {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                    <SmartField
                      name="avatarUrl"
                      value={values?.avatarUrl}
                      placeholder="Avatar Url"
                      setFieldValue={setFieldValue}
                      setFieldTouched={setFieldTouched}
                    />







                    <ErrorMessage
                      className="error"
                      name="avatarUrl"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="acceptedCookies" className="nice-form-control">
                    <b>
                      Accepted Cookies:
                      {touched.acceptedCookies &&
                        !errors.acceptedCookies && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>


                    {/* CHECKBOX FIELD */}
                    <BSForm.Check
                      id="acceptedCookies"
                      name="acceptedCookies"
                      checked={values.acceptedCookies || false}
                      onChange={(e) => {
                        setFieldTouched('acceptedCookies', true);
                        setFieldValue('acceptedCookies', e.target.checked);
                      }}
                      isInvalid={!!errors.acceptedCookies}
                      className={errors.acceptedCookies ? 'error' : ''}
                    />








                    <ErrorMessage
                      className="error"
                      name="acceptedCookies"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="acceptedTos" className="nice-form-control">
                    <b>
                      Accepted Tos:
                      {touched.acceptedTos &&
                        !errors.acceptedTos && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>


                    {/* CHECKBOX FIELD */}
                    <BSForm.Check
                      id="acceptedTos"
                      name="acceptedTos"
                      checked={values.acceptedTos || false}
                      onChange={(e) => {
                        setFieldTouched('acceptedTos', true);
                        setFieldValue('acceptedTos', e.target.checked);
                      }}
                      isInvalid={!!errors.acceptedTos}
                      className={errors.acceptedTos ? 'error' : ''}
                    />








                    <ErrorMessage
                      className="error"
                      name="acceptedTos"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="enabled" className="nice-form-control">
                    <b>
                      Enabled:
                      {touched.enabled &&
                        !errors.enabled && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>


                    {/* CHECKBOX FIELD */}
                    <BSForm.Check
                      id="enabled"
                      name="enabled"
                      checked={values.enabled || false}
                      onChange={(e) => {
                        setFieldTouched('enabled', true);
                        setFieldValue('enabled', e.target.checked);
                      }}
                      isInvalid={!!errors.enabled}
                      className={errors.enabled ? 'error' : ''}
                    />








                    <ErrorMessage
                      className="error"
                      name="enabled"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="credentialNonExpired" className="nice-form-control">
                    <b>
                      Credential Non Expired:
                      {touched.credentialNonExpired &&
                        !errors.credentialNonExpired && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>


                    {/* CHECKBOX FIELD */}
                    <BSForm.Check
                      id="credentialNonExpired"
                      name="credentialNonExpired"
                      checked={values.credentialNonExpired || false}
                      onChange={(e) => {
                        setFieldTouched('credentialNonExpired', true);
                        setFieldValue('credentialNonExpired', e.target.checked);
                      }}
                      isInvalid={!!errors.credentialNonExpired}
                      className={errors.credentialNonExpired ? 'error' : ''}
                    />








                    <ErrorMessage
                      className="error"
                      name="credentialNonExpired"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="accountEnabled" className="nice-form-control">
                    <b>
                      Account Enabled:
                      {touched.accountEnabled &&
                        !errors.accountEnabled && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>


                    {/* CHECKBOX FIELD */}
                    <BSForm.Check
                      id="accountEnabled"
                      name="accountEnabled"
                      checked={values.accountEnabled || false}
                      onChange={(e) => {
                        setFieldTouched('accountEnabled', true);
                        setFieldValue('accountEnabled', e.target.checked);
                      }}
                      isInvalid={!!errors.accountEnabled}
                      className={errors.accountEnabled ? 'error' : ''}
                    />








                    <ErrorMessage
                      className="error"
                      name="accountEnabled"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="accountNonLocked" className="nice-form-control">
                    <b>
                      Account Non Locked:
                      {touched.accountNonLocked &&
                        !errors.accountNonLocked && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>


                    {/* CHECKBOX FIELD */}
                    <BSForm.Check
                      id="accountNonLocked"
                      name="accountNonLocked"
                      checked={values.accountNonLocked || false}
                      onChange={(e) => {
                        setFieldTouched('accountNonLocked', true);
                        setFieldValue('accountNonLocked', e.target.checked);
                      }}
                      isInvalid={!!errors.accountNonLocked}
                      className={errors.accountNonLocked ? 'error' : ''}
                    />








                    <ErrorMessage
                      className="error"
                      name="accountNonLocked"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="accountNonExpired" className="nice-form-control">
                    <b>
                      Account Non Expired:
                      {touched.accountNonExpired &&
                        !errors.accountNonExpired && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>


                    {/* CHECKBOX FIELD */}
                    <BSForm.Check
                      id="accountNonExpired"
                      name="accountNonExpired"
                      checked={values.accountNonExpired || false}
                      onChange={(e) => {
                        setFieldTouched('accountNonExpired', true);
                        setFieldValue('accountNonExpired', e.target.checked);
                      }}
                      isInvalid={!!errors.accountNonExpired}
                      className={errors.accountNonExpired ? 'error' : ''}
                    />








                    <ErrorMessage
                      className="error"
                      name="accountNonExpired"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="id" className="nice-form-control">
                    <b>
                      Id:
                      {touched.id &&
                        !errors.id && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>



                    {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                    <SmartField
                      name="id"
                      value={values?.id}
                      placeholder="Id"
                      setFieldValue={setFieldValue}
                      setFieldTouched={setFieldTouched}
                    />







                    <ErrorMessage
                      className="error"
                      name="id"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="ownerId" className="nice-form-control">
                    <b>
                      Owner Id:
                      {touched.ownerId &&
                        !errors.ownerId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>



                    {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                    <SmartField
                      name="ownerId"
                      value={values?.ownerId}
                      placeholder="Owner Id"
                      setFieldValue={setFieldValue}
                      setFieldTouched={setFieldTouched}
                    />







                    <ErrorMessage
                      className="error"
                      name="ownerId"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="createdDate" className="nice-form-control">
                    <b>
                      Created Date:
                      {touched.createdDate &&
                        !errors.createdDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>









                    {/* DATETIME FIELD */}
                    <Field
                      name="createdDate"
                      type="datetime-local"
                      value={values.createdDate ?
                        new Date(values.createdDate).toISOString().slice(0, 16) :
                        ''}
                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                        setFieldTouched('createdDate', true);
                        const v = e.target.value;
                        setFieldValue('createdDate', v ? new Date(v).toISOString() : '');
                      }}
                      className={
                        errors.createdDate
                          ? 'form-control field-error'
                          : 'nice-form-control form-control'
                      }
                    />

                    <ErrorMessage
                      className="error"
                      name="createdDate"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="keyHash" className="nice-form-control">
                    <b>
                      Key Hash:
                      {touched.keyHash &&
                        !errors.keyHash && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>



                    {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                    <SmartField
                      name="keyHash"
                      value={values?.keyHash}
                      placeholder="Key Hash"
                      setFieldValue={setFieldValue}
                      setFieldTouched={setFieldTouched}
                    />







                    <ErrorMessage
                      className="error"
                      name="keyHash"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="lastAccessedById" className="nice-form-control">
                    <b>
                      Last Accessed By Id:
                      {touched.lastAccessedById &&
                        !errors.lastAccessedById && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>



                    {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                    <SmartField
                      name="lastAccessedById"
                      value={values?.lastAccessedById}
                      placeholder="Last Accessed By Id"
                      setFieldValue={setFieldValue}
                      setFieldTouched={setFieldTouched}
                    />







                    <ErrorMessage
                      className="error"
                      name="lastAccessedById"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="lastAccessedDate" className="nice-form-control">
                    <b>
                      Last Accessed Date:
                      {touched.lastAccessedDate &&
                        !errors.lastAccessedDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>









                    {/* DATETIME FIELD */}
                    <Field
                      name="lastAccessedDate"
                      type="datetime-local"
                      value={values.lastAccessedDate ?
                        new Date(values.lastAccessedDate).toISOString().slice(0, 16) :
                        ''}
                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                        setFieldTouched('lastAccessedDate', true);
                        const v = e.target.value;
                        setFieldValue('lastAccessedDate', v ? new Date(v).toISOString() : '');
                      }}
                      className={
                        errors.lastAccessedDate
                          ? 'form-control field-error'
                          : 'nice-form-control form-control'
                      }
                    />

                    <ErrorMessage
                      className="error"
                      name="lastAccessedDate"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="lastModifiedById" className="nice-form-control">
                    <b>
                      Last Modified By Id:
                      {touched.lastModifiedById &&
                        !errors.lastModifiedById && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>



                    {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                    <SmartField
                      name="lastModifiedById"
                      value={values?.lastModifiedById}
                      placeholder="Last Modified By Id"
                      setFieldValue={setFieldValue}
                      setFieldTouched={setFieldTouched}
                    />







                    <ErrorMessage
                      className="error"
                      name="lastModifiedById"
                      component="span"
                    />
                  </label>
                  <br />
                  <label htmlFor="lastModifiedDate" className="nice-form-control">
                    <b>
                      Last Modified Date:
                      {touched.lastModifiedDate &&
                        !errors.lastModifiedDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                    </b>









                    {/* DATETIME FIELD */}
                    <Field
                      name="lastModifiedDate"
                      type="datetime-local"
                      value={values.lastModifiedDate ?
                        new Date(values.lastModifiedDate).toISOString().slice(0, 16) :
                        ''}
                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                        setFieldTouched('lastModifiedDate', true);
                        const v = e.target.value;
                        setFieldValue('lastModifiedDate', v ? new Date(v).toISOString() : '');
                      }}
                      className={
                        errors.lastModifiedDate
                          ? 'form-control field-error'
                          : 'nice-form-control form-control'
                      }
                    />

                    <ErrorMessage
                      className="error"
                      name="lastModifiedDate"
                      component="span"
                    />
                  </label>
                  <br />

                  {/* SUBMIT BUTTON */}
                  <CoolButton
                    variant={isValid ? (isSubmitting ? 'disabled' : 'success') : 'warning'}
                    type="submit"
                    disabled={!isValid || isSubmitting}
                  >
                    {isSubmitting && (<span style={{ float: 'left', minHeight: 0 }}><LoadingSpinner label="" size={18} /></span>)}
                    <FaCheckCircle size={28} /> Create New Principal
                  </CoolButton>

                  {addPrincipalResult.error && (
                    <div className="error" style={{ marginTop: 12 }}>
                      {JSON.stringify('data' in (addPrincipalResult as any).error ? (addPrincipalResult as any).error.data : (addPrincipalResult as any).error)}
                    </div>
                  )}
                </Accordion.Body>
              </Accordion.Item>

              {/* Debug/Dev Accordion */}
              <Accordion.Item eventKey="0">
                <Accordion.Header>
                  <FaCogs size={28} /> &nbsp;Server Messages
                </Accordion.Header>
                <Accordion.Body>
                  errors: {JSON.stringify(errors)}
                  <br />
                  addPrincipalResult: {JSON.stringify(addPrincipalResult)}
                </Accordion.Body>
              </Accordion.Item>

            </Accordion>
          </form>
        )}
      </Formik>

      {/* Permission Management Dialog */}
      {createdObjectId && (
        <PermissionDialog
          objectType="com.valkyrlabs.model.Principal"
          objectId={createdObjectId}
          isVisible={showPermissionDialog}
          onClose={handlePermissionDialogClose}
          onSave={handlePermissionsSave}
          currentUser={currentUser}
        />
      )}
    </div>
  );
};



/* Export the generated form */
export default PrincipalForm;

