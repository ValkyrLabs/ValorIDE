import { createApi } from "@reduxjs/toolkit/query/react";
import customBaseQuery from "../customBaseQuery";
import { AclGrantRequest, Role } from "../../redux/types/AclTypes";

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** {{{generatorVersion}}}
**GENERATED DATE:** {{generatedDate}}
**GENERATOR CLASS:** {{generatorClass}}

Template file: typescript-redux-query/services/AclService.ts.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/

export const AclService = createApi({
  reducerPath: "AclService",
  baseQuery: customBaseQuery,
  tagTypes: ["ACL", "Role"],
  endpoints: (build) => ({
    // Grant ACL permission
    grantAclPermission: build.mutation<void, AclGrantRequest>({
      query: (body) => ({
        url: "v1/auth/acl/grant",
        method: "POST",
        body,
      }),
      invalidatesTags: [{ type: "ACL", id: "LIST" }],
    }),

    // Get roles for dropdown population
    getRoles: build.query<Role[], void>({
      query: () => "Role",
      providesTags: (result) =>
        result
          ? [
              ...result.map(({ id }) => ({ type: "Role" as const, id })),
              { type: "Role", id: "LIST" },
            ]
          : [{ type: "Role", id: "LIST" }],
    }),

    // Get current user permissions for an object
    getObjectPermissions: build.query<
      { permissions: string[]; isOwner: boolean; isAdmin: boolean },
      { objectType: string; objectId: string }
    >({
      query: ({ objectType, objectId }) =>
        `v1/auth/acl/permissions?objectType=${objectType}&objectId=${objectId}`,
      providesTags: (result, error, { objectType, objectId }) => [
        { type: "ACL", id: `${objectType}_${objectId}` },
      ],
    }),

    // Revoke ACL permission
    revokeAclPermission: build.mutation<void, AclGrantRequest>({
      query: (body) => ({
        url: "v1/auth/acl/revoke",
        method: "POST",
        body,
      }),
      invalidatesTags: [{ type: "ACL", id: "LIST" }],
    }),

    // Get all permissions for an object
    getObjectAclEntries: build.query<
      Array<{
        username: string;
        permission: string;
        granted: boolean;
      }>,
      { objectType: string; objectId: string }
    >({
      query: ({ objectType, objectId }) =>
        `v1/auth/acl/entries?objectType=${objectType}&objectId=${objectId}`,
      providesTags: (result, error, { objectType, objectId }) => [
        { type: "ACL", id: `entries_${objectType}_${objectId}` },
      ],
    }),
  }),
});

export const {
  useGrantAclPermissionMutation,
  useGetRolesQuery,
  useGetObjectPermissionsQuery,
  useRevokeAclPermissionMutation,
  useGetObjectAclEntriesQuery,
} = AclService;
