import { ErrorMessage, Field, Formik, FormikHelpers, FormikValues } from 'formik';
import React, { useState } from 'react';
import {
  Form as BSForm,
  Accordion,
  Col,
  Row,
  Spinner
} from 'react-bootstrap';
import LoadingSpinner from '@valkyr/component-library/LoadingSpinner';
import { FaCheckCircle, FaCogs, FaRegPlusSquare } from 'react-icons/fa';
import CoolButton from '@valkyr/component-library/CoolButton';
import * as Yup from 'yup';
import { SmartField } from '@valkyr/component-library/ForeignKey/SmartField';

import { PermissionDialog } from '@valkyr/component-library/PermissionDialog';
import { AclGrantRequest, PermissionType } from '@valkyr/component-library/PermissionDialog/types';


import {
  Format,
  FormatFontWeightEnum,
  FormatUnderlineEnum,
  FormatColorEnum,
  FormatAlignmentHorizontalEnum,
  FormatAlignmentVerticalEnum,
  FormatPatternEnum,
} from '@thor/model';

import { useAddFormatMutation } from '../../services/FormatService';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-03T07:35:49.309640-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelForm.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description:
GridHeim Formatting Object
*/

/* -----------------------------------------------------
   ENUM VALIDATION ARRAYS (Yup oneOf checks), if any
-------------------------------------------------------- */
const FontWeightValidation = () => {
  return [
    200,
    400,
    700,
  ];
};
const UnderlineValidation = () => {
  return [
    0,
    1,
    2,
    21,
    22,
  ];
};
const ColorValidation = () => {
  return [
    'Black',
    'White',
    'Red',
    'BrightGreen',
    'Blue',
    'Yellow',
    'Pink',
    'Turquoise',
    'DarkRed',
    'Orange',
    'DarkYellow',
    'Green',
    'Teal',
    'LightBlue',
    'Violet',
    'Gray80',
  ];
};
const AlignmentHorizontalValidation = () => {
  return [
    'Left',
    'Center',
    'Right',
    'Fill',
    'Justify',
    'CenterAcrossSelection',
  ];
};
const AlignmentVerticalValidation = () => {
  return [
    'Top',
    'Middle',
    'Bottom',
    'Justify',
  ];
};
const PatternValidation = () => {
  return [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
  ];
};

/* -----------------------------------------------------
   YUP VALIDATION SCHEMA (skip read-only fields)
-------------------------------------------------------- */
const asNumber = (schema: Yup.NumberSchema) =>
  schema.transform((val, orig) => (orig === '' || orig === null ? undefined : val));

const validationSchema = Yup.object().shape({
        workbookId: Yup.string(),
      fontWeight: Yup.mixed()
        .oneOf(FontWeightValidation(), "Invalid value for fontWeight")
        ,
        fontSize: asNumber(Yup.number().integer().typeError("fontSize must be a number")),
        fontFace: Yup.string(),
      underline: Yup.mixed()
        .oneOf(UnderlineValidation(), "Invalid value for underline")
        ,
      color: Yup.mixed()
        .oneOf(ColorValidation(), "Invalid value for color")
        ,
      alignmentHorizontal: Yup.mixed()
        .oneOf(AlignmentHorizontalValidation(), "Invalid value for alignmentHorizontal")
        ,
      alignmentVertical: Yup.mixed()
        .oneOf(AlignmentVerticalValidation(), "Invalid value for alignmentVertical")
        ,
      pattern: Yup.mixed()
        .oneOf(PatternValidation(), "Invalid value for pattern")
        ,
        id: Yup.string(),
        ownerId: Yup.string(),
        createdDate: Yup.date()
          .transform((value, originalValue) => {
            if (!originalValue) {
              return value;
            }
            const parsed = new Date(originalValue);
            return Number.isNaN(parsed.getTime()) ? value : parsed;
          }).typeError("createdDate must be a valid date"),
        keyHash: Yup.string(),
        lastAccessedById: Yup.string(),
        lastAccessedDate: Yup.date()
          .transform((value, originalValue) => {
            if (!originalValue) {
              return value;
            }
            const parsed = new Date(originalValue);
            return Number.isNaN(parsed.getTime()) ? value : parsed;
          }).typeError("lastAccessedDate must be a valid date"),
        lastModifiedById: Yup.string(),
        lastModifiedDate: Yup.date()
          .transform((value, originalValue) => {
            if (!originalValue) {
              return value;
            }
            const parsed = new Date(originalValue);
            return Number.isNaN(parsed.getTime()) ? value : parsed;
          }).typeError("lastModifiedDate must be a valid date"),
});

/* -----------------------------------------------------
   COMPONENT
-------------------------------------------------------- */
const FormatForm: React.FC = () => {
  const [addFormat, addFormatResult] = useAddFormatMutation();

  // Permission Management State
  const [showPermissionDialog, setShowPermissionDialog] = useState(false);
  const [createdObjectId, setCreatedObjectId] = useState<string | null>(null);

  // Mock current user - in real implementation, this would come from auth context
  const currentUser = {
    username: 'current_user',
    permissions: {
      isOwner: true,
      isAdmin: true,
      canGrantPermissions: true,
      permissions: [PermissionType.READ, PermissionType.WRITE, PermissionType.CREATE, PermissionType.DELETE, PermissionType.ADMINISTRATION],
    },
  };

  /* -----------------------------------------------------
     INITIAL VALUES - only NON read-only fields
  -------------------------------------------------------- */
  const initialValues: Partial<Format> = {
          workbookId: '',
        fontWeight: undefined,
          fontSize: 0,
          fontFace: '',
        underline: undefined,
        color: undefined,
        alignmentHorizontal: undefined,
        alignmentVertical: undefined,
        pattern: undefined,
          id: '',
          ownerId: '',
          createdDate: new Date(),
          keyHash: '',
          lastAccessedById: '',
          lastAccessedDate: new Date(),
          lastModifiedById: '',
          lastModifiedDate: new Date(),
  };

  // Permission Management Handlers
  const handleManagePermissions = (objectId: string) => {
    setCreatedObjectId(objectId);
    setShowPermissionDialog(true);
  };

  const handlePermissionDialogClose = () => {
    setShowPermissionDialog(false);
    setCreatedObjectId(null);
  };

  const handlePermissionsSave = (grants: AclGrantRequest[]) => {
    console.log('Permissions saved for new Format:', grants);
  };

  /* SUBMIT HANDLER */
  const handleSubmit = async (values: FormikValues, { setSubmitting }: FormikHelpers<Format>) => {
    try {
      console.log("Format form values:", values);

      // NOTE: depending on your generated endpoint, you may need { body: values }
      const result = await addFormat(values as any).unwrap();

      if (result && result.id && currentUser.permissions.canGrantPermissions) {
        const shouldSetPermissions = window.confirm(
          `Format created successfully! Would you like to set permissions for this object?`
        );
        if (shouldSetPermissions) {
          handleManagePermissions(result.id);
        }
      }

      setSubmitting(false);
    } catch (error) {
      console.error('Failed to create Format:', error);
      setSubmitting(false);
    }
  };

  return (
    <div>
      <Formik
        validateOnBlur={true}
        initialValues={initialValues as Format}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >
        {({
          isSubmitting,
          isValid,
          errors,
          values,
          setFieldValue,
          touched,
          setFieldTouched,
          handleSubmit
        }) => (
          <form onSubmit={handleSubmit} className="form">
            <Accordion defaultActiveKey="1">
              
              {/* Editable Fields (NON read-only) */}
              <Accordion.Item eventKey="1">
                <Accordion.Header>
                  <FaRegPlusSquare size={28} /> &nbsp; Add New Format
                </Accordion.Header>
                <Accordion.Body>
                    <label htmlFor="workbookId" className="nice-form-control">
                      <b>
                        Workbook Id:
                        {touched.workbookId &&
                         !errors.workbookId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="workbookId"
                            value={values?.workbookId}
                            placeholder="Workbook Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="workbookId"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="fontWeight" className="nice-form-control">
                      <b>
                        Font Weight:
                        {touched.fontWeight &&
                         !errors.fontWeight && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>

                        {/* ENUM DROPDOWN */}
                        <BSForm.Select
                          name="fontWeight"
                          value={values.fontWeight || ''}
                          className={
                            errors.fontWeight
                              ? 'form-control field-error'
                              : 'nice-form-control form-control'
                          }
                          onChange={(e) => {
                            setFieldTouched('fontWeight', true);
                            setFieldValue('fontWeight', e.target.value === '' ? undefined : Number(e.target.value));
                          }}
                        >
                          <option value="" label="Select Font Weight" />
                          <FontWeightLookup />
                        </BSForm.Select>


                      <ErrorMessage
                        className="error"
                        name="fontWeight"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="fontSize" className="nice-form-control">
                      <b>
                        Font Size:
                        {touched.fontSize &&
                         !errors.fontSize && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>




                          {/* INTEGER FIELD */}
                          <Field
                            name="fontSize"
                            type="number"
                            value={values.fontSize || ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('fontSize', true);
                              const v = e.target.value;
                              setFieldValue('fontSize', v === '' ? undefined : Number(v));
                            }}
                            className={
                              errors.fontSize
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />






                      <ErrorMessage
                        className="error"
                        name="fontSize"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="fontFace" className="nice-form-control">
                      <b>
                        Font Face:
                        {touched.fontFace &&
                         !errors.fontFace && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="fontFace"
                            value={values?.fontFace}
                            placeholder="Font Face"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="fontFace"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="underline" className="nice-form-control">
                      <b>
                        Underline:
                        {touched.underline &&
                         !errors.underline && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>

                        {/* ENUM DROPDOWN */}
                        <BSForm.Select
                          name="underline"
                          value={values.underline || ''}
                          className={
                            errors.underline
                              ? 'form-control field-error'
                              : 'nice-form-control form-control'
                          }
                          onChange={(e) => {
                            setFieldTouched('underline', true);
                            setFieldValue('underline', e.target.value === '' ? undefined : Number(e.target.value));
                          }}
                        >
                          <option value="" label="Select Underline" />
                          <UnderlineLookup />
                        </BSForm.Select>


                      <ErrorMessage
                        className="error"
                        name="underline"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="color" className="nice-form-control">
                      <b>
                        Color:
                        {touched.color &&
                         !errors.color && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>

                        {/* ENUM DROPDOWN */}
                        <BSForm.Select
                          name="color"
                          value={values.color || ''}
                          className={
                            errors.color
                              ? 'form-control field-error'
                              : 'nice-form-control form-control'
                          }
                          onChange={(e) => {
                            setFieldTouched('color', true);
                            setFieldValue('color', e.target.value || undefined);
                          }}
                        >
                          <option value="" label="Select Color" />
                          <ColorLookup />
                        </BSForm.Select>


                      <ErrorMessage
                        className="error"
                        name="color"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="alignmentHorizontal" className="nice-form-control">
                      <b>
                        Alignment - horizontal:
                        {touched.alignmentHorizontal &&
                         !errors.alignmentHorizontal && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>

                        {/* ENUM DROPDOWN */}
                        <BSForm.Select
                          name="alignmentHorizontal"
                          value={values.alignmentHorizontal || ''}
                          className={
                            errors.alignmentHorizontal
                              ? 'form-control field-error'
                              : 'nice-form-control form-control'
                          }
                          onChange={(e) => {
                            setFieldTouched('alignmentHorizontal', true);
                            setFieldValue('alignmentHorizontal', e.target.value || undefined);
                          }}
                        >
                          <option value="" label="Select Alignment - horizontal" />
                          <AlignmentHorizontalLookup />
                        </BSForm.Select>


                      <ErrorMessage
                        className="error"
                        name="alignmentHorizontal"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="alignmentVertical" className="nice-form-control">
                      <b>
                        Alignment - vertical:
                        {touched.alignmentVertical &&
                         !errors.alignmentVertical && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>

                        {/* ENUM DROPDOWN */}
                        <BSForm.Select
                          name="alignmentVertical"
                          value={values.alignmentVertical || ''}
                          className={
                            errors.alignmentVertical
                              ? 'form-control field-error'
                              : 'nice-form-control form-control'
                          }
                          onChange={(e) => {
                            setFieldTouched('alignmentVertical', true);
                            setFieldValue('alignmentVertical', e.target.value || undefined);
                          }}
                        >
                          <option value="" label="Select Alignment - vertical" />
                          <AlignmentVerticalLookup />
                        </BSForm.Select>


                      <ErrorMessage
                        className="error"
                        name="alignmentVertical"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="pattern" className="nice-form-control">
                      <b>
                        Pattern:
                        {touched.pattern &&
                         !errors.pattern && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>

                        {/* ENUM DROPDOWN */}
                        <BSForm.Select
                          name="pattern"
                          value={values.pattern || ''}
                          className={
                            errors.pattern
                              ? 'form-control field-error'
                              : 'nice-form-control form-control'
                          }
                          onChange={(e) => {
                            setFieldTouched('pattern', true);
                            setFieldValue('pattern', e.target.value === '' ? undefined : Number(e.target.value));
                          }}
                        >
                          <option value="" label="Select Pattern" />
                          <PatternLookup />
                        </BSForm.Select>


                      <ErrorMessage
                        className="error"
                        name="pattern"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="id" className="nice-form-control">
                      <b>
                        Id:
                        {touched.id &&
                         !errors.id && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="id"
                            value={values?.id}
                            placeholder="Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="id"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="ownerId" className="nice-form-control">
                      <b>
                        Owner Id:
                        {touched.ownerId &&
                         !errors.ownerId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="ownerId"
                            value={values?.ownerId}
                            placeholder="Owner Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="ownerId"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="createdDate" className="nice-form-control">
                      <b>
                        Created Date:
                        {touched.createdDate &&
                         !errors.createdDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                          {/* DATETIME FIELD */}
                          <Field
                            name="createdDate"
                            type="datetime-local"
                            value={values.createdDate ? 
                              new Date(values.createdDate).toISOString().slice(0, 16) : 
                              ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('createdDate', true);
                              const v = e.target.value;
                              setFieldValue('createdDate', v ? new Date(v).toISOString() : '');
                            }}
                            className={
                              errors.createdDate
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />

                      <ErrorMessage
                        className="error"
                        name="createdDate"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="keyHash" className="nice-form-control">
                      <b>
                        Key Hash:
                        {touched.keyHash &&
                         !errors.keyHash && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="keyHash"
                            value={values?.keyHash}
                            placeholder="Key Hash"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="keyHash"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastAccessedById" className="nice-form-control">
                      <b>
                        Last Accessed By Id:
                        {touched.lastAccessedById &&
                         !errors.lastAccessedById && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="lastAccessedById"
                            value={values?.lastAccessedById}
                            placeholder="Last Accessed By Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="lastAccessedById"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastAccessedDate" className="nice-form-control">
                      <b>
                        Last Accessed Date:
                        {touched.lastAccessedDate &&
                         !errors.lastAccessedDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                          {/* DATETIME FIELD */}
                          <Field
                            name="lastAccessedDate"
                            type="datetime-local"
                            value={values.lastAccessedDate ? 
                              new Date(values.lastAccessedDate).toISOString().slice(0, 16) : 
                              ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('lastAccessedDate', true);
                              const v = e.target.value;
                              setFieldValue('lastAccessedDate', v ? new Date(v).toISOString() : '');
                            }}
                            className={
                              errors.lastAccessedDate
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />

                      <ErrorMessage
                        className="error"
                        name="lastAccessedDate"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastModifiedById" className="nice-form-control">
                      <b>
                        Last Modified By Id:
                        {touched.lastModifiedById &&
                         !errors.lastModifiedById && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="lastModifiedById"
                            value={values?.lastModifiedById}
                            placeholder="Last Modified By Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="lastModifiedById"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastModifiedDate" className="nice-form-control">
                      <b>
                        Last Modified Date:
                        {touched.lastModifiedDate &&
                         !errors.lastModifiedDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                          {/* DATETIME FIELD */}
                          <Field
                            name="lastModifiedDate"
                            type="datetime-local"
                            value={values.lastModifiedDate ? 
                              new Date(values.lastModifiedDate).toISOString().slice(0, 16) : 
                              ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('lastModifiedDate', true);
                              const v = e.target.value;
                              setFieldValue('lastModifiedDate', v ? new Date(v).toISOString() : '');
                            }}
                            className={
                              errors.lastModifiedDate
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />

                      <ErrorMessage
                        className="error"
                        name="lastModifiedDate"
                        component="span"
                      />
                    </label>
                    <br />

                  {/* SUBMIT BUTTON */}
                  <CoolButton
                    variant={isValid ? (isSubmitting ? 'disabled' : 'success') : 'warning'}
                    type="submit"
                    disabled={!isValid || isSubmitting}
                  >
                    {isSubmitting && (<span style={ { float: 'left', minHeight: 0 } }><LoadingSpinner label="" size={18} /></span>)}
                    <FaCheckCircle size={28} /> Create New Format
                  </CoolButton>

                  {addFormatResult.error && (
                    <div className="error" style={ { marginTop: 12 }}>
                      {JSON.stringify('data' in (addFormatResult as any).error ? (addFormatResult as any).error.data : (addFormatResult as any).error)}
                    </div>
                  )}
                </Accordion.Body>
              </Accordion.Item>

            {/* Debug/Dev Accordion */}
              <Accordion.Item eventKey="0">
                <Accordion.Header>
                  <FaCogs size={28} /> &nbsp;Server Messages
                </Accordion.Header>
                <Accordion.Body>
                  errors: {JSON.stringify(errors)}
                  <br />
                  addFormatResult: {JSON.stringify(addFormatResult)}
                </Accordion.Body>
              </Accordion.Item>

            </Accordion>
          </form>
        )}
      </Formik>

      {/* Permission Management Dialog */}
      {createdObjectId && (
        <PermissionDialog
          objectType="com.valkyrlabs.model.Format"
          objectId={createdObjectId}
          isVisible={showPermissionDialog}
          onClose={handlePermissionDialogClose}
          onSave={handlePermissionsSave}
          currentUser={currentUser}
        />
      )}
    </div>
  );
};

/*
lowercase fontweightlookup
uppercase FONTWEIGHTLOOKUP
snakecase font_weight_lookup
pascalcase FontWeightLookup
camelcase fontWeightLookup
kebabcase font-weight-lookup
*/


const FontWeightLookup = () => {
  return (
    <>
      <option value="200" label="fontWeightLight" />
      <option value="400" label="fontWeightRegular" />
      <option value="700" label="fontWeightBold" />
    </>
  );
};
/*
lowercase underlinelookup
uppercase UNDERLINELOOKUP
snakecase underline_lookup
pascalcase UnderlineLookup
camelcase underlineLookup
kebabcase underline-lookup
*/


const UnderlineLookup = () => {
  return (
    <>
      <option value="0" label="underlineNone" />
      <option value="1" label="underlineSingle" />
      <option value="2" label="underlineDouble" />
      <option value="21" label="underlineSingleAccounting" />
      <option value="22" label="underlineDoubleAccounting" />
    </>
  );
};
/*
lowercase colorlookup
uppercase COLORLOOKUP
snakecase color_lookup
pascalcase ColorLookup
camelcase colorLookup
kebabcase color-lookup
*/

const ColorLookup = () => {
  return (
    <>
      <option value='Black' label="Color Black" />
      <option value='White' label="Color White" />
      <option value='Red' label="Color Red" />
      <option value='BrightGreen' label="Color Bright Green" />
      <option value='Blue' label="Color Blue" />
      <option value='Yellow' label="Color Yellow" />
      <option value='Pink' label="Color Pink" />
      <option value='Turquoise' label="Color Turquoise" />
      <option value='DarkRed' label="Color Dark Red" />
      <option value='Orange' label="Color Orange" />
      <option value='DarkYellow' label="Color Dark Yellow" />
      <option value='Green' label="Color Green" />
      <option value='Teal' label="Color Teal" />
      <option value='LightBlue' label="Color Light Blue" />
      <option value='Violet' label="Color Violet" />
      <option value='Gray80' label="Color Gray 80" />
    </>
  );
};

/*
lowercase alignment-horizontallookup
uppercase ALIGNMENT-HORIZONTALLOOKUP
snakecase alignment_horizontal_lookup
pascalcase AlignmentHorizontalLookup
camelcase alignmentHorizontalLookup
kebabcase alignmenthorizontal-lookup
*/

const AlignmentHorizontalLookup = () => {
  return (
    <>
      <option value='Left' label="Align Left" />
      <option value='Center' label="Align Center" />
      <option value='Right' label="Align Right" />
      <option value='Fill' label="Align Fill" />
      <option value='Justify' label="Align Justify" />
      <option value='CenterAcrossSelection' label="Align Center Across Selection" />
    </>
  );
};

/*
lowercase alignment-verticallookup
uppercase ALIGNMENT-VERTICALLOOKUP
snakecase alignment_vertical_lookup
pascalcase AlignmentVerticalLookup
camelcase alignmentVerticalLookup
kebabcase alignmentvertical-lookup
*/

const AlignmentVerticalLookup = () => {
  return (
    <>
      <option value='Top' label="Align Top" />
      <option value='Middle' label="Align Middle" />
      <option value='Bottom' label="Align Bottom" />
      <option value='Justify' label="Align Justify" />
    </>
  );
};

/*
lowercase patternlookup
uppercase PATTERNLOOKUP
snakecase pattern_lookup
pascalcase PatternLookup
camelcase patternLookup
kebabcase pattern-lookup
*/


const PatternLookup = () => {
  return (
    <>
      <option value="0" label="patternNone" />
      <option value="1" label="patternFilled" />
      <option value="2" label="patternLightFill" />
      <option value="3" label="patternMediumFill" />
      <option value="4" label="patternHeavyFill" />
      <option value="5" label="patternHorizontalStripes" />
      <option value="6" label="patternVerticalStripes" />
      <option value="7" label="patternDiagonalStripes" />
      <option value="8" label="patternDiagonalStripesAlt" />
      <option value="9" label="patternCheckerboard" />
    </>
  );
};


/* Export the generated form */
export default FormatForm;

