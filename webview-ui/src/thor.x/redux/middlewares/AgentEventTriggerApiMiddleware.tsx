/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-03T07:35:49.309640-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/apiRest.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/

import { 
    getAgentEventTrigger, 
    postAgentEventTrigger,
    getAgentEventTriggerList , 
    deleteAgentEventTrigger , 
    updateAgentEventTrigger 
} from '@thor/api/AgentEventTriggerApi';

import {

    ADD_AGENTEVENTTRIGGER_REQUEST,
    FETCH_AGENTEVENTTRIGGER_REQUEST,
    LIST_AGENTEVENTTRIGGER_REQUEST,
    UPDATE_AGENTEVENTTRIGGER_REQUEST,
    DELETE_AGENTEVENTTRIGGER_REQUEST,

    addAgentEventTriggerFailure,
    addAgentEventTriggerSuccess,

    fetchAgentEventTriggerFailure,
    fetchAgentEventTriggerSuccess,
    
    listAgentEventTriggerFailure,
    listAgentEventTriggerSuccess,

    updateAgentEventTriggerFailure,
    updateAgentEventTriggerSuccess,
    
    deleteAgentEventTriggerFailure,
    deleteAgentEventTriggerSuccess,
    
} from '../actions/AgentEventTriggerApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: AgentEventTrigger
*/

export const AgentEventTriggerMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("AgentEventTrigger MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_AGENTEVENTTRIGGER_REQUEST:
            try {
                const response = postAgentEventTrigger(action.payload);
                dispatch(addAgentEventTriggerSuccess(response.body));
            } catch (error) {
                dispatch(addAgentEventTriggerFailure(error.message));
            }
            break;

        case LIST_AGENTEVENTTRIGGER_REQUEST:
            try {
                const response = getAgentEventTriggerList({});
                dispatch(listAgentEventTriggerSuccess(response.body));
            } catch (error) {
                dispatch(listAgentEventTriggerFailure(error.message));
            }
            break;


        case FETCH_AGENTEVENTTRIGGER_REQUEST:
            try {
                const response = getAgentEventTrigger(action.id);
                dispatch(fetchAgentEventTriggerSuccess(response.body));
            } catch (error) {
                dispatch(fetchAgentEventTriggerFailure(error.message));
            }
            break;

        case UPDATE_AGENTEVENTTRIGGER_REQUEST:
            try {
                const { id, AgentEventTrigger } = action.payload;
                const response = updateAgentEventTrigger(id);
                dispatch(updateAgentEventTriggerSuccess(response.body));
            } catch (error) {
                dispatch(updateAgentEventTriggerFailure(error.message));
            }
            break;

        case DELETE_AGENTEVENTTRIGGER_REQUEST:
            try {
                const { id, AgentEventTrigger } = action.payload;
                const response = deleteAgentEventTrigger(id);
                dispatch(deleteAgentEventTriggerSuccess(response.body));
            } catch (error) {
                dispatch(deleteAgentEventTriggerFailure(error.message));
            }
            break;

        default:
            break;
    }
};

