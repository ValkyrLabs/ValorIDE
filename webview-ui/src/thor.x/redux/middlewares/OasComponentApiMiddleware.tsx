/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-03T07:35:49.309640-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/apiRest.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/

import { 
    getOasComponent, 
    postOasComponent,
    getOasComponentList , 
    deleteOasComponent , 
    updateOasComponent 
} from '@thor/api/OasComponentApi';

import {

    ADD_OASCOMPONENT_REQUEST,
    FETCH_OASCOMPONENT_REQUEST,
    LIST_OASCOMPONENT_REQUEST,
    UPDATE_OASCOMPONENT_REQUEST,
    DELETE_OASCOMPONENT_REQUEST,

    addOasComponentFailure,
    addOasComponentSuccess,

    fetchOasComponentFailure,
    fetchOasComponentSuccess,
    
    listOasComponentFailure,
    listOasComponentSuccess,

    updateOasComponentFailure,
    updateOasComponentSuccess,
    
    deleteOasComponentFailure,
    deleteOasComponentSuccess,
    
} from '../actions/OasComponentApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: OasComponent
*/

export const OasComponentMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("OasComponent MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_OASCOMPONENT_REQUEST:
            try {
                const response = postOasComponent(action.payload);
                dispatch(addOasComponentSuccess(response.body));
            } catch (error) {
                dispatch(addOasComponentFailure(error.message));
            }
            break;

        case LIST_OASCOMPONENT_REQUEST:
            try {
                const response = getOasComponentList({});
                dispatch(listOasComponentSuccess(response.body));
            } catch (error) {
                dispatch(listOasComponentFailure(error.message));
            }
            break;


        case FETCH_OASCOMPONENT_REQUEST:
            try {
                const response = getOasComponent(action.id);
                dispatch(fetchOasComponentSuccess(response.body));
            } catch (error) {
                dispatch(fetchOasComponentFailure(error.message));
            }
            break;

        case UPDATE_OASCOMPONENT_REQUEST:
            try {
                const { id, OasComponent } = action.payload;
                const response = updateOasComponent(id);
                dispatch(updateOasComponentSuccess(response.body));
            } catch (error) {
                dispatch(updateOasComponentFailure(error.message));
            }
            break;

        case DELETE_OASCOMPONENT_REQUEST:
            try {
                const { id, OasComponent } = action.payload;
                const response = deleteOasComponent(id);
                dispatch(deleteOasComponentSuccess(response.body));
            } catch (error) {
                dispatch(deleteOasComponentFailure(error.message));
            }
            break;

        default:
            break;
    }
};

