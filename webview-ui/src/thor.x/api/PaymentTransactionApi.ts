// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: PaymentTransactionApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    PaymentTransaction,
    PaymentTransactionFromJSON,
    PaymentTransactionToJSON,
} from '../model';

export interface DeletePaymentTransactionRequest {
    id: string;
}

export interface GetPaymentTransactionRequest {
    id: string;
}

export interface GetPaymentTransactionListRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostPaymentTransactionRequest {
    paymentTransaction: PaymentTransaction;
}

export interface UpdatePaymentTransactionRequest {
    id: string;
    paymentTransaction: PaymentTransaction;
}


/**
 * Deletes a specific PaymentTransaction.
 * Delete a PaymentTransaction.
 */
function deletePaymentTransactionRaw<T>(requestParameters: DeletePaymentTransactionRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePaymentTransaction.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/PaymentTransaction/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific PaymentTransaction.
* Delete a PaymentTransaction.
*/
export function deletePaymentTransaction<T>(requestParameters: DeletePaymentTransactionRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deletePaymentTransactionRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single PaymentTransaction for a specific uid.
 * Retrieve a single PaymentTransaction
 */
function getPaymentTransactionRaw<T>(requestParameters: GetPaymentTransactionRequest, requestConfig: runtime.TypedQueryConfig<T, PaymentTransaction> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPaymentTransaction.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/PaymentTransaction/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PaymentTransactionFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single PaymentTransaction for a specific uid.
* Retrieve a single PaymentTransaction
*/
export function getPaymentTransaction<T>(requestParameters: GetPaymentTransactionRequest, requestConfig?: runtime.TypedQueryConfig<T, PaymentTransaction>): QueryConfig<T> {
    return getPaymentTransactionRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of PaymentTransactions.
 * Retrieve a list of PaymentTransactions
 */
function getPaymentTransactionListRaw<T>(requestParameters: GetPaymentTransactionListRequest, requestConfig: runtime.TypedQueryConfig<T, Array<PaymentTransaction>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/PaymentTransaction`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(PaymentTransactionFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of PaymentTransactions.
* Retrieve a list of PaymentTransactions
*/
export function getPaymentTransactionList<T>(requestParameters: GetPaymentTransactionListRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<PaymentTransaction>>): QueryConfig<T> {
    return getPaymentTransactionListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new PaymentTransaction.
 * Create a new PaymentTransaction
 */
function postPaymentTransactionRaw<T>(requestParameters: PostPaymentTransactionRequest, requestConfig: runtime.TypedQueryConfig<T, PaymentTransaction> = {}): QueryConfig<T> {
    if (requestParameters.paymentTransaction === null || requestParameters.paymentTransaction === undefined) {
        throw new runtime.RequiredError('paymentTransaction','Required parameter requestParameters.paymentTransaction was null or undefined when calling postPaymentTransaction.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/PaymentTransaction`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || PaymentTransactionToJSON(requestParameters.paymentTransaction),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PaymentTransactionFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new PaymentTransaction.
* Create a new PaymentTransaction
*/
export function postPaymentTransaction<T>(requestParameters: PostPaymentTransactionRequest, requestConfig?: runtime.TypedQueryConfig<T, PaymentTransaction>): QueryConfig<T> {
    return postPaymentTransactionRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing PaymentTransaction.
 * Update an existing PaymentTransaction
 */
function updatePaymentTransactionRaw<T>(requestParameters: UpdatePaymentTransactionRequest, requestConfig: runtime.TypedQueryConfig<T, PaymentTransaction> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePaymentTransaction.');
    }

    if (requestParameters.paymentTransaction === null || requestParameters.paymentTransaction === undefined) {
        throw new runtime.RequiredError('paymentTransaction','Required parameter requestParameters.paymentTransaction was null or undefined when calling updatePaymentTransaction.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/PaymentTransaction/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || PaymentTransactionToJSON(requestParameters.paymentTransaction),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PaymentTransactionFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing PaymentTransaction.
* Update an existing PaymentTransaction
*/
export function updatePaymentTransaction<T>(requestParameters: UpdatePaymentTransactionRequest, requestConfig?: runtime.TypedQueryConfig<T, PaymentTransaction>): QueryConfig<T> {
    return updatePaymentTransactionRaw(requestParameters, requestConfig);
}

