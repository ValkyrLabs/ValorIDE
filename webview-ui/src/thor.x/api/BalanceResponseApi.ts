// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: BalanceResponseApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    BalanceResponse,
    BalanceResponseFromJSON,
    BalanceResponseToJSON,
} from '../model';

export interface DeleteBalanceResponseRequest {
    id: string;
}

export interface GetBalanceResponseRequest {
    id: string;
}

export interface GetBalanceResponseListRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostBalanceResponseRequest {
    balanceResponse: BalanceResponse;
}

export interface UpdateBalanceResponseRequest {
    id: string;
    balanceResponse: BalanceResponse;
}


/**
 * Deletes a specific BalanceResponse.
 * Delete a BalanceResponse.
 */
function deleteBalanceResponseRaw<T>(requestParameters: DeleteBalanceResponseRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBalanceResponse.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/BalanceResponse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific BalanceResponse.
* Delete a BalanceResponse.
*/
export function deleteBalanceResponse<T>(requestParameters: DeleteBalanceResponseRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteBalanceResponseRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single BalanceResponse for a specific uid.
 * Retrieve a single BalanceResponse
 */
function getBalanceResponseRaw<T>(requestParameters: GetBalanceResponseRequest, requestConfig: runtime.TypedQueryConfig<T, BalanceResponse> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBalanceResponse.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/BalanceResponse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BalanceResponseFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single BalanceResponse for a specific uid.
* Retrieve a single BalanceResponse
*/
export function getBalanceResponse<T>(requestParameters: GetBalanceResponseRequest, requestConfig?: runtime.TypedQueryConfig<T, BalanceResponse>): QueryConfig<T> {
    return getBalanceResponseRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of BalanceResponses.
 * Retrieve a list of BalanceResponses
 */
function getBalanceResponseListRaw<T>(requestParameters: GetBalanceResponseListRequest, requestConfig: runtime.TypedQueryConfig<T, Array<BalanceResponse>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/BalanceResponse`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(BalanceResponseFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of BalanceResponses.
* Retrieve a list of BalanceResponses
*/
export function getBalanceResponseList<T>(requestParameters: GetBalanceResponseListRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<BalanceResponse>>): QueryConfig<T> {
    return getBalanceResponseListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new BalanceResponse.
 * Create a new BalanceResponse
 */
function postBalanceResponseRaw<T>(requestParameters: PostBalanceResponseRequest, requestConfig: runtime.TypedQueryConfig<T, BalanceResponse> = {}): QueryConfig<T> {
    if (requestParameters.balanceResponse === null || requestParameters.balanceResponse === undefined) {
        throw new runtime.RequiredError('balanceResponse','Required parameter requestParameters.balanceResponse was null or undefined when calling postBalanceResponse.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/BalanceResponse`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || BalanceResponseToJSON(requestParameters.balanceResponse),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BalanceResponseFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new BalanceResponse.
* Create a new BalanceResponse
*/
export function postBalanceResponse<T>(requestParameters: PostBalanceResponseRequest, requestConfig?: runtime.TypedQueryConfig<T, BalanceResponse>): QueryConfig<T> {
    return postBalanceResponseRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing BalanceResponse.
 * Update an existing BalanceResponse
 */
function updateBalanceResponseRaw<T>(requestParameters: UpdateBalanceResponseRequest, requestConfig: runtime.TypedQueryConfig<T, BalanceResponse> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateBalanceResponse.');
    }

    if (requestParameters.balanceResponse === null || requestParameters.balanceResponse === undefined) {
        throw new runtime.RequiredError('balanceResponse','Required parameter requestParameters.balanceResponse was null or undefined when calling updateBalanceResponse.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/BalanceResponse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || BalanceResponseToJSON(requestParameters.balanceResponse),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BalanceResponseFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing BalanceResponse.
* Update an existing BalanceResponse
*/
export function updateBalanceResponse<T>(requestParameters: UpdateBalanceResponseRequest, requestConfig?: runtime.TypedQueryConfig<T, BalanceResponse>): QueryConfig<T> {
    return updateBalanceResponseRaw(requestParameters, requestConfig);
}

