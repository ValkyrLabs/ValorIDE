// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: AccountBalanceApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    AccountBalance,
    AccountBalanceFromJSON,
    AccountBalanceToJSON,
} from '../model';

export interface DeleteAccountBalanceRequest {
    id: string;
}

export interface GetAccountBalanceRequest {
    id: string;
}

export interface GetAccountBalanceListRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostAccountBalanceRequest {
    accountBalance: AccountBalance;
}

export interface UpdateAccountBalanceRequest {
    id: string;
    accountBalance: AccountBalance;
}


/**
 * Deletes a specific AccountBalance.
 * Delete a AccountBalance.
 */
function deleteAccountBalanceRaw<T>(requestParameters: DeleteAccountBalanceRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAccountBalance.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/AccountBalance/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific AccountBalance.
* Delete a AccountBalance.
*/
export function deleteAccountBalance<T>(requestParameters: DeleteAccountBalanceRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteAccountBalanceRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single AccountBalance for a specific uid.
 * Retrieve a single AccountBalance
 */
function getAccountBalanceRaw<T>(requestParameters: GetAccountBalanceRequest, requestConfig: runtime.TypedQueryConfig<T, AccountBalance> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAccountBalance.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/AccountBalance/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AccountBalanceFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single AccountBalance for a specific uid.
* Retrieve a single AccountBalance
*/
export function getAccountBalance<T>(requestParameters: GetAccountBalanceRequest, requestConfig?: runtime.TypedQueryConfig<T, AccountBalance>): QueryConfig<T> {
    return getAccountBalanceRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of AccountBalances.
 * Retrieve a list of AccountBalances
 */
function getAccountBalanceListRaw<T>(requestParameters: GetAccountBalanceListRequest, requestConfig: runtime.TypedQueryConfig<T, Array<AccountBalance>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/AccountBalance`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(AccountBalanceFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of AccountBalances.
* Retrieve a list of AccountBalances
*/
export function getAccountBalanceList<T>(requestParameters: GetAccountBalanceListRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<AccountBalance>>): QueryConfig<T> {
    return getAccountBalanceListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new AccountBalance.
 * Create a new AccountBalance
 */
function postAccountBalanceRaw<T>(requestParameters: PostAccountBalanceRequest, requestConfig: runtime.TypedQueryConfig<T, AccountBalance> = {}): QueryConfig<T> {
    if (requestParameters.accountBalance === null || requestParameters.accountBalance === undefined) {
        throw new runtime.RequiredError('accountBalance','Required parameter requestParameters.accountBalance was null or undefined when calling postAccountBalance.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/AccountBalance`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || AccountBalanceToJSON(requestParameters.accountBalance),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AccountBalanceFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new AccountBalance.
* Create a new AccountBalance
*/
export function postAccountBalance<T>(requestParameters: PostAccountBalanceRequest, requestConfig?: runtime.TypedQueryConfig<T, AccountBalance>): QueryConfig<T> {
    return postAccountBalanceRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing AccountBalance.
 * Update an existing AccountBalance
 */
function updateAccountBalanceRaw<T>(requestParameters: UpdateAccountBalanceRequest, requestConfig: runtime.TypedQueryConfig<T, AccountBalance> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAccountBalance.');
    }

    if (requestParameters.accountBalance === null || requestParameters.accountBalance === undefined) {
        throw new runtime.RequiredError('accountBalance','Required parameter requestParameters.accountBalance was null or undefined when calling updateAccountBalance.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/AccountBalance/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || AccountBalanceToJSON(requestParameters.accountBalance),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AccountBalanceFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing AccountBalance.
* Update an existing AccountBalance
*/
export function updateAccountBalance<T>(requestParameters: UpdateAccountBalanceRequest, requestConfig?: runtime.TypedQueryConfig<T, AccountBalance>): QueryConfig<T> {
    return updateAccountBalanceRaw(requestParameters, requestConfig);
}

