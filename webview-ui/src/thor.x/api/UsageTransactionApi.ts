// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: UsageTransactionApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    UsageTransaction,
    UsageTransactionFromJSON,
    UsageTransactionToJSON,
} from '../model';

export interface DeleteUsageTransactionRequest {
    id: string;
}

export interface GetUsageTransactionRequest {
    id: string;
}

export interface GetUsageTransactionListRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostUsageTransactionRequest {
    usageTransaction: UsageTransaction;
}

export interface UpdateUsageTransactionRequest {
    id: string;
    usageTransaction: UsageTransaction;
}


/**
 * Deletes a specific UsageTransaction.
 * Delete a UsageTransaction.
 */
function deleteUsageTransactionRaw<T>(requestParameters: DeleteUsageTransactionRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUsageTransaction.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/UsageTransaction/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific UsageTransaction.
* Delete a UsageTransaction.
*/
export function deleteUsageTransaction<T>(requestParameters: DeleteUsageTransactionRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteUsageTransactionRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single UsageTransaction for a specific uid.
 * Retrieve a single UsageTransaction
 */
function getUsageTransactionRaw<T>(requestParameters: GetUsageTransactionRequest, requestConfig: runtime.TypedQueryConfig<T, UsageTransaction> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUsageTransaction.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/UsageTransaction/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UsageTransactionFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single UsageTransaction for a specific uid.
* Retrieve a single UsageTransaction
*/
export function getUsageTransaction<T>(requestParameters: GetUsageTransactionRequest, requestConfig?: runtime.TypedQueryConfig<T, UsageTransaction>): QueryConfig<T> {
    return getUsageTransactionRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of UsageTransactions.
 * Retrieve a list of UsageTransactions
 */
function getUsageTransactionListRaw<T>(requestParameters: GetUsageTransactionListRequest, requestConfig: runtime.TypedQueryConfig<T, Array<UsageTransaction>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/UsageTransaction`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(UsageTransactionFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of UsageTransactions.
* Retrieve a list of UsageTransactions
*/
export function getUsageTransactionList<T>(requestParameters: GetUsageTransactionListRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<UsageTransaction>>): QueryConfig<T> {
    return getUsageTransactionListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new UsageTransaction.
 * Create a new UsageTransaction
 */
function postUsageTransactionRaw<T>(requestParameters: PostUsageTransactionRequest, requestConfig: runtime.TypedQueryConfig<T, UsageTransaction> = {}): QueryConfig<T> {
    if (requestParameters.usageTransaction === null || requestParameters.usageTransaction === undefined) {
        throw new runtime.RequiredError('usageTransaction','Required parameter requestParameters.usageTransaction was null or undefined when calling postUsageTransaction.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/UsageTransaction`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || UsageTransactionToJSON(requestParameters.usageTransaction),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UsageTransactionFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new UsageTransaction.
* Create a new UsageTransaction
*/
export function postUsageTransaction<T>(requestParameters: PostUsageTransactionRequest, requestConfig?: runtime.TypedQueryConfig<T, UsageTransaction>): QueryConfig<T> {
    return postUsageTransactionRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing UsageTransaction.
 * Update an existing UsageTransaction
 */
function updateUsageTransactionRaw<T>(requestParameters: UpdateUsageTransactionRequest, requestConfig: runtime.TypedQueryConfig<T, UsageTransaction> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUsageTransaction.');
    }

    if (requestParameters.usageTransaction === null || requestParameters.usageTransaction === undefined) {
        throw new runtime.RequiredError('usageTransaction','Required parameter requestParameters.usageTransaction was null or undefined when calling updateUsageTransaction.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/UsageTransaction/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || UsageTransactionToJSON(requestParameters.usageTransaction),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UsageTransactionFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing UsageTransaction.
* Update an existing UsageTransaction
*/
export function updateUsageTransaction<T>(requestParameters: UpdateUsageTransactionRequest, requestConfig?: runtime.TypedQueryConfig<T, UsageTransaction>): QueryConfig<T> {
    return updateUsageTransactionRaw(requestParameters, requestConfig);
}

