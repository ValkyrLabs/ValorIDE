// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: LineItemApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    LineItem,
    LineItemFromJSON,
    LineItemToJSON,
} from '../model';

export interface DeleteLineItemRequest {
    id: string;
}

export interface GetLineItemRequest {
    id: string;
}

export interface GetLineItemListRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostLineItemRequest {
    lineItem: LineItem;
}

export interface UpdateLineItemRequest {
    id: string;
    lineItem: LineItem;
}


/**
 * Deletes a specific LineItem.
 * Delete a LineItem.
 */
function deleteLineItemRaw<T>(requestParameters: DeleteLineItemRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteLineItem.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/LineItem/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific LineItem.
* Delete a LineItem.
*/
export function deleteLineItem<T>(requestParameters: DeleteLineItemRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteLineItemRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single LineItem for a specific uid.
 * Retrieve a single LineItem
 */
function getLineItemRaw<T>(requestParameters: GetLineItemRequest, requestConfig: runtime.TypedQueryConfig<T, LineItem> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getLineItem.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/LineItem/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(LineItemFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single LineItem for a specific uid.
* Retrieve a single LineItem
*/
export function getLineItem<T>(requestParameters: GetLineItemRequest, requestConfig?: runtime.TypedQueryConfig<T, LineItem>): QueryConfig<T> {
    return getLineItemRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of LineItems.
 * Retrieve a list of LineItems
 */
function getLineItemListRaw<T>(requestParameters: GetLineItemListRequest, requestConfig: runtime.TypedQueryConfig<T, Array<LineItem>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/LineItem`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(LineItemFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of LineItems.
* Retrieve a list of LineItems
*/
export function getLineItemList<T>(requestParameters: GetLineItemListRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<LineItem>>): QueryConfig<T> {
    return getLineItemListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new LineItem.
 * Create a new LineItem
 */
function postLineItemRaw<T>(requestParameters: PostLineItemRequest, requestConfig: runtime.TypedQueryConfig<T, LineItem> = {}): QueryConfig<T> {
    if (requestParameters.lineItem === null || requestParameters.lineItem === undefined) {
        throw new runtime.RequiredError('lineItem','Required parameter requestParameters.lineItem was null or undefined when calling postLineItem.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/LineItem`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || LineItemToJSON(requestParameters.lineItem),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(LineItemFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new LineItem.
* Create a new LineItem
*/
export function postLineItem<T>(requestParameters: PostLineItemRequest, requestConfig?: runtime.TypedQueryConfig<T, LineItem>): QueryConfig<T> {
    return postLineItemRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing LineItem.
 * Update an existing LineItem
 */
function updateLineItemRaw<T>(requestParameters: UpdateLineItemRequest, requestConfig: runtime.TypedQueryConfig<T, LineItem> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateLineItem.');
    }

    if (requestParameters.lineItem === null || requestParameters.lineItem === undefined) {
        throw new runtime.RequiredError('lineItem','Required parameter requestParameters.lineItem was null or undefined when calling updateLineItem.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/LineItem/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || LineItemToJSON(requestParameters.lineItem),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(LineItemFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing LineItem.
* Update an existing LineItem
*/
export function updateLineItem<T>(requestParameters: UpdateLineItemRequest, requestConfig?: runtime.TypedQueryConfig<T, LineItem>): QueryConfig<T> {
    return updateLineItemRaw(requestParameters, requestConfig);
}

