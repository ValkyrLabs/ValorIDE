"use strict";
// tslint:disable
/**
 * ValkyrAI CORE API
 * The API for accessing ValkyrAI services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentDataStatusEnum = exports.ContentDataCategoryEnum = exports.ContentDataContentTypeEnum = void 0;
exports.ContentDataFromJSON = ContentDataFromJSON;
exports.ContentDataToJSON = ContentDataToJSON;
const runtime_1 = require("../src/runtime");
const _1 = require("./");
function ContentDataFromJSON(json) {
    return {
        'authorName': !(0, runtime_1.exists)(json, 'authorName') ? undefined : json['authorName'],
        'title': !(0, runtime_1.exists)(json, 'title') ? undefined : json['title'],
        'subtitle': !(0, runtime_1.exists)(json, 'subtitle') ? undefined : json['subtitle'],
        'fileName': !(0, runtime_1.exists)(json, 'fileName') ? undefined : json['fileName'],
        'contentUrl': !(0, runtime_1.exists)(json, 'contentUrl') ? undefined : json['contentUrl'],
        'contentData': !(0, runtime_1.exists)(json, 'contentData') ? undefined : json['contentData'],
        'contentType': !(0, runtime_1.exists)(json, 'contentType') ? undefined : json['contentType'],
        'thumbnailImage': !(0, runtime_1.exists)(json, 'thumbnailImage') ? undefined : json['thumbnailImage'],
        'largeImage': !(0, runtime_1.exists)(json, 'largeImage') ? undefined : json['largeImage'],
        'category': !(0, runtime_1.exists)(json, 'category') ? undefined : json['category'],
        'status': !(0, runtime_1.exists)(json, 'status') ? undefined : json['status'],
        'releaseDate': !(0, runtime_1.exists)(json, 'releaseDate') ? undefined : new Date(json['releaseDate']),
        'contentMedia': !(0, runtime_1.exists)(json, 'contentMedia') ? undefined : json['contentMedia'].map(_1.ContentMediaLinkFromJSON),
        'author': !(0, runtime_1.exists)(json, 'author') ? undefined : (0, _1.PrincipalFromJSON)(json['author']),
        'id': !(0, runtime_1.exists)(json, 'id') ? undefined : json['id'],
        'ownerId': !(0, runtime_1.exists)(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !(0, runtime_1.exists)(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'keyHash': !(0, runtime_1.exists)(json, 'keyHash') ? undefined : json['keyHash'],
        'lastAccessedById': !(0, runtime_1.exists)(json, 'lastAccessedById') ? undefined : json['lastAccessedById'],
        'lastAccessedDate': !(0, runtime_1.exists)(json, 'lastAccessedDate') ? undefined : new Date(json['lastAccessedDate']),
        'lastModifiedById': !(0, runtime_1.exists)(json, 'lastModifiedById') ? undefined : json['lastModifiedById'],
        'lastModifiedDate': !(0, runtime_1.exists)(json, 'lastModifiedDate') ? undefined : new Date(json['lastModifiedDate']),
    };
}
function ContentDataToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    return {
        'authorName': value.authorName,
        'title': value.title,
        'subtitle': value.subtitle,
        'fileName': value.fileName,
        'contentUrl': value.contentUrl,
        'contentData': value.contentData,
        'contentType': value.contentType,
        'thumbnailImage': value.thumbnailImage,
        'largeImage': value.largeImage,
        'category': value.category,
        'status': value.status,
        'releaseDate': value.releaseDate === undefined ? undefined : value.releaseDate.toISOString(),
        'contentMedia': value.contentMedia === undefined ? undefined : value.contentMedia.map(_1.ContentMediaLinkToJSON),
        'author': (0, _1.PrincipalToJSON)(value.author),
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'keyHash': value.keyHash,
        'lastAccessedById': value.lastAccessedById,
        'lastAccessedDate': value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
        'lastModifiedById': value.lastModifiedById,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
    };
}
/**
* @export
* @enum {string}
*/
var ContentDataContentTypeEnum;
(function (ContentDataContentTypeEnum) {
    ContentDataContentTypeEnum["PLAINTEXT"] = "plaintext";
    ContentDataContentTypeEnum["MARKDOWN"] = "markdown";
    ContentDataContentTypeEnum["JSON"] = "json";
    ContentDataContentTypeEnum["CODE"] = "code";
    ContentDataContentTypeEnum["YAML"] = "yaml";
    ContentDataContentTypeEnum["AUDIO"] = "audio";
    ContentDataContentTypeEnum["VIDEO"] = "video";
    ContentDataContentTypeEnum["URL"] = "url";
    ContentDataContentTypeEnum["SPREADSHEET"] = "spreadsheet";
    ContentDataContentTypeEnum["PDF"] = "pdf";
    ContentDataContentTypeEnum["BINARY"] = "binary";
})(ContentDataContentTypeEnum || (exports.ContentDataContentTypeEnum = ContentDataContentTypeEnum = {}));
/**
* @export
* @enum {string}
*/
var ContentDataCategoryEnum;
(function (ContentDataCategoryEnum) {
    ContentDataCategoryEnum["CODEGEN"] = "codegen";
    ContentDataCategoryEnum["SLIDES"] = "slides";
    ContentDataCategoryEnum["SPREADSHEETS"] = "spreadsheets";
    ContentDataCategoryEnum["DOCS"] = "docs";
    ContentDataCategoryEnum["BLOG"] = "blog";
    ContentDataCategoryEnum["PRODUCT"] = "product";
    ContentDataCategoryEnum["SECURITY"] = "security";
    ContentDataCategoryEnum["EVENT"] = "event";
})(ContentDataCategoryEnum || (exports.ContentDataCategoryEnum = ContentDataCategoryEnum = {}));
/**
* @export
* @enum {string}
*/
var ContentDataStatusEnum;
(function (ContentDataStatusEnum) {
    ContentDataStatusEnum["HOLDING"] = "holding";
    ContentDataStatusEnum["EDITING"] = "editing";
    ContentDataStatusEnum["PUBLISHED"] = "published";
})(ContentDataStatusEnum || (exports.ContentDataStatusEnum = ContentDataStatusEnum = {}));
//# sourceMappingURL=ContentData.js.map