// tslint:disable
/**
 * ValkyrAI CORE API
 * The API for accessing ValkyrAI services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../src/runtime';
import {


    ContentData,
    ContentDataFromJSON,
    ContentDataToJSON,
    ProductFeature,
    ProductFeatureFromJSON,
    ProductFeatureToJSON,
} from './';


// thorapi

/**
 * Represents a product or service in the CRM.
 * @export
 * @interface Product
 */
export type Product  = {
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    name: string;
    /**
     * the base price of the product before features
     * @type {number}
     * @memberof Product
     */
    price: number;
    /**
     * Availability status of the product.
     * @type {string}
     * @memberof Product
     */
    status: ProductStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    description?: string;
    /**
     * the sale price of the product if any
     * @type {number}
     * @memberof Product
     */
    salePrice?: number;
    /**
     * the taxable rate for the product (zero if non-taxable)
     * @type {number}
     * @memberof Product
     */
    taxRate?: number;
    /**
     * the duration of the product if applicable
     * @type {number}
     * @memberof Product
     */
    duration?: number;
    /**
     * 
     * @type {Array<ContentData>}
     * @memberof Product
     */
    productContentData?: Array<ContentData>;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    type?: ProductTypeEnum;
    /**
     * 
     * @type {Array<ProductFeature>}
     * @memberof Product
     */
    features?: Array<ProductFeature>;
    /**
     * the country of origin of the product
     * @type {string}
     * @memberof Product
     */
    countryOfOrigin?: string;
    /**
     * Unique identifier for object in the system
     * @type {string}
     * @memberof Product
     */
    id?: string;
    /**
     * UUID of owner of the object in the system
     * @type {string}
     * @memberof Product
     */
    ownerId?: string;
    /**
     * Date of object creation
     * @type {Date}
     * @memberof Product
     */
    createdDate?: Date;
    /**
     * Data, including hash of the key(s) used to encrypt this record.
     * @type {string}
     * @memberof Product
     */
    keyHash?: string;
    /**
     * Last user to access object
     * @type {string}
     * @memberof Product
     */
    lastAccessedById?: string;
    /**
     * Timestamp of last access of object
     * @type {Date}
     * @memberof Product
     */
    lastAccessedDate?: Date;
    /**
     * Unique identifier for user who last modifed the object in the system
     * @type {string}
     * @memberof Product
     */
    lastModifiedById?: string;
    /**
     * Date of last object modification
     * @type {Date}
     * @memberof Product
     */
    lastModifiedDate?: Date;
}

export function ProductFromJSON(json: any): Product {
    return {
        'name': json['name'],
        'price': json['price'],
        'status': json['status'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'salePrice': !exists(json, 'salePrice') ? undefined : json['salePrice'],
        'taxRate': !exists(json, 'taxRate') ? undefined : json['taxRate'],
        'duration': !exists(json, 'duration') ? undefined : json['duration'],
        'productContentData': !exists(json, 'productContentData') ? undefined : (json['productContentData'] as Array<any>).map(ContentDataFromJSON),
        'type': !exists(json, 'type') ? undefined : json['type'],
        'features': !exists(json, 'features') ? undefined : (json['features'] as Array<any>).map(ProductFeatureFromJSON),
        'countryOfOrigin': !exists(json, 'countryOfOrigin') ? undefined : json['countryOfOrigin'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'keyHash': !exists(json, 'keyHash') ? undefined : json['keyHash'],
        'lastAccessedById': !exists(json, 'lastAccessedById') ? undefined : json['lastAccessedById'],
        'lastAccessedDate': !exists(json, 'lastAccessedDate') ? undefined : new Date(json['lastAccessedDate']),
        'lastModifiedById': !exists(json, 'lastModifiedById') ? undefined : json['lastModifiedById'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : new Date(json['lastModifiedDate']),
    };
}

export function ProductToJSON(value?: Product): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'name': value.name,
        'price': value.price,
        'status': value.status,
        'description': value.description,
        'salePrice': value.salePrice,
        'taxRate': value.taxRate,
        'duration': value.duration,
        'productContentData': value.productContentData === undefined ? undefined : (value.productContentData as Array<any>).map(ContentDataToJSON),
        'type': value.type,
        'features': value.features === undefined ? undefined : (value.features as Array<any>).map(ProductFeatureToJSON),
        'countryOfOrigin': value.countryOfOrigin,
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'keyHash': value.keyHash,
        'lastAccessedById': value.lastAccessedById,
        'lastAccessedDate': value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
        'lastModifiedById': value.lastModifiedById,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
    };
}

/**
* @export
* @enum {string}
*/
export enum ProductStatusEnum {
    PENDING = 'pending',
    SALE = 'sale',
    CLEARANCE = 'clearance',
    AVAILABLE = 'available',
    DISCONTINUED = 'discontinued',
    OUTOFSTOCK = 'out_of_stock'
}
/**
* @export
* @enum {string}
*/
export enum ProductTypeEnum {
    PHYSICAL = 'physical',
    SUBSCRIPTION = 'subscription',
    CREDITS = 'credits',
    BESPOKE = 'bespoke',
    CONSULTING = 'consulting',
    SUPPORT = 'support',
    CLOUD = 'cloud',
    DOWNLOAD = 'download',
    SERVICE = 'service',
    MEDIA = 'media',
    PERFORMANCE = 'performance',
    OTHER = 'other'
}


