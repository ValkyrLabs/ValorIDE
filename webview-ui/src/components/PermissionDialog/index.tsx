import React, { useState, useEffect } from "react";
import {
  Modal,
  Form as BSForm,
  Button,
  Row,
  Col,
  Alert,
  Table,
  Spinner,
  ButtonGroup,
} from "react-bootstrap";
import LoadingSpinner from "@valkyr/component-library/LoadingSpinner";
import {
  FaLock,
  FaUnlock,
  FaUserShield,
  FaUsers,
  FaSuperpowers,
  FaTrash,
} from "react-icons/fa";

// custom redux for ACL granting
import {
  useGrantAclPermissionMutation,
  useRevokeAclPermissionMutation,
  useGetRolesQuery,
  useGetObjectAclEntriesQuery,
  useDenyAclPermissionMutation,
} from "../../redux/services/AclService";
import CoolButton from "@valkyr/component-library/CoolButton";
import { invalidateEntityById } from "../../redux/cache/rtkInvalidate";

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** {{{generatorVersion}}}
**GENERATED DATE:** {{generatedDate}}
**GENERATOR CLASS:** {{generatorClass}}

Template file: typescript-redux-query/components/PermissionDialog.tsx.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/

import {
  AclGrantRequest,
  PermissionAssignment,
  PermissionDialogProps,
  PermissionType,
} from "./types";

export const PermissionDialog: React.FC<PermissionDialogProps> = ({
  objectType,
  objectId,
  isVisible,
  onClose,
  onSave,
  currentUser,
}) => {
  const [assignments, setAssignments] = useState<PermissionAssignment[]>([]);
  const [newAssignment, setNewAssignment] = useState<PermissionAssignment>({
    username: "",
    permissions: [],
    isRole: false,
  });
  const [showAlert, setShowAlert] = useState<{
    type: "success" | "error";
    message: string;
  } | null>(null);

  // RTK Query hooks
  const [grantPermission, { isLoading: isGranting }] =
    useGrantAclPermissionMutation();
  const [revokePermission, { isLoading: isRevoking }] =
    useRevokeAclPermissionMutation();
  const [denyPermission, { isLoading: isDenying }] =
    useDenyAclPermissionMutation();
  const { data: roles = [], isLoading: rolesLoading } = useGetRolesQuery();
  const rolesPlusSystem = React.useMemo(() => {
    const hasSystem = roles.some((r) => (r.roleName || r.role) === "SYSTEM");
    return hasSystem
      ? roles
      : [...roles, { id: "SYSTEM", roleName: "SYSTEM", role: "CUSTOM" as any }];
  }, [roles]);
  const {
    data: existingEntries = [],
    isLoading: entriesLoading,
    refetch: refetchEntries,
  } = useGetObjectAclEntriesQuery({ objectType, objectId });

  // Check if current user can manage permissions

  const canManagePermissions = true; // for now... check back on solution

  useEffect(() => {
    if (existingEntries.length > 0) {
      // Group existing entries by username
      const grouped = existingEntries.reduce(
        (acc, entry) => {
          if (!acc[entry.username]) {
            acc[entry.username] = {
              username: entry.username,
              permissions: [],
              isRole: false, // We'll need to determine this from the username format
            };
          }
          if (entry.granted) {
            acc[entry.username].permissions.push(
              entry.permission as PermissionType,
            );
          }
          return acc;
        },
        {} as Record<string, PermissionAssignment>,
      );

      setAssignments(Object.values(grouped));
    }
  }, [existingEntries]);

  const handlePermissionToggle = (
    permission: PermissionType,
    checked: boolean,
  ) => {
    setNewAssignment((prev) => ({
      ...prev,
      permissions: checked
        ? [...prev.permissions, permission]
        : prev.permissions.filter((p) => p !== permission),
    }));
  };

  const handleAddAssignment = () => {
    if (!newAssignment.username || newAssignment.permissions.length === 0) {
      setShowAlert({
        type: "error",
        message: "Please select a user/role and at least one permission.",
      });
      return;
    }

    setAssignments((prev) => [...prev, { ...newAssignment }]);
    setNewAssignment({
      username: "",
      permissions: [],
      isRole: false,
    });
  };

  // Convenience: quickly assign SYSTEM decrypt permission
  const grantSystemDecrypt = () => {
    setAssignments((prev) => [
      ...prev,
      {
        username: "SYSTEM",
        isRole: false,
        permissions: [PermissionType.VIEW_DECRYPTED],
      },
    ]);
  };

  // Convenience: quickly assign ANONYMOUS READ
  const grantAnonymousRead = () => {
    setAssignments((prev) => [
      ...prev,
      {
        username: "anonymousUser",
        isRole: false,
        permissions: [PermissionType.READ],
      },
    ]);
  };

  // Convenience: Deny EVERYONE all permissions (testing only)
  const denyEveryoneAll = async () => {
    try {
      const perms = [
        PermissionType.READ,
        PermissionType.WRITE,
        PermissionType.CREATE,
        PermissionType.DELETE,
        PermissionType.ADMINISTRATION,
        PermissionType.VIEW_DECRYPTED,
      ];
      for (const p of perms) {
        await denyPermission({
          objectType,
          objectId,
          username: "EVERYONE",
          permission: p,
        }).unwrap();
      }
      setShowAlert({
        type: "success",
        message: "Denied EVERYONE all base permissions for this object.",
      });
      setTimeout(() => refetchEntries(), 300);
    } catch (e) {
      setShowAlert({
        type: "error",
        message: "Failed to deny EVERYONE permissions.",
      });
    }
  };

  const handleRemoveAssignment = (index: number) => {
    setAssignments((prev) => prev.filter((_, i) => i !== index));
  };

  const handleSave = async () => {
    if (!canManagePermissions) {
      setShowAlert({
        type: "error",
        message: "You do not have permission to manage object permissions.",
      });
      return;
    }

    try {
      // Convert assignments to grant requests
      const grantRequests: AclGrantRequest[] = [];

      assignments.forEach((assignment) => {
        assignment.permissions.forEach((permission) => {
          grantRequests.push({
            objectType,
            objectId,
            username: assignment.username,
            permission,
          });
        });
      });

      // First revoke all existing permissions, then grant new ones
      for (const entry of existingEntries) {
        if (entry.granted) {
          await revokePermission({
            objectType,
            objectId,
            username: entry.username,
            permission: entry.permission,
          }).unwrap();
        }
      }

      // Grant new permissions
      for (const request of grantRequests) {
        await grantPermission(request).unwrap();
      }

      setShowAlert({
        type: "success",
        message: "Permissions updated successfully!",
      });
      onSave(grantRequests);

      // Refetch entries to update the display
      setTimeout(() => {
        refetchEntries();
      }, 500);

      // Invalidate caches for the affected object so lists/details refresh
      try {
        if (objectId && objectType) {
          invalidateEntityById(objectType, objectId);
        }
      } catch { }
    } catch (error) {
      console.error("Error updating permissions:", error);
      setShowAlert({
        type: "error",
        message: "Failed to update permissions. Please try again.",
      });
    }
  };

  const handleClose = () => {
    setAssignments([]);
    setNewAssignment({ username: "", permissions: [], isRole: false });
    setShowAlert(null);
    onClose();
  };

  if (!canManagePermissions) {
    return (
      <Modal show={isVisible} onHide={handleClose} size="sm" centered>
        <Modal.Header closeButton>
          <Modal.Title>
            <FaLock /> Access Denied
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Alert variant="warning">
            You do not have permission to manage permissions for this object.
            Only owners and administrators can modify object permissions.
          </Alert>
        </Modal.Body>
        <Modal.Footer>
          <CoolButton variant="secondary" onClick={handleClose}>
            Close
          </CoolButton>
        </Modal.Footer>
      </Modal>
    );
  }

  return (
    <Modal show={isVisible} onHide={handleClose} size="xl" centered>
      <Modal.Header closeButton>
        <Modal.Title>
          <FaUserShield /> Manage Permissions - {objectType}
        </Modal.Title>
      </Modal.Header>
      <Modal.Body>
        {showAlert && (
          <Alert
            variant={showAlert.type === "success" ? "success" : "danger"}
            onClose={() => setShowAlert(null)}
            dismissible
          >
            {showAlert.message}
          </Alert>
        )}

        {/* Current Permissions */}
        <div className="mb-4">
          <h5>
            <FaUsers /> Current Permissions
          </h5>
          <div className="mb-2">
            <CoolButton
              variant="outline-warning"
              size="sm"
              onClick={grantSystemDecrypt}
            >
              Grant SYSTEM decrypt
            </CoolButton>
            <CoolButton
              variant="outline-success"
              size="sm"
              className="ms-2"
              onClick={grantAnonymousRead}
            >
              Grant ANONYMOUS read
            </CoolButton>
            <CoolButton
              variant="outline-danger"
              size="sm"
              className="ms-2"
              onClick={denyEveryoneAll}
            >
              Deny EVERYONE all
            </CoolButton>
          </div>
          {entriesLoading ? (
            <div className="text-center">
              <LoadingSpinner label="Loading permissionsâ€¦" size={18} />
            </div>
          ) : (
            <Table striped bordered hover size="sm">
              <thead>
                <tr>
                  <th>
                    <FaTrash />
                  </th>
                  <th>User/Role</th>
                  <th>R</th>
                  <th>W</th>
                  <th>C</th>
                  <th>D</th>
                  <th>
                    <FaSuperpowers />
                  </th>
                </tr>
              </thead>
              <tbody>
                {assignments.map((assignment, index) => (
                  <tr key={index}>
                    <td>
                      <CoolButton
                        variant="danger"
                        size="sm"
                        onClick={() => handleRemoveAssignment(index)}
                      >
                        <FaTrash />
                      </CoolButton>
                    </td>
                    <td>
                      {assignment.isRole ? <FaUsers /> : <FaUserShield />}{" "}
                      {assignment.username}
                    </td>
                    {Object.values(PermissionType).map((permission) => (
                      <td key={permission} className="text-center">
                        {assignment.permissions.includes(permission) ? (
                          <FaUnlock className="text-primary-emphasis" />
                        ) : (
                          <FaLock className="text-muted" />
                        )}
                      </td>
                    ))}
                  </tr>
                ))}
                {assignments.length === 0 && (
                  <tr>
                    <td colSpan={7} className="text-center text-muted">
                      No permissions assigned
                    </td>
                  </tr>
                )}
              </tbody>
            </Table>
          )}
          {!entriesLoading && existingEntries.some((e) => !e.granted) && (
            <div className="mt-2">
              <h6>Explicit Denies</h6>
              <Table bordered size="sm">
                <thead>
                  <tr>
                    <th>User/Role</th>
                    <th>Permission</th>
                    <th>Status</th>
                  </tr>
                </thead>
                <tbody>
                  {existingEntries
                    .filter((e) => !e.granted)
                    .map((e, i) => (
                      <tr key={`deny-${i}`}>
                        <td>{e.username}</td>
                        <td>{e.permission}</td>
                        <td className="text-danger">DENY</td>
                      </tr>
                    ))}
                </tbody>
              </Table>
            </div>
          )}
        </div>

        {/* Add New Permission */}
        <div className="border p-3 rounded">
          <h5>Add New Permission</h5>
          <Row>
            <Col md={6}>
              <BSForm.Group className="mb-3">
                <BSForm.Label>Assignment Type</BSForm.Label>
                <ButtonGroup className="d-block">
                  <CoolButton
                    variant={
                      !newAssignment.isRole ? "primary" : "outline-primary"
                    }
                    onClick={() =>
                      setNewAssignment((prev) => ({
                        ...prev,
                        isRole: false,
                        username: "",
                      }))
                    }
                  >
                    <FaUserShield /> User
                  </CoolButton>
                  <CoolButton
                    variant={
                      newAssignment.isRole ? "primary" : "outline-primary"
                    }
                    onClick={() =>
                      setNewAssignment((prev) => ({
                        ...prev,
                        isRole: true,
                        username: "",
                      }))
                    }
                  >
                    <FaUsers /> Role
                  </CoolButton>
                </ButtonGroup>
              </BSForm.Group>
            </Col>
            <Col md={6}>
              <BSForm.Group className="mb-3">
                <BSForm.Label>
                  {newAssignment.isRole ? "Select Role" : "Username"}
                </BSForm.Label>
                {newAssignment.isRole ? (
                  <BSForm.Select
                    value={newAssignment.username}
                    onChange={(e) =>
                      setNewAssignment((prev) => ({
                        ...prev,
                        username: e.target.value,
                      }))
                    }
                    disabled={rolesLoading}
                  >
                    <option value="">Select a role...</option>
                    {rolesPlusSystem.map((role) => (
                      <option key={role.id} value={role.roleName || role.role}>
                        {role.roleName || role.role}
                      </option>
                    ))}
                  </BSForm.Select>
                ) : (
                  <BSForm.Control
                    type="text"
                    placeholder="Enter username"
                    value={newAssignment.username}
                    onChange={(e) =>
                      setNewAssignment((prev) => ({
                        ...prev,
                        username: e.target.value,
                      }))
                    }
                  />
                )}
              </BSForm.Group>
            </Col>
          </Row>

          <BSForm.Group className="mb-3">
            <BSForm.Label>Permissions</BSForm.Label>
            <Row>
              {Object.values(PermissionType).map((permission) => (
                <Col key={permission} md={4} sm={6}>
                  <BSForm.Check
                    type="checkbox"
                    id={`perm-${permission}`}
                    label={permission}
                    checked={newAssignment.permissions.includes(permission)}
                    onChange={(e) =>
                      handlePermissionToggle(permission, e.target.checked)
                    }
                  />
                </Col>
              ))}
            </Row>
          </BSForm.Group>

          <CoolButton variant="success" onClick={handleAddAssignment}>
            Add Permission
          </CoolButton>
        </div>
      </Modal.Body>
      <Modal.Footer>
        <CoolButton variant="secondary" onClick={handleClose}>
          Cancel
        </CoolButton>
        <CoolButton
          variant="primary"
          onClick={handleSave}
          disabled={isGranting || isRevoking}
        >
          {(isGranting || isRevoking) && (
            <Spinner animation="border" size="sm" className="me-2" />
          )}
          Save Permissions
        </CoolButton>
      </Modal.Footer>
    </Modal>
  );
};
