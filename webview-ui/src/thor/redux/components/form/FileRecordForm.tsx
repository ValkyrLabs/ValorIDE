import { ErrorMessage, Field, Formik, FormikHelpers, FormikValues } from 'formik';
import React, { useState } from 'react';
import {
  Form as BSForm,
  Accordion,
  Col,
  Row,
  Spinner
} from 'react-bootstrap';
import LoadingSpinner from '@valkyr/component-library/LoadingSpinner';
import { FaCheckCircle, FaCogs, FaRegPlusSquare } from 'react-icons/fa';
import CoolButton from '@valkyr/component-library/CoolButton';
import * as Yup from 'yup';
import { SmartField } from '@valkyr/component-library/ForeignKey/SmartField';

import { PermissionDialog } from '@valkyr/component-library/PermissionDialog';
import { AclGrantRequest, PermissionType } from '@valkyr/component-library/PermissionDialog/types';


import {
  FileRecord,
  FileRecordStatusEnum,
  FileRecordVirusScanStatusEnum,
} from '@thor/model';

import { useAddFileRecordMutation } from '../../services/FileRecordService';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelForm.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description:
Primary metadata for a stored file, including lifecycle and ownership context.
*/

/* -----------------------------------------------------
   ENUM VALIDATION ARRAYS (Yup oneOf checks), if any
-------------------------------------------------------- */
const StatusValidation = () => {
  return [
    'UPLOADING',
    'SCANNING',
    'AVAILABLE',
    'BLOCKED',
    'DELETED',
    'FAILED',
  ];
};
const VirusScanStatusValidation = () => {
  return [
    'PENDING',
    'IN_PROGRESS',
    'CLEAN',
    'INFECTED',
    'SKIPPED',
  ];
};

/* -----------------------------------------------------
   YUP VALIDATION SCHEMA (skip read-only fields)
-------------------------------------------------------- */
const asNumber = (schema: Yup.NumberSchema) =>
  schema.transform((val, orig) => (orig === '' || orig === null ? undefined : val));

const validationSchema = Yup.object().shape({
        storageDriverId: Yup.string().required("storageDriverId is required."),
        storageKey: Yup.string().required("storageKey is required."),
        filename: Yup.string().required("filename is required."),
        sizeBytes: asNumber(Yup.number().integer().typeError("sizeBytes must be a number")).required("sizeBytes is required."),
      status: Yup.mixed()
        .oneOf(StatusValidation(), "Invalid value for status")
        .required("status is required."),
        organizationId: Yup.string(),
        uploaderId: Yup.string(),
        spaceId: Yup.string(),
        mimeType: Yup.string(),
        checksumSha256: Yup.string(),
        providerEtag: Yup.string(),
        description: Yup.string(),
        directoryPath: Yup.string(),
        tags: Yup.string(),
        metadata: Yup.string(),
      virusScanStatus: Yup.mixed()
        .oneOf(VirusScanStatusValidation(), "Invalid value for virusScanStatus")
        ,
        retentionExpiresAt: Yup.date()
          .transform((value, originalValue) => {
            if (!originalValue) {
              return value;
            }
            const parsed = new Date(originalValue);
            return Number.isNaN(parsed.getTime()) ? value : parsed;
          }).typeError("retentionExpiresAt must be a valid date"),
        deletedAt: Yup.date()
          .transform((value, originalValue) => {
            if (!originalValue) {
              return value;
            }
            const parsed = new Date(originalValue);
            return Number.isNaN(parsed.getTime()) ? value : parsed;
          }).typeError("deletedAt must be a valid date"),
        latestVersionNumber: asNumber(Yup.number().integer().typeError("latestVersionNumber must be a number")),
        currentVersionId: Yup.string(),
        id: Yup.string(),
        ownerId: Yup.string(),
        createdDate: Yup.date()
          .transform((value, originalValue) => {
            if (!originalValue) {
              return value;
            }
            const parsed = new Date(originalValue);
            return Number.isNaN(parsed.getTime()) ? value : parsed;
          }).typeError("createdDate must be a valid date"),
        keyHash: Yup.string(),
        lastAccessedById: Yup.string(),
        lastAccessedDate: Yup.date()
          .transform((value, originalValue) => {
            if (!originalValue) {
              return value;
            }
            const parsed = new Date(originalValue);
            return Number.isNaN(parsed.getTime()) ? value : parsed;
          }).typeError("lastAccessedDate must be a valid date"),
        lastModifiedById: Yup.string(),
        lastModifiedDate: Yup.date()
          .transform((value, originalValue) => {
            if (!originalValue) {
              return value;
            }
            const parsed = new Date(originalValue);
            return Number.isNaN(parsed.getTime()) ? value : parsed;
          }).typeError("lastModifiedDate must be a valid date"),
});

/* -----------------------------------------------------
   COMPONENT
-------------------------------------------------------- */
const FileRecordForm: React.FC = () => {
  const [addFileRecord, addFileRecordResult] = useAddFileRecordMutation();

  // Permission Management State
  const [showPermissionDialog, setShowPermissionDialog] = useState(false);
  const [createdObjectId, setCreatedObjectId] = useState<string | null>(null);

  // Mock current user - in real implementation, this would come from auth context
  const currentUser = {
    username: 'current_user',
    permissions: {
      isOwner: true,
      isAdmin: true,
      canGrantPermissions: true,
      permissions: [PermissionType.READ, PermissionType.WRITE, PermissionType.CREATE, PermissionType.DELETE, PermissionType.ADMINISTRATION],
    },
  };

  /* -----------------------------------------------------
     INITIAL VALUES - only NON read-only fields
  -------------------------------------------------------- */
  const initialValues: Partial<FileRecord> = {
          storageDriverId: '',
          storageKey: '',
          filename: '',
          sizeBytes: 0,
        status: undefined,
          organizationId: '',
          uploaderId: '',
          spaceId: '',
          mimeType: '',
          checksumSha256: '',
          providerEtag: '',
          description: '',
          directoryPath: '',
          tags: '',
          metadata: '',
        virusScanStatus: undefined,
          retentionExpiresAt: new Date(),
          deletedAt: new Date(),
          latestVersionNumber: 0,
          currentVersionId: '',
          id: '',
          ownerId: '',
          createdDate: new Date(),
          keyHash: '',
          lastAccessedById: '',
          lastAccessedDate: new Date(),
          lastModifiedById: '',
          lastModifiedDate: new Date(),
  };

  // Permission Management Handlers
  const handleManagePermissions = (objectId: string) => {
    setCreatedObjectId(objectId);
    setShowPermissionDialog(true);
  };

  const handlePermissionDialogClose = () => {
    setShowPermissionDialog(false);
    setCreatedObjectId(null);
  };

  const handlePermissionsSave = (grants: AclGrantRequest[]) => {
    console.log('Permissions saved for new FileRecord:', grants);
  };

  /* SUBMIT HANDLER */
  const handleSubmit = async (values: FormikValues, { setSubmitting }: FormikHelpers<FileRecord>) => {
    try {
      console.log("FileRecord form values:", values);

      // NOTE: depending on your generated endpoint, you may need { body: values }
      const result = await addFileRecord(values as any).unwrap();

      if (result && result.id && currentUser.permissions.canGrantPermissions) {
        const shouldSetPermissions = window.confirm(
          `FileRecord created successfully! Would you like to set permissions for this object?`
        );
        if (shouldSetPermissions) {
          handleManagePermissions(result.id);
        }
      }

      setSubmitting(false);
    } catch (error) {
      console.error('Failed to create FileRecord:', error);
      setSubmitting(false);
    }
  };

  return (
    <div>
      <Formik
        validateOnBlur={true}
        initialValues={initialValues as FileRecord}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >
        {({
          isSubmitting,
          isValid,
          errors,
          values,
          setFieldValue,
          touched,
          setFieldTouched,
          handleSubmit
        }) => (
          <form onSubmit={handleSubmit} className="form">
            <Accordion defaultActiveKey="1">
              
              {/* Editable Fields (NON read-only) */}
              <Accordion.Item eventKey="1">
                <Accordion.Header>
                  <FaRegPlusSquare size={28} /> &nbsp; Add New FileRecord
                </Accordion.Header>
                <Accordion.Body>
                    <label htmlFor="storageDriverId" className="nice-form-control">
                      <b>
                        Storage Driver Id:
                        {touched.storageDriverId &&
                         !errors.storageDriverId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="storageDriverId"
                            value={values?.storageDriverId}
                            placeholder="Storage Driver Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="storageDriverId"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="storageKey" className="nice-form-control">
                      <b>
                        Storage Key:
                        {touched.storageKey &&
                         !errors.storageKey && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="storageKey"
                            value={values?.storageKey}
                            placeholder="Storage Key"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="storageKey"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="filename" className="nice-form-control">
                      <b>
                        Filename:
                        {touched.filename &&
                         !errors.filename && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="filename"
                            value={values?.filename}
                            placeholder="Filename"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="filename"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="sizeBytes" className="nice-form-control">
                      <b>
                        Size Bytes:
                        {touched.sizeBytes &&
                         !errors.sizeBytes && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>







                          {/* LONG FIELD */}
                          <Field
                            name="sizeBytes"
                            type="number"
                            value={values.sizeBytes || ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('sizeBytes', true);
                              const v = e.target.value;
                              setFieldValue('sizeBytes', v === '' ? undefined : Number(v));
                            }}
                            className={
                              errors.sizeBytes
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />



                      <ErrorMessage
                        className="error"
                        name="sizeBytes"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="status" className="nice-form-control">
                      <b>
                        Status:
                        {touched.status &&
                         !errors.status && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>

                        {/* ENUM DROPDOWN */}
                        <BSForm.Select
                          name="status"
                          value={values.status || ''}
                          className={
                            errors.status
                              ? 'form-control field-error'
                              : 'nice-form-control form-control'
                          }
                          onChange={(e) => {
                            setFieldTouched('status', true);
                            setFieldValue('status', e.target.value || undefined);
                          }}
                        >
                          <option value="" label="Select Status" />
                          <StatusLookup />
                        </BSForm.Select>


                      <ErrorMessage
                        className="error"
                        name="status"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="organizationId" className="nice-form-control">
                      <b>
                        Organization Id:
                        {touched.organizationId &&
                         !errors.organizationId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="organizationId"
                            value={values?.organizationId}
                            placeholder="Organization Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="organizationId"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="uploaderId" className="nice-form-control">
                      <b>
                        Uploader Id:
                        {touched.uploaderId &&
                         !errors.uploaderId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="uploaderId"
                            value={values?.uploaderId}
                            placeholder="Uploader Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="uploaderId"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="spaceId" className="nice-form-control">
                      <b>
                        Space Id:
                        {touched.spaceId &&
                         !errors.spaceId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="spaceId"
                            value={values?.spaceId}
                            placeholder="Space Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="spaceId"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="mimeType" className="nice-form-control">
                      <b>
                        Mime Type:
                        {touched.mimeType &&
                         !errors.mimeType && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="mimeType"
                            value={values?.mimeType}
                            placeholder="Mime Type"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="mimeType"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="checksumSha256" className="nice-form-control">
                      <b>
                        Checksum Sha 256:
                        {touched.checksumSha256 &&
                         !errors.checksumSha256 && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="checksumSha256"
                            value={values?.checksumSha256}
                            placeholder="Checksum Sha 256"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="checksumSha256"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="providerEtag" className="nice-form-control">
                      <b>
                        Provider Etag:
                        {touched.providerEtag &&
                         !errors.providerEtag && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="providerEtag"
                            value={values?.providerEtag}
                            placeholder="Provider Etag"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="providerEtag"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="description" className="nice-form-control">
                      <b>
                        Description:
                        {touched.description &&
                         !errors.description && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="description"
                            value={values?.description}
                            placeholder="Description"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="description"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="directoryPath" className="nice-form-control">
                      <b>
                        Directory Path:
                        {touched.directoryPath &&
                         !errors.directoryPath && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="directoryPath"
                            value={values?.directoryPath}
                            placeholder="Directory Path"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="directoryPath"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="tags" className="nice-form-control">
                      <b>
                        Tags:
                        {touched.tags &&
                         !errors.tags && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="tags"
                            value={values?.tags}
                            placeholder="Tags"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="tags"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="metadata" className="nice-form-control">
                      <b>
                        Metadata:
                        {touched.metadata &&
                         !errors.metadata && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="metadata"
                            value={values?.metadata}
                            placeholder="Metadata"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="metadata"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="virusScanStatus" className="nice-form-control">
                      <b>
                        Virus Scan Status:
                        {touched.virusScanStatus &&
                         !errors.virusScanStatus && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>

                        {/* ENUM DROPDOWN */}
                        <BSForm.Select
                          name="virusScanStatus"
                          value={values.virusScanStatus || ''}
                          className={
                            errors.virusScanStatus
                              ? 'form-control field-error'
                              : 'nice-form-control form-control'
                          }
                          onChange={(e) => {
                            setFieldTouched('virusScanStatus', true);
                            setFieldValue('virusScanStatus', e.target.value || undefined);
                          }}
                        >
                          <option value="" label="Select Virus Scan Status" />
                          <VirusScanStatusLookup />
                        </BSForm.Select>


                      <ErrorMessage
                        className="error"
                        name="virusScanStatus"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="retentionExpiresAt" className="nice-form-control">
                      <b>
                        Retention Expires At:
                        {touched.retentionExpiresAt &&
                         !errors.retentionExpiresAt && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                          {/* DATETIME FIELD */}
                          <Field
                            name="retentionExpiresAt"
                            type="datetime-local"
                            value={values.retentionExpiresAt ? 
                              new Date(values.retentionExpiresAt).toISOString().slice(0, 16) : 
                              ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('retentionExpiresAt', true);
                              const v = e.target.value;
                              setFieldValue('retentionExpiresAt', v ? new Date(v).toISOString() : '');
                            }}
                            className={
                              errors.retentionExpiresAt
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />

                      <ErrorMessage
                        className="error"
                        name="retentionExpiresAt"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="deletedAt" className="nice-form-control">
                      <b>
                        Deleted At:
                        {touched.deletedAt &&
                         !errors.deletedAt && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                          {/* DATETIME FIELD */}
                          <Field
                            name="deletedAt"
                            type="datetime-local"
                            value={values.deletedAt ? 
                              new Date(values.deletedAt).toISOString().slice(0, 16) : 
                              ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('deletedAt', true);
                              const v = e.target.value;
                              setFieldValue('deletedAt', v ? new Date(v).toISOString() : '');
                            }}
                            className={
                              errors.deletedAt
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />

                      <ErrorMessage
                        className="error"
                        name="deletedAt"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="latestVersionNumber" className="nice-form-control">
                      <b>
                        Latest Version Number:
                        {touched.latestVersionNumber &&
                         !errors.latestVersionNumber && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>




                          {/* INTEGER FIELD */}
                          <Field
                            name="latestVersionNumber"
                            type="number"
                            value={values.latestVersionNumber || ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('latestVersionNumber', true);
                              const v = e.target.value;
                              setFieldValue('latestVersionNumber', v === '' ? undefined : Number(v));
                            }}
                            className={
                              errors.latestVersionNumber
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />






                      <ErrorMessage
                        className="error"
                        name="latestVersionNumber"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="currentVersionId" className="nice-form-control">
                      <b>
                        Current Version Id:
                        {touched.currentVersionId &&
                         !errors.currentVersionId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="currentVersionId"
                            value={values?.currentVersionId}
                            placeholder="Current Version Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="currentVersionId"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="id" className="nice-form-control">
                      <b>
                        Id:
                        {touched.id &&
                         !errors.id && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="id"
                            value={values?.id}
                            placeholder="Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="id"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="ownerId" className="nice-form-control">
                      <b>
                        Owner Id:
                        {touched.ownerId &&
                         !errors.ownerId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="ownerId"
                            value={values?.ownerId}
                            placeholder="Owner Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="ownerId"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="createdDate" className="nice-form-control">
                      <b>
                        Created Date:
                        {touched.createdDate &&
                         !errors.createdDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                          {/* DATETIME FIELD */}
                          <Field
                            name="createdDate"
                            type="datetime-local"
                            value={values.createdDate ? 
                              new Date(values.createdDate).toISOString().slice(0, 16) : 
                              ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('createdDate', true);
                              const v = e.target.value;
                              setFieldValue('createdDate', v ? new Date(v).toISOString() : '');
                            }}
                            className={
                              errors.createdDate
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />

                      <ErrorMessage
                        className="error"
                        name="createdDate"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="keyHash" className="nice-form-control">
                      <b>
                        Key Hash:
                        {touched.keyHash &&
                         !errors.keyHash && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="keyHash"
                            value={values?.keyHash}
                            placeholder="Key Hash"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="keyHash"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastAccessedById" className="nice-form-control">
                      <b>
                        Last Accessed By Id:
                        {touched.lastAccessedById &&
                         !errors.lastAccessedById && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="lastAccessedById"
                            value={values?.lastAccessedById}
                            placeholder="Last Accessed By Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="lastAccessedById"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastAccessedDate" className="nice-form-control">
                      <b>
                        Last Accessed Date:
                        {touched.lastAccessedDate &&
                         !errors.lastAccessedDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                          {/* DATETIME FIELD */}
                          <Field
                            name="lastAccessedDate"
                            type="datetime-local"
                            value={values.lastAccessedDate ? 
                              new Date(values.lastAccessedDate).toISOString().slice(0, 16) : 
                              ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('lastAccessedDate', true);
                              const v = e.target.value;
                              setFieldValue('lastAccessedDate', v ? new Date(v).toISOString() : '');
                            }}
                            className={
                              errors.lastAccessedDate
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />

                      <ErrorMessage
                        className="error"
                        name="lastAccessedDate"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastModifiedById" className="nice-form-control">
                      <b>
                        Last Modified By Id:
                        {touched.lastModifiedById &&
                         !errors.lastModifiedById && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="lastModifiedById"
                            value={values?.lastModifiedById}
                            placeholder="Last Modified By Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="lastModifiedById"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastModifiedDate" className="nice-form-control">
                      <b>
                        Last Modified Date:
                        {touched.lastModifiedDate &&
                         !errors.lastModifiedDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                          {/* DATETIME FIELD */}
                          <Field
                            name="lastModifiedDate"
                            type="datetime-local"
                            value={values.lastModifiedDate ? 
                              new Date(values.lastModifiedDate).toISOString().slice(0, 16) : 
                              ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('lastModifiedDate', true);
                              const v = e.target.value;
                              setFieldValue('lastModifiedDate', v ? new Date(v).toISOString() : '');
                            }}
                            className={
                              errors.lastModifiedDate
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />

                      <ErrorMessage
                        className="error"
                        name="lastModifiedDate"
                        component="span"
                      />
                    </label>
                    <br />

                  {/* SUBMIT BUTTON */}
                  <CoolButton
                    variant={isValid ? (isSubmitting ? 'disabled' : 'success') : 'warning'}
                    type="submit"
                    disabled={!isValid || isSubmitting}
                  >
                    {isSubmitting && (<span style={ { float: 'left', minHeight: 0 } }><LoadingSpinner label="" size={18} /></span>)}
                    <FaCheckCircle size={28} /> Create New FileRecord
                  </CoolButton>

                  {addFileRecordResult.error && (
                    <div className="error" style={ { marginTop: 12 }}>
                      {JSON.stringify('data' in (addFileRecordResult as any).error ? (addFileRecordResult as any).error.data : (addFileRecordResult as any).error)}
                    </div>
                  )}
                </Accordion.Body>
              </Accordion.Item>

            {/* Debug/Dev Accordion */}
              <Accordion.Item eventKey="0">
                <Accordion.Header>
                  <FaCogs size={28} /> &nbsp;Server Messages
                </Accordion.Header>
                <Accordion.Body>
                  errors: {JSON.stringify(errors)}
                  <br />
                  addFileRecordResult: {JSON.stringify(addFileRecordResult)}
                </Accordion.Body>
              </Accordion.Item>

            </Accordion>
          </form>
        )}
      </Formik>

      {/* Permission Management Dialog */}
      {createdObjectId && (
        <PermissionDialog
          objectType="com.valkyrlabs.model.FileRecord"
          objectId={createdObjectId}
          isVisible={showPermissionDialog}
          onClose={handlePermissionDialogClose}
          onSave={handlePermissionsSave}
          currentUser={currentUser}
        />
      )}
    </div>
  );
};

/*
lowercase statuslookup
uppercase STATUSLOOKUP
snakecase status_lookup
pascalcase StatusLookup
camelcase statusLookup
kebabcase status-lookup
*/

const StatusLookup = () => {
  return (
    <>
      <option value='UPLOADING' label="Uploading" />
      <option value='SCANNING' label="Scanning" />
      <option value='AVAILABLE' label="Available" />
      <option value='BLOCKED' label="Blocked" />
      <option value='DELETED' label="Deleted" />
      <option value='FAILED' label="Failed" />
    </>
  );
};

/*
lowercase virusscanstatuslookup
uppercase VIRUSSCANSTATUSLOOKUP
snakecase virus_scan_status_lookup
pascalcase VirusScanStatusLookup
camelcase virusScanStatusLookup
kebabcase virus-scan-status-lookup
*/

const VirusScanStatusLookup = () => {
  return (
    <>
      <option value='PENDING' label="Pending" />
      <option value='IN_PROGRESS' label="In Progress" />
      <option value='CLEAN' label="Clean" />
      <option value='INFECTED' label="Infected" />
      <option value='SKIPPED' label="Skipped" />
    </>
  );
};



/* Export the generated form */
export default FileRecordForm;

