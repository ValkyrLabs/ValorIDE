import { ErrorMessage, Field, Formik, FormikHelpers, FormikValues } from 'formik';
import React, { useState } from 'react';
import {
  Form as BSForm,
  Accordion,
  Col,
  Row,
  Spinner
} from 'react-bootstrap';
import LoadingSpinner from '@valkyr/component-library/LoadingSpinner';
import { FaCheckCircle, FaCogs, FaRegPlusSquare } from 'react-icons/fa';
import CoolButton from '@valkyr/component-library/CoolButton';
import * as Yup from 'yup';
import { SmartField } from '@valkyr/component-library/ForeignKey/SmartField';

import { PermissionDialog } from '@valkyr/component-library/PermissionDialog';
import { AclGrantRequest, PermissionType } from '@valkyr/component-library/PermissionDialog/types';


import {
  Run,
  RunStateEnum,
  RunErrorTypeEnum,
} from '@thor/model';

import { useAddRunMutation } from '../../services/RunService';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelForm.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description:
A single attempt to execute a Task within a WorkflowExecution with idempotency and lease tracking
*/

/* -----------------------------------------------------
   ENUM VALIDATION ARRAYS (Yup oneOf checks), if any
-------------------------------------------------------- */
const StateValidation = () => {
  return [
    'PENDING',
    'LEASED',
    'RUNNING',
    'SUCCESS',
    'FAILED',
    'DLQ',
    'CANCELLED',
  ];
};
const ErrorTypeValidation = () => {
  return [
    'TRANSIENT',
    'PERMANENT',
    'TIMEOUT',
    'CIRCUIT_OPEN',
  ];
};

/* -----------------------------------------------------
   YUP VALIDATION SCHEMA (skip read-only fields)
-------------------------------------------------------- */
const asNumber = (schema: Yup.NumberSchema) =>
  schema.transform((val, orig) => (orig === '' || orig === null ? undefined : val));

const validationSchema = Yup.object().shape({
        executionId: Yup.string(),
        taskId: Yup.string(),
        execModuleId: Yup.string(),
        attempt: asNumber(Yup.number().integer().typeError("attempt must be a number")),
      state: Yup.mixed()
        .oneOf(StateValidation(), "Invalid value for state")
        ,
        leaseUntil: Yup.date()
          .transform((value, originalValue) => {
            if (!originalValue) {
              return value;
            }
            const parsed = new Date(originalValue);
            return Number.isNaN(parsed.getTime()) ? value : parsed;
          }).typeError("leaseUntil must be a valid date"),
        leasedBy: Yup.string(),
        runnerId: Yup.string(),
        idempotencyKey: Yup.string(),
        inputsHash: Yup.string(),
        configHash: Yup.string(),
        startedAt: Yup.date()
          .transform((value, originalValue) => {
            if (!originalValue) {
              return value;
            }
            const parsed = new Date(originalValue);
            return Number.isNaN(parsed.getTime()) ? value : parsed;
          }).typeError("startedAt must be a valid date"),
        finishedAt: Yup.date()
          .transform((value, originalValue) => {
            if (!originalValue) {
              return value;
            }
            const parsed = new Date(originalValue);
            return Number.isNaN(parsed.getTime()) ? value : parsed;
          }).typeError("finishedAt must be a valid date"),
        heartbeatAt: Yup.date()
          .transform((value, originalValue) => {
            if (!originalValue) {
              return value;
            }
            const parsed = new Date(originalValue);
            return Number.isNaN(parsed.getTime()) ? value : parsed;
          }).typeError("heartbeatAt must be a valid date"),
        outputs: Yup.string(),
        error: Yup.string(),
      errorType: Yup.mixed()
        .oneOf(ErrorTypeValidation(), "Invalid value for errorType")
        ,
        retryReadyAt: Yup.date()
          .transform((value, originalValue) => {
            if (!originalValue) {
              return value;
            }
            const parsed = new Date(originalValue);
            return Number.isNaN(parsed.getTime()) ? value : parsed;
          }).typeError("retryReadyAt must be a valid date"),
        durationMs: asNumber(Yup.number().integer().typeError("durationMs must be a number")),
        costTokens: asNumber(Yup.number().typeError("costTokens must be a number")),
        id: Yup.string(),
        ownerId: Yup.string(),
        createdDate: Yup.date()
          .transform((value, originalValue) => {
            if (!originalValue) {
              return value;
            }
            const parsed = new Date(originalValue);
            return Number.isNaN(parsed.getTime()) ? value : parsed;
          }).typeError("createdDate must be a valid date"),
        keyHash: Yup.string(),
        lastAccessedById: Yup.string(),
        lastAccessedDate: Yup.date()
          .transform((value, originalValue) => {
            if (!originalValue) {
              return value;
            }
            const parsed = new Date(originalValue);
            return Number.isNaN(parsed.getTime()) ? value : parsed;
          }).typeError("lastAccessedDate must be a valid date"),
        lastModifiedById: Yup.string(),
        lastModifiedDate: Yup.date()
          .transform((value, originalValue) => {
            if (!originalValue) {
              return value;
            }
            const parsed = new Date(originalValue);
            return Number.isNaN(parsed.getTime()) ? value : parsed;
          }).typeError("lastModifiedDate must be a valid date"),
});

/* -----------------------------------------------------
   COMPONENT
-------------------------------------------------------- */
const RunForm: React.FC = () => {
  const [addRun, addRunResult] = useAddRunMutation();

  // Permission Management State
  const [showPermissionDialog, setShowPermissionDialog] = useState(false);
  const [createdObjectId, setCreatedObjectId] = useState<string | null>(null);

  // Mock current user - in real implementation, this would come from auth context
  const currentUser = {
    username: 'current_user',
    permissions: {
      isOwner: true,
      isAdmin: true,
      canGrantPermissions: true,
      permissions: [PermissionType.READ, PermissionType.WRITE, PermissionType.CREATE, PermissionType.DELETE, PermissionType.ADMINISTRATION],
    },
  };

  /* -----------------------------------------------------
     INITIAL VALUES - only NON read-only fields
  -------------------------------------------------------- */
  const initialValues: Partial<Run> = {
          executionId: '',
          taskId: '',
          execModuleId: '',
          attempt: 0,
        state: undefined,
          leaseUntil: new Date(),
          leasedBy: '',
          runnerId: '',
          idempotencyKey: '',
          inputsHash: '',
          configHash: '',
          startedAt: new Date(),
          finishedAt: new Date(),
          heartbeatAt: new Date(),
          outputs: '',
          error: '',
        errorType: undefined,
          retryReadyAt: new Date(),
          durationMs: 0,
          costTokens: 0,
          id: '',
          ownerId: '',
          createdDate: new Date(),
          keyHash: '',
          lastAccessedById: '',
          lastAccessedDate: new Date(),
          lastModifiedById: '',
          lastModifiedDate: new Date(),
  };

  // Permission Management Handlers
  const handleManagePermissions = (objectId: string) => {
    setCreatedObjectId(objectId);
    setShowPermissionDialog(true);
  };

  const handlePermissionDialogClose = () => {
    setShowPermissionDialog(false);
    setCreatedObjectId(null);
  };

  const handlePermissionsSave = (grants: AclGrantRequest[]) => {
    console.log('Permissions saved for new Run:', grants);
  };

  /* SUBMIT HANDLER */
  const handleSubmit = async (values: FormikValues, { setSubmitting }: FormikHelpers<Run>) => {
    try {
      console.log("Run form values:", values);

      // NOTE: depending on your generated endpoint, you may need { body: values }
      const result = await addRun(values as any).unwrap();

      if (result && result.id && currentUser.permissions.canGrantPermissions) {
        const shouldSetPermissions = window.confirm(
          `Run created successfully! Would you like to set permissions for this object?`
        );
        if (shouldSetPermissions) {
          handleManagePermissions(result.id);
        }
      }

      setSubmitting(false);
    } catch (error) {
      console.error('Failed to create Run:', error);
      setSubmitting(false);
    }
  };

  return (
    <div>
      <Formik
        validateOnBlur={true}
        initialValues={initialValues as Run}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >
        {({
          isSubmitting,
          isValid,
          errors,
          values,
          setFieldValue,
          touched,
          setFieldTouched,
          handleSubmit
        }) => (
          <form onSubmit={handleSubmit} className="form">
            <Accordion defaultActiveKey="1">
              
              {/* Editable Fields (NON read-only) */}
              <Accordion.Item eventKey="1">
                <Accordion.Header>
                  <FaRegPlusSquare size={28} /> &nbsp; Add New Run
                </Accordion.Header>
                <Accordion.Body>
                    <label htmlFor="executionId" className="nice-form-control">
                      <b>
                        Execution Id:
                        {touched.executionId &&
                         !errors.executionId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="executionId"
                            value={values?.executionId}
                            placeholder="Execution Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="executionId"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="taskId" className="nice-form-control">
                      <b>
                        Task Id:
                        {touched.taskId &&
                         !errors.taskId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="taskId"
                            value={values?.taskId}
                            placeholder="Task Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="taskId"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="execModuleId" className="nice-form-control">
                      <b>
                        Exec Module Id:
                        {touched.execModuleId &&
                         !errors.execModuleId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="execModuleId"
                            value={values?.execModuleId}
                            placeholder="Exec Module Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="execModuleId"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="attempt" className="nice-form-control">
                      <b>
                        Attempt:
                        {touched.attempt &&
                         !errors.attempt && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>




                          {/* INTEGER FIELD */}
                          <Field
                            name="attempt"
                            type="number"
                            value={values.attempt || ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('attempt', true);
                              const v = e.target.value;
                              setFieldValue('attempt', v === '' ? undefined : Number(v));
                            }}
                            className={
                              errors.attempt
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />






                      <ErrorMessage
                        className="error"
                        name="attempt"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="state" className="nice-form-control">
                      <b>
                        State:
                        {touched.state &&
                         !errors.state && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>

                        {/* ENUM DROPDOWN */}
                        <BSForm.Select
                          name="state"
                          value={values.state || ''}
                          className={
                            errors.state
                              ? 'form-control field-error'
                              : 'nice-form-control form-control'
                          }
                          onChange={(e) => {
                            setFieldTouched('state', true);
                            setFieldValue('state', e.target.value || undefined);
                          }}
                        >
                          <option value="" label="Select State" />
                          <StateLookup />
                        </BSForm.Select>


                      <ErrorMessage
                        className="error"
                        name="state"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="leaseUntil" className="nice-form-control">
                      <b>
                        Lease Until:
                        {touched.leaseUntil &&
                         !errors.leaseUntil && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                          {/* DATETIME FIELD */}
                          <Field
                            name="leaseUntil"
                            type="datetime-local"
                            value={values.leaseUntil ? 
                              new Date(values.leaseUntil).toISOString().slice(0, 16) : 
                              ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('leaseUntil', true);
                              const v = e.target.value;
                              setFieldValue('leaseUntil', v ? new Date(v).toISOString() : '');
                            }}
                            className={
                              errors.leaseUntil
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />

                      <ErrorMessage
                        className="error"
                        name="leaseUntil"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="leasedBy" className="nice-form-control">
                      <b>
                        Leased By:
                        {touched.leasedBy &&
                         !errors.leasedBy && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="leasedBy"
                            value={values?.leasedBy}
                            placeholder="Leased By"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="leasedBy"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="runnerId" className="nice-form-control">
                      <b>
                        Runner Id:
                        {touched.runnerId &&
                         !errors.runnerId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="runnerId"
                            value={values?.runnerId}
                            placeholder="Runner Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="runnerId"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="idempotencyKey" className="nice-form-control">
                      <b>
                        Idempotency Key:
                        {touched.idempotencyKey &&
                         !errors.idempotencyKey && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="idempotencyKey"
                            value={values?.idempotencyKey}
                            placeholder="Idempotency Key"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="idempotencyKey"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="inputsHash" className="nice-form-control">
                      <b>
                        Inputs Hash:
                        {touched.inputsHash &&
                         !errors.inputsHash && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="inputsHash"
                            value={values?.inputsHash}
                            placeholder="Inputs Hash"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="inputsHash"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="configHash" className="nice-form-control">
                      <b>
                        Config Hash:
                        {touched.configHash &&
                         !errors.configHash && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="configHash"
                            value={values?.configHash}
                            placeholder="Config Hash"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="configHash"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="startedAt" className="nice-form-control">
                      <b>
                        Started At:
                        {touched.startedAt &&
                         !errors.startedAt && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                          {/* DATETIME FIELD */}
                          <Field
                            name="startedAt"
                            type="datetime-local"
                            value={values.startedAt ? 
                              new Date(values.startedAt).toISOString().slice(0, 16) : 
                              ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('startedAt', true);
                              const v = e.target.value;
                              setFieldValue('startedAt', v ? new Date(v).toISOString() : '');
                            }}
                            className={
                              errors.startedAt
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />

                      <ErrorMessage
                        className="error"
                        name="startedAt"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="finishedAt" className="nice-form-control">
                      <b>
                        Finished At:
                        {touched.finishedAt &&
                         !errors.finishedAt && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                          {/* DATETIME FIELD */}
                          <Field
                            name="finishedAt"
                            type="datetime-local"
                            value={values.finishedAt ? 
                              new Date(values.finishedAt).toISOString().slice(0, 16) : 
                              ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('finishedAt', true);
                              const v = e.target.value;
                              setFieldValue('finishedAt', v ? new Date(v).toISOString() : '');
                            }}
                            className={
                              errors.finishedAt
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />

                      <ErrorMessage
                        className="error"
                        name="finishedAt"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="heartbeatAt" className="nice-form-control">
                      <b>
                        Heartbeat At:
                        {touched.heartbeatAt &&
                         !errors.heartbeatAt && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                          {/* DATETIME FIELD */}
                          <Field
                            name="heartbeatAt"
                            type="datetime-local"
                            value={values.heartbeatAt ? 
                              new Date(values.heartbeatAt).toISOString().slice(0, 16) : 
                              ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('heartbeatAt', true);
                              const v = e.target.value;
                              setFieldValue('heartbeatAt', v ? new Date(v).toISOString() : '');
                            }}
                            className={
                              errors.heartbeatAt
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />

                      <ErrorMessage
                        className="error"
                        name="heartbeatAt"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="outputs" className="nice-form-control">
                      <b>
                        Outputs:
                        {touched.outputs &&
                         !errors.outputs && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="outputs"
                            value={values?.outputs}
                            placeholder="Outputs"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="outputs"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="error" className="nice-form-control">
                      <b>
                        Error:
                        {touched.error &&
                         !errors.error && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="error"
                            value={values?.error}
                            placeholder="Error"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="error"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="errorType" className="nice-form-control">
                      <b>
                        Error Type:
                        {touched.errorType &&
                         !errors.errorType && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>

                        {/* ENUM DROPDOWN */}
                        <BSForm.Select
                          name="errorType"
                          value={values.errorType || ''}
                          className={
                            errors.errorType
                              ? 'form-control field-error'
                              : 'nice-form-control form-control'
                          }
                          onChange={(e) => {
                            setFieldTouched('errorType', true);
                            setFieldValue('errorType', e.target.value || undefined);
                          }}
                        >
                          <option value="" label="Select Error Type" />
                          <ErrorTypeLookup />
                        </BSForm.Select>


                      <ErrorMessage
                        className="error"
                        name="errorType"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="retryReadyAt" className="nice-form-control">
                      <b>
                        Retry Ready At:
                        {touched.retryReadyAt &&
                         !errors.retryReadyAt && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                          {/* DATETIME FIELD */}
                          <Field
                            name="retryReadyAt"
                            type="datetime-local"
                            value={values.retryReadyAt ? 
                              new Date(values.retryReadyAt).toISOString().slice(0, 16) : 
                              ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('retryReadyAt', true);
                              const v = e.target.value;
                              setFieldValue('retryReadyAt', v ? new Date(v).toISOString() : '');
                            }}
                            className={
                              errors.retryReadyAt
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />

                      <ErrorMessage
                        className="error"
                        name="retryReadyAt"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="durationMs" className="nice-form-control">
                      <b>
                        Duration Ms:
                        {touched.durationMs &&
                         !errors.durationMs && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>




                          {/* INTEGER FIELD */}
                          <Field
                            name="durationMs"
                            type="number"
                            value={values.durationMs || ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('durationMs', true);
                              const v = e.target.value;
                              setFieldValue('durationMs', v === '' ? undefined : Number(v));
                            }}
                            className={
                              errors.durationMs
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />






                      <ErrorMessage
                        className="error"
                        name="durationMs"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="costTokens" className="nice-form-control">
                      <b>
                        Cost Tokens:
                        {touched.costTokens &&
                         !errors.costTokens && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>






                          {/* DOUBLE FIELD */}
                          <Field
                            name="costTokens"
                            type="number"
                            step="any"
                            value={values.costTokens || ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('costTokens', true);
                              const v = e.target.value;
                              setFieldValue('costTokens', v === '' ? undefined : Number(v));
                            }}
                            className={
                              errors.costTokens
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />




                      <ErrorMessage
                        className="error"
                        name="costTokens"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="id" className="nice-form-control">
                      <b>
                        Id:
                        {touched.id &&
                         !errors.id && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="id"
                            value={values?.id}
                            placeholder="Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="id"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="ownerId" className="nice-form-control">
                      <b>
                        Owner Id:
                        {touched.ownerId &&
                         !errors.ownerId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="ownerId"
                            value={values?.ownerId}
                            placeholder="Owner Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="ownerId"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="createdDate" className="nice-form-control">
                      <b>
                        Created Date:
                        {touched.createdDate &&
                         !errors.createdDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                          {/* DATETIME FIELD */}
                          <Field
                            name="createdDate"
                            type="datetime-local"
                            value={values.createdDate ? 
                              new Date(values.createdDate).toISOString().slice(0, 16) : 
                              ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('createdDate', true);
                              const v = e.target.value;
                              setFieldValue('createdDate', v ? new Date(v).toISOString() : '');
                            }}
                            className={
                              errors.createdDate
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />

                      <ErrorMessage
                        className="error"
                        name="createdDate"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="keyHash" className="nice-form-control">
                      <b>
                        Key Hash:
                        {touched.keyHash &&
                         !errors.keyHash && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="keyHash"
                            value={values?.keyHash}
                            placeholder="Key Hash"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="keyHash"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastAccessedById" className="nice-form-control">
                      <b>
                        Last Accessed By Id:
                        {touched.lastAccessedById &&
                         !errors.lastAccessedById && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="lastAccessedById"
                            value={values?.lastAccessedById}
                            placeholder="Last Accessed By Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="lastAccessedById"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastAccessedDate" className="nice-form-control">
                      <b>
                        Last Accessed Date:
                        {touched.lastAccessedDate &&
                         !errors.lastAccessedDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                          {/* DATETIME FIELD */}
                          <Field
                            name="lastAccessedDate"
                            type="datetime-local"
                            value={values.lastAccessedDate ? 
                              new Date(values.lastAccessedDate).toISOString().slice(0, 16) : 
                              ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('lastAccessedDate', true);
                              const v = e.target.value;
                              setFieldValue('lastAccessedDate', v ? new Date(v).toISOString() : '');
                            }}
                            className={
                              errors.lastAccessedDate
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />

                      <ErrorMessage
                        className="error"
                        name="lastAccessedDate"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastModifiedById" className="nice-form-control">
                      <b>
                        Last Modified By Id:
                        {touched.lastModifiedById &&
                         !errors.lastModifiedById && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="lastModifiedById"
                            value={values?.lastModifiedById}
                            placeholder="Last Modified By Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="lastModifiedById"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastModifiedDate" className="nice-form-control">
                      <b>
                        Last Modified Date:
                        {touched.lastModifiedDate &&
                         !errors.lastModifiedDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                          {/* DATETIME FIELD */}
                          <Field
                            name="lastModifiedDate"
                            type="datetime-local"
                            value={values.lastModifiedDate ? 
                              new Date(values.lastModifiedDate).toISOString().slice(0, 16) : 
                              ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('lastModifiedDate', true);
                              const v = e.target.value;
                              setFieldValue('lastModifiedDate', v ? new Date(v).toISOString() : '');
                            }}
                            className={
                              errors.lastModifiedDate
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />

                      <ErrorMessage
                        className="error"
                        name="lastModifiedDate"
                        component="span"
                      />
                    </label>
                    <br />

                  {/* SUBMIT BUTTON */}
                  <CoolButton
                    variant={isValid ? (isSubmitting ? 'disabled' : 'success') : 'warning'}
                    type="submit"
                    disabled={!isValid || isSubmitting}
                  >
                    {isSubmitting && (<span style={ { float: 'left', minHeight: 0 } }><LoadingSpinner label="" size={18} /></span>)}
                    <FaCheckCircle size={28} /> Create New Run
                  </CoolButton>

                  {addRunResult.error && (
                    <div className="error" style={ { marginTop: 12 }}>
                      {JSON.stringify('data' in (addRunResult as any).error ? (addRunResult as any).error.data : (addRunResult as any).error)}
                    </div>
                  )}
                </Accordion.Body>
              </Accordion.Item>

            {/* Debug/Dev Accordion */}
              <Accordion.Item eventKey="0">
                <Accordion.Header>
                  <FaCogs size={28} /> &nbsp;Server Messages
                </Accordion.Header>
                <Accordion.Body>
                  errors: {JSON.stringify(errors)}
                  <br />
                  addRunResult: {JSON.stringify(addRunResult)}
                </Accordion.Body>
              </Accordion.Item>

            </Accordion>
          </form>
        )}
      </Formik>

      {/* Permission Management Dialog */}
      {createdObjectId && (
        <PermissionDialog
          objectType="com.valkyrlabs.model.Run"
          objectId={createdObjectId}
          isVisible={showPermissionDialog}
          onClose={handlePermissionDialogClose}
          onSave={handlePermissionsSave}
          currentUser={currentUser}
        />
      )}
    </div>
  );
};

/*
lowercase statelookup
uppercase STATELOOKUP
snakecase state_lookup
pascalcase StateLookup
camelcase stateLookup
kebabcase state-lookup
*/

const StateLookup = () => {
  return (
    <>
      <option value='PENDING' label="Pending" />
      <option value='LEASED' label="Leased" />
      <option value='RUNNING' label="Running" />
      <option value='SUCCESS' label="Success" />
      <option value='FAILED' label="Failed" />
      <option value='DLQ' label="Dlq" />
      <option value='CANCELLED' label="Cancelled" />
    </>
  );
};

/*
lowercase errortypelookup
uppercase ERRORTYPELOOKUP
snakecase error_type_lookup
pascalcase ErrorTypeLookup
camelcase errorTypeLookup
kebabcase error-type-lookup
*/

const ErrorTypeLookup = () => {
  return (
    <>
      <option value='TRANSIENT' label="Transient" />
      <option value='PERMANENT' label="Permanent" />
      <option value='TIMEOUT' label="Timeout" />
      <option value='CIRCUIT_OPEN' label="Circuit Open" />
    </>
  );
};



/* Export the generated form */
export default RunForm;

