import { ErrorMessage, Field, Formik, FormikHelpers, FormikValues } from 'formik';
import React, { useState } from 'react';
import {
  Form as BSForm,
  Accordion,
  Col,
  Row,
  Spinner
} from 'react-bootstrap';
import LoadingSpinner from '@valkyr/component-library/LoadingSpinner';
import { FaCheckCircle, FaCogs, FaRegPlusSquare } from 'react-icons/fa';
import CoolButton from '@valkyr/component-library/CoolButton';
import * as Yup from 'yup';
import { SmartField } from '@valkyr/component-library/ForeignKey/SmartField';

import { PermissionDialog } from '@valkyr/component-library/PermissionDialog';
import { AclGrantRequest, PermissionType } from '@valkyr/component-library/PermissionDialog/types';


import {
  LlmDetails,
  LlmDetailsProviderEnum,
  LlmDetailsApiTypeEnum,
  LlmDetailsRoleEnum,
} from '@thor/model';

import { useAddLlmDetailsMutation } from '../../services/LlmDetailsService';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelForm.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description:
Details about a Language Learning Model (LLM) including capabilities and configuration.
*/

/* -----------------------------------------------------
   ENUM VALIDATION ARRAYS (Yup oneOf checks), if any
-------------------------------------------------------- */
const ProviderValidation = () => {
  return [
    'valkyrai',
    'openai',
    'llama',
    'phi',
    'gemma',
    'mistral',
    'claude',
    'gemini',
    'other',
    'chatgpt_pass_through',
  ];
};
const ApiTypeValidation = () => {
  return [
    'openai',
    'ollama',
    'other',
  ];
};
const RoleValidation = () => {
  return [
    'user',
    'assistant',
  ];
};

/* -----------------------------------------------------
   YUP VALIDATION SCHEMA (skip read-only fields)
-------------------------------------------------------- */
const asNumber = (schema: Yup.NumberSchema) =>
  schema.transform((val, orig) => (orig === '' || orig === null ? undefined : val));

const validationSchema = Yup.object().shape({
        name: Yup.string().required("name is required."),
      provider: Yup.mixed()
        .oneOf(ProviderValidation(), "Invalid value for provider")
        .required("provider is required."),
      apiType: Yup.mixed()
        .oneOf(ApiTypeValidation(), "Invalid value for apiType")
        .required("apiType is required."),
        version: Yup.string(),
        notes: Yup.string(),
      role: Yup.mixed()
        .oneOf(RoleValidation(), "Invalid value for role")
        ,
        initialPrompt: Yup.string(),
        apiKey: Yup.string(),
        credential: Yup.string(),
        credentialPassword: Yup.string(),
        temperature: asNumber(Yup.number().typeError("temperature must be a number")),
        contextWindow: asNumber(Yup.number().integer().typeError("contextWindow must be a number")),
        maxTokens: asNumber(Yup.number().integer().typeError("maxTokens must be a number")),
        supportsImages: Yup.boolean(),
        supportsPromptCache: Yup.boolean(),
        inputPrice: asNumber(Yup.number().typeError("inputPrice must be a number")),
        outputPrice: asNumber(Yup.number().typeError("outputPrice must be a number")),
        description: Yup.string(),
        url: Yup.string(),
        requestParameters: Yup.string(),
        metaData: Yup.string(),
        id: Yup.string(),
        ownerId: Yup.string(),
        createdDate: Yup.date()
          .transform((value, originalValue) => {
            if (!originalValue) {
              return value;
            }
            const parsed = new Date(originalValue);
            return Number.isNaN(parsed.getTime()) ? value : parsed;
          }).typeError("createdDate must be a valid date"),
        keyHash: Yup.string(),
        lastAccessedById: Yup.string(),
        lastAccessedDate: Yup.date()
          .transform((value, originalValue) => {
            if (!originalValue) {
              return value;
            }
            const parsed = new Date(originalValue);
            return Number.isNaN(parsed.getTime()) ? value : parsed;
          }).typeError("lastAccessedDate must be a valid date"),
        lastModifiedById: Yup.string(),
        lastModifiedDate: Yup.date()
          .transform((value, originalValue) => {
            if (!originalValue) {
              return value;
            }
            const parsed = new Date(originalValue);
            return Number.isNaN(parsed.getTime()) ? value : parsed;
          }).typeError("lastModifiedDate must be a valid date"),
});

/* -----------------------------------------------------
   COMPONENT
-------------------------------------------------------- */
const LlmDetailsForm: React.FC = () => {
  const [addLlmDetails, addLlmDetailsResult] = useAddLlmDetailsMutation();

  // Permission Management State
  const [showPermissionDialog, setShowPermissionDialog] = useState(false);
  const [createdObjectId, setCreatedObjectId] = useState<string | null>(null);

  // Mock current user - in real implementation, this would come from auth context
  const currentUser = {
    username: 'current_user',
    permissions: {
      isOwner: true,
      isAdmin: true,
      canGrantPermissions: true,
      permissions: [PermissionType.READ, PermissionType.WRITE, PermissionType.CREATE, PermissionType.DELETE, PermissionType.ADMINISTRATION],
    },
  };

  /* -----------------------------------------------------
     INITIAL VALUES - only NON read-only fields
  -------------------------------------------------------- */
  const initialValues: Partial<LlmDetails> = {
          name: '',
        provider: undefined,
        apiType: undefined,
          version: '',
          notes: '',
        role: undefined,
          initialPrompt: '',
          apiKey: '',
          credential: '',
          credentialPassword: '',
          temperature: 0,
          contextWindow: 0,
          maxTokens: 0,
          supportsImages: false,
          supportsPromptCache: false,
          inputPrice: 0,
          outputPrice: 0,
          description: '',
          url: '',
          requestParameters: '',
          metaData: '',
          id: '',
          ownerId: '',
          createdDate: new Date(),
          keyHash: '',
          lastAccessedById: '',
          lastAccessedDate: new Date(),
          lastModifiedById: '',
          lastModifiedDate: new Date(),
  };

  // Permission Management Handlers
  const handleManagePermissions = (objectId: string) => {
    setCreatedObjectId(objectId);
    setShowPermissionDialog(true);
  };

  const handlePermissionDialogClose = () => {
    setShowPermissionDialog(false);
    setCreatedObjectId(null);
  };

  const handlePermissionsSave = (grants: AclGrantRequest[]) => {
    console.log('Permissions saved for new LlmDetails:', grants);
  };

  /* SUBMIT HANDLER */
  const handleSubmit = async (values: FormikValues, { setSubmitting }: FormikHelpers<LlmDetails>) => {
    try {
      console.log("LlmDetails form values:", values);

      // NOTE: depending on your generated endpoint, you may need { body: values }
      const result = await addLlmDetails(values as any).unwrap();

      if (result && result.id && currentUser.permissions.canGrantPermissions) {
        const shouldSetPermissions = window.confirm(
          `LlmDetails created successfully! Would you like to set permissions for this object?`
        );
        if (shouldSetPermissions) {
          handleManagePermissions(result.id);
        }
      }

      setSubmitting(false);
    } catch (error) {
      console.error('Failed to create LlmDetails:', error);
      setSubmitting(false);
    }
  };

  return (
    <div>
      <Formik
        validateOnBlur={true}
        initialValues={initialValues as LlmDetails}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >
        {({
          isSubmitting,
          isValid,
          errors,
          values,
          setFieldValue,
          touched,
          setFieldTouched,
          handleSubmit
        }) => (
          <form onSubmit={handleSubmit} className="form">
            <Accordion defaultActiveKey="1">
              
              {/* Editable Fields (NON read-only) */}
              <Accordion.Item eventKey="1">
                <Accordion.Header>
                  <FaRegPlusSquare size={28} /> &nbsp; Add New LlmDetails
                </Accordion.Header>
                <Accordion.Body>
                    <label htmlFor="name" className="nice-form-control">
                      <b>
                        Name:
                        {touched.name &&
                         !errors.name && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="name"
                            value={values?.name}
                            placeholder="Name"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="name"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="provider" className="nice-form-control">
                      <b>
                        Provider:
                        {touched.provider &&
                         !errors.provider && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>

                        {/* ENUM DROPDOWN */}
                        <BSForm.Select
                          name="provider"
                          value={values.provider || ''}
                          className={
                            errors.provider
                              ? 'form-control field-error'
                              : 'nice-form-control form-control'
                          }
                          onChange={(e) => {
                            setFieldTouched('provider', true);
                            setFieldValue('provider', e.target.value || undefined);
                          }}
                        >
                          <option value="" label="Select Provider" />
                          <ProviderLookup />
                        </BSForm.Select>


                      <ErrorMessage
                        className="error"
                        name="provider"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="apiType" className="nice-form-control">
                      <b>
                        Api Type:
                        {touched.apiType &&
                         !errors.apiType && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>

                        {/* ENUM DROPDOWN */}
                        <BSForm.Select
                          name="apiType"
                          value={values.apiType || ''}
                          className={
                            errors.apiType
                              ? 'form-control field-error'
                              : 'nice-form-control form-control'
                          }
                          onChange={(e) => {
                            setFieldTouched('apiType', true);
                            setFieldValue('apiType', e.target.value || undefined);
                          }}
                        >
                          <option value="" label="Select Api Type" />
                          <ApiTypeLookup />
                        </BSForm.Select>


                      <ErrorMessage
                        className="error"
                        name="apiType"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="version" className="nice-form-control">
                      <b>
                        Version:
                        {touched.version &&
                         !errors.version && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="version"
                            value={values?.version}
                            placeholder="Version"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="version"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="notes" className="nice-form-control">
                      <b>
                        Notes:
                        {touched.notes &&
                         !errors.notes && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="notes"
                            value={values?.notes}
                            placeholder="Notes"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="notes"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="role" className="nice-form-control">
                      <b>
                        Role:
                        {touched.role &&
                         !errors.role && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>

                        {/* ENUM DROPDOWN */}
                        <BSForm.Select
                          name="role"
                          value={values.role || ''}
                          className={
                            errors.role
                              ? 'form-control field-error'
                              : 'nice-form-control form-control'
                          }
                          onChange={(e) => {
                            setFieldTouched('role', true);
                            setFieldValue('role', e.target.value || undefined);
                          }}
                        >
                          <option value="" label="Select Role" />
                          <RoleLookup />
                        </BSForm.Select>


                      <ErrorMessage
                        className="error"
                        name="role"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="initialPrompt" className="nice-form-control">
                      <b>
                        Initial Prompt:
                        {touched.initialPrompt &&
                         !errors.initialPrompt && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="initialPrompt"
                            value={values?.initialPrompt}
                            placeholder="Initial Prompt"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="initialPrompt"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="apiKey" className="nice-form-control">
                      <b>
                        Api Key:
                        {touched.apiKey &&
                         !errors.apiKey && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="apiKey"
                            value={values?.apiKey}
                            placeholder="Api Key"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="apiKey"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="credential" className="nice-form-control">
                      <b>
                        Credential:
                        {touched.credential &&
                         !errors.credential && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="credential"
                            value={values?.credential}
                            placeholder="Credential"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="credential"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="credentialPassword" className="nice-form-control">
                      <b>
                        Credential Password:
                        {touched.credentialPassword &&
                         !errors.credentialPassword && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="credentialPassword"
                            value={values?.credentialPassword}
                            placeholder="Credential Password"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="credentialPassword"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="temperature" className="nice-form-control">
                      <b>
                        Temperature:
                        {touched.temperature &&
                         !errors.temperature && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>





                          {/* FLOAT FIELD */}
                          <Field
                            name="temperature"
                            type="number"
                            step="any"
                            value={values.temperature || ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('temperature', true);
                              const v = e.target.value;
                              setFieldValue('temperature', v === '' ? undefined : Number(v));
                            }}
                            className={
                              errors.temperature
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />





                      <ErrorMessage
                        className="error"
                        name="temperature"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="contextWindow" className="nice-form-control">
                      <b>
                        Context Window:
                        {touched.contextWindow &&
                         !errors.contextWindow && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>




                          {/* INTEGER FIELD */}
                          <Field
                            name="contextWindow"
                            type="number"
                            value={values.contextWindow || ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('contextWindow', true);
                              const v = e.target.value;
                              setFieldValue('contextWindow', v === '' ? undefined : Number(v));
                            }}
                            className={
                              errors.contextWindow
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />






                      <ErrorMessage
                        className="error"
                        name="contextWindow"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="maxTokens" className="nice-form-control">
                      <b>
                        Max Tokens:
                        {touched.maxTokens &&
                         !errors.maxTokens && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>




                          {/* INTEGER FIELD */}
                          <Field
                            name="maxTokens"
                            type="number"
                            value={values.maxTokens || ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('maxTokens', true);
                              const v = e.target.value;
                              setFieldValue('maxTokens', v === '' ? undefined : Number(v));
                            }}
                            className={
                              errors.maxTokens
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />






                      <ErrorMessage
                        className="error"
                        name="maxTokens"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="supportsImages" className="nice-form-control">
                      <b>
                        Supports Images:
                        {touched.supportsImages &&
                         !errors.supportsImages && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>


                          {/* CHECKBOX FIELD */}
                          <BSForm.Check
                            id="supportsImages"
                            name="supportsImages"
                            checked={values.supportsImages || false}
                            onChange={(e) => {
                              setFieldTouched('supportsImages', true);
                              setFieldValue('supportsImages', e.target.checked);
                            }}
                            isInvalid={!!errors.supportsImages}
                            className={errors.supportsImages ? 'error' : ''}
                          />








                      <ErrorMessage
                        className="error"
                        name="supportsImages"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="supportsPromptCache" className="nice-form-control">
                      <b>
                        Supports Prompt Cache:
                        {touched.supportsPromptCache &&
                         !errors.supportsPromptCache && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>


                          {/* CHECKBOX FIELD */}
                          <BSForm.Check
                            id="supportsPromptCache"
                            name="supportsPromptCache"
                            checked={values.supportsPromptCache || false}
                            onChange={(e) => {
                              setFieldTouched('supportsPromptCache', true);
                              setFieldValue('supportsPromptCache', e.target.checked);
                            }}
                            isInvalid={!!errors.supportsPromptCache}
                            className={errors.supportsPromptCache ? 'error' : ''}
                          />








                      <ErrorMessage
                        className="error"
                        name="supportsPromptCache"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="inputPrice" className="nice-form-control">
                      <b>
                        Input Price:
                        {touched.inputPrice &&
                         !errors.inputPrice && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>





                          {/* FLOAT FIELD */}
                          <Field
                            name="inputPrice"
                            type="number"
                            step="any"
                            value={values.inputPrice || ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('inputPrice', true);
                              const v = e.target.value;
                              setFieldValue('inputPrice', v === '' ? undefined : Number(v));
                            }}
                            className={
                              errors.inputPrice
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />





                      <ErrorMessage
                        className="error"
                        name="inputPrice"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="outputPrice" className="nice-form-control">
                      <b>
                        Output Price:
                        {touched.outputPrice &&
                         !errors.outputPrice && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>





                          {/* FLOAT FIELD */}
                          <Field
                            name="outputPrice"
                            type="number"
                            step="any"
                            value={values.outputPrice || ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('outputPrice', true);
                              const v = e.target.value;
                              setFieldValue('outputPrice', v === '' ? undefined : Number(v));
                            }}
                            className={
                              errors.outputPrice
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />





                      <ErrorMessage
                        className="error"
                        name="outputPrice"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="description" className="nice-form-control">
                      <b>
                        Description:
                        {touched.description &&
                         !errors.description && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="description"
                            value={values?.description}
                            placeholder="Description"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="description"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="url" className="nice-form-control">
                      <b>
                        Url:
                        {touched.url &&
                         !errors.url && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="url"
                            value={values?.url}
                            placeholder="Url"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="url"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="requestParameters" className="nice-form-control">
                      <b>
                        Request Parameters:
                        {touched.requestParameters &&
                         !errors.requestParameters && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="requestParameters"
                            value={values?.requestParameters}
                            placeholder="Request Parameters"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="requestParameters"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="metaData" className="nice-form-control">
                      <b>
                        Meta Data:
                        {touched.metaData &&
                         !errors.metaData && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="metaData"
                            value={values?.metaData}
                            placeholder="Meta Data"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="metaData"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="id" className="nice-form-control">
                      <b>
                        Id:
                        {touched.id &&
                         !errors.id && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="id"
                            value={values?.id}
                            placeholder="Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="id"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="ownerId" className="nice-form-control">
                      <b>
                        Owner Id:
                        {touched.ownerId &&
                         !errors.ownerId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="ownerId"
                            value={values?.ownerId}
                            placeholder="Owner Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="ownerId"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="createdDate" className="nice-form-control">
                      <b>
                        Created Date:
                        {touched.createdDate &&
                         !errors.createdDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                          {/* DATETIME FIELD */}
                          <Field
                            name="createdDate"
                            type="datetime-local"
                            value={values.createdDate ? 
                              new Date(values.createdDate).toISOString().slice(0, 16) : 
                              ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('createdDate', true);
                              const v = e.target.value;
                              setFieldValue('createdDate', v ? new Date(v).toISOString() : '');
                            }}
                            className={
                              errors.createdDate
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />

                      <ErrorMessage
                        className="error"
                        name="createdDate"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="keyHash" className="nice-form-control">
                      <b>
                        Key Hash:
                        {touched.keyHash &&
                         !errors.keyHash && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="keyHash"
                            value={values?.keyHash}
                            placeholder="Key Hash"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="keyHash"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastAccessedById" className="nice-form-control">
                      <b>
                        Last Accessed By Id:
                        {touched.lastAccessedById &&
                         !errors.lastAccessedById && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="lastAccessedById"
                            value={values?.lastAccessedById}
                            placeholder="Last Accessed By Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="lastAccessedById"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastAccessedDate" className="nice-form-control">
                      <b>
                        Last Accessed Date:
                        {touched.lastAccessedDate &&
                         !errors.lastAccessedDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                          {/* DATETIME FIELD */}
                          <Field
                            name="lastAccessedDate"
                            type="datetime-local"
                            value={values.lastAccessedDate ? 
                              new Date(values.lastAccessedDate).toISOString().slice(0, 16) : 
                              ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('lastAccessedDate', true);
                              const v = e.target.value;
                              setFieldValue('lastAccessedDate', v ? new Date(v).toISOString() : '');
                            }}
                            className={
                              errors.lastAccessedDate
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />

                      <ErrorMessage
                        className="error"
                        name="lastAccessedDate"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastModifiedById" className="nice-form-control">
                      <b>
                        Last Modified By Id:
                        {touched.lastModifiedById &&
                         !errors.lastModifiedById && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="lastModifiedById"
                            value={values?.lastModifiedById}
                            placeholder="Last Modified By Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="lastModifiedById"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastModifiedDate" className="nice-form-control">
                      <b>
                        Last Modified Date:
                        {touched.lastModifiedDate &&
                         !errors.lastModifiedDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                          {/* DATETIME FIELD */}
                          <Field
                            name="lastModifiedDate"
                            type="datetime-local"
                            value={values.lastModifiedDate ? 
                              new Date(values.lastModifiedDate).toISOString().slice(0, 16) : 
                              ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('lastModifiedDate', true);
                              const v = e.target.value;
                              setFieldValue('lastModifiedDate', v ? new Date(v).toISOString() : '');
                            }}
                            className={
                              errors.lastModifiedDate
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />

                      <ErrorMessage
                        className="error"
                        name="lastModifiedDate"
                        component="span"
                      />
                    </label>
                    <br />

                  {/* SUBMIT BUTTON */}
                  <CoolButton
                    variant={isValid ? (isSubmitting ? 'disabled' : 'success') : 'warning'}
                    type="submit"
                    disabled={!isValid || isSubmitting}
                  >
                    {isSubmitting && (<span style={ { float: 'left', minHeight: 0 } }><LoadingSpinner label="" size={18} /></span>)}
                    <FaCheckCircle size={28} /> Create New LlmDetails
                  </CoolButton>

                  {addLlmDetailsResult.error && (
                    <div className="error" style={ { marginTop: 12 }}>
                      {JSON.stringify('data' in (addLlmDetailsResult as any).error ? (addLlmDetailsResult as any).error.data : (addLlmDetailsResult as any).error)}
                    </div>
                  )}
                </Accordion.Body>
              </Accordion.Item>

            {/* Debug/Dev Accordion */}
              <Accordion.Item eventKey="0">
                <Accordion.Header>
                  <FaCogs size={28} /> &nbsp;Server Messages
                </Accordion.Header>
                <Accordion.Body>
                  errors: {JSON.stringify(errors)}
                  <br />
                  addLlmDetailsResult: {JSON.stringify(addLlmDetailsResult)}
                </Accordion.Body>
              </Accordion.Item>

            </Accordion>
          </form>
        )}
      </Formik>

      {/* Permission Management Dialog */}
      {createdObjectId && (
        <PermissionDialog
          objectType="com.valkyrlabs.model.LlmDetails"
          objectId={createdObjectId}
          isVisible={showPermissionDialog}
          onClose={handlePermissionDialogClose}
          onSave={handlePermissionsSave}
          currentUser={currentUser}
        />
      )}
    </div>
  );
};

/*
lowercase providerlookup
uppercase PROVIDERLOOKUP
snakecase provider_lookup
pascalcase ProviderLookup
camelcase providerLookup
kebabcase provider-lookup
*/

const ProviderLookup = () => {
  return (
    <>
      <option value='valkyrai' label="Valkyrai" />
      <option value='openai' label="Openai" />
      <option value='llama' label="Llama" />
      <option value='phi' label="Phi" />
      <option value='gemma' label="Gemma" />
      <option value='mistral' label="Mistral" />
      <option value='claude' label="Claude" />
      <option value='gemini' label="Gemini" />
      <option value='other' label="Other" />
      <option value='chatgpt_pass_through' label="Chatgpt Pass Through" />
    </>
  );
};

/*
lowercase apitypelookup
uppercase APITYPELOOKUP
snakecase api_type_lookup
pascalcase ApiTypeLookup
camelcase apiTypeLookup
kebabcase api-type-lookup
*/

const ApiTypeLookup = () => {
  return (
    <>
      <option value='openai' label="Openai" />
      <option value='ollama' label="Ollama" />
      <option value='other' label="Other" />
    </>
  );
};

/*
lowercase rolelookup
uppercase ROLELOOKUP
snakecase role_lookup
pascalcase RoleLookup
camelcase roleLookup
kebabcase role-lookup
*/

const RoleLookup = () => {
  return (
    <>
      <option value='user' label="User" />
      <option value='assistant' label="Assistant" />
    </>
  );
};



/* Export the generated form */
export default LlmDetailsForm;

