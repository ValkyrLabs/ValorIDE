import {
  ErrorMessage,
  Field,
  Formik,
  FormikHelpers,
  FormikValues,
} from "formik";
import React from "react";
import {
  Form as BSForm,
  Accordion,
  Col,
  Nav,
  Row,
  Spinner,
} from "react-bootstrap";
import { FaCheckCircle, FaCogs, FaRegPlusSquare } from "react-icons/fa";
import CoolButton from "../../../../components/CoolButton";
import * as Yup from "yup";

import { Note, NoteEntityTypeEnum } from "../../../model";

import { useAddNoteMutation } from "../../services/NoteService";

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-05-08T17:49:28.351161-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelForm.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description:
Represents a note added to a CRM entity.
*/

/* -----------------------------------------------------
   ENUM VALIDATION ARRAYS (Yup oneOf checks), if any
-------------------------------------------------------- */
const EntityTypeValidation = () => {
  return ["customer", "opportunity", "contact", "sales-activity"];
};

/* -----------------------------------------------------
   YUP VALIDATION SCHEMA
   (Skip read-only fields and container types)
-------------------------------------------------------- */
const validationSchema = Yup.object().shape({
  noteId: Yup.string()

    .required("noteId is required."),
  associatedEntityId: Yup.string()

    .required("associatedEntityId is required."),
  entityType: Yup.mixed()
    .oneOf(EntityTypeValidation(), "Invalid value for entityType")
    .required("entityType is required."),
  content: Yup.string()

    .required("content is required."),
  createdDate: Yup.date()

    .required("createdDate is required."),
  createdBy: Yup.string()

    .required("createdBy is required."),
  id: Yup.string(),

  ownerId: Yup.string(),

  keyHash: Yup.string(),

  lastAccessedById: Yup.string(),

  lastAccessedDate: Yup.date(),

  lastModifiedById: Yup.string(),

  lastModifiedDate: Yup.date(),
});

/* -----------------------------------------------------
   COMPONENT
-------------------------------------------------------- */
const NoteForm: React.FC = () => {
  const [addNote, addNoteResult] = useAddNoteMutation();

  /* INITIAL VALUES - skip read-only fields */
  const initialValues: Partial<Note> = {
    noteId: "null",

    associatedEntityId: "null",

    entityType: NoteEntityTypeEnum[Object.keys(NoteEntityTypeEnum)[0]],

    content: "null",

    createdBy: "null",

    id: "7640a97d-fdb4-4a2c-b541-30069c87be10",

    ownerId: "2708ba69-0334-4682-acc9-04a5f8abd83e",

    keyHash: "null",

    lastAccessedById: "a577dee8-fb45-46ea-8ff7-df322ab1b605",

    lastModifiedById: "a644e10a-1d06-4ad5-bc56-dee6b6141f71",
  };

  /* SUBMIT HANDLER */
  const handleSubmit = (
    values: FormikValues,
    { setSubmitting }: FormikHelpers<Note>,
  ) => {
    // Simulate slow network or do what you need:
    setTimeout(() => {
      console.log("Note form values:", values);
      addNote(values);
      setSubmitting(false);
    }, 500);
  };

  return (
    <div>
      <Formik
        validateOnBlur={true}
        initialValues={initialValues as Note}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >
        {({
          isSubmitting,
          isValid,
          errors,
          setFieldValue,
          touched,
          setFieldTouched,
          handleSubmit,
        }) => (
          <form onSubmit={handleSubmit} className="form">
            <Accordion defaultActiveKey="1">
              {/* Debug/Dev Accordion */}
              <Accordion.Item eventKey="0">
                <Accordion.Header>
                  <FaCogs size={36} />
                </Accordion.Header>
                <Accordion.Body>
                  errors: {JSON.stringify(errors)}
                  <br />
                  touched: {JSON.stringify(touched)}
                  <br />
                  addNoteResult: {JSON.stringify(addNoteResult)}
                </Accordion.Body>
              </Accordion.Item>

              {/* Editable Fields (NON-read-only) */}
              <Accordion.Item eventKey="1">
                <Accordion.Header>
                  <FaRegPlusSquare size={36} /> Add New Note
                </Accordion.Header>
                <Accordion.Body>
                  <label htmlFor="noteId" className="nice-form-control">
                    <b>
                      Note Id:
                      {touched.noteId && !errors.noteId && (
                        <span className="okCheck">
                          <FaCheckCircle /> looks good!
                        </span>
                      )}
                    </b>

                    {/* TEXT FIELD */}
                    <Field
                      name="noteId"
                      type="text"
                      className={
                        errors.noteId
                          ? "form-control field-error"
                          : "nice-form-control form-control"
                      }
                    />

                    <ErrorMessage
                      className="error"
                      name="noteId"
                      component="span"
                    />
                  </label>
                  <br />

                  <label
                    htmlFor="associatedEntityId"
                    className="nice-form-control"
                  >
                    <b>
                      Associated Entity Id:
                      {touched.associatedEntityId &&
                        !errors.associatedEntityId && (
                          <span className="okCheck">
                            <FaCheckCircle /> looks good!
                          </span>
                        )}
                    </b>

                    {/* TEXT FIELD */}
                    <Field
                      name="associatedEntityId"
                      type="text"
                      className={
                        errors.associatedEntityId
                          ? "form-control field-error"
                          : "nice-form-control form-control"
                      }
                    />

                    <ErrorMessage
                      className="error"
                      name="associatedEntityId"
                      component="span"
                    />
                  </label>
                  <br />

                  <label htmlFor="entityType" className="nice-form-control">
                    <b>
                      Entity Type:
                      {touched.entityType && !errors.entityType && (
                        <span className="okCheck">
                          <FaCheckCircle /> looks good!
                        </span>
                      )}
                    </b>

                    {/* ENUM DROPDOWN */}
                    <BSForm.Select
                      name="entityType"
                      className={
                        errors.entityType
                          ? "form-control field-error"
                          : "nice-form-control form-control"
                      }
                      onChange={(e) => {
                        setFieldTouched("entityType", true);
                        setFieldValue("entityType", e.target.value);
                      }}
                    >
                      <option value="" label="Select Entity Type" />
                      <EntityTypeLookup />
                    </BSForm.Select>

                    <ErrorMessage
                      className="error"
                      name="entityType"
                      component="span"
                    />
                  </label>
                  <br />

                  <label htmlFor="content" className="nice-form-control">
                    <b>
                      Content:
                      {touched.content && !errors.content && (
                        <span className="okCheck">
                          <FaCheckCircle /> looks good!
                        </span>
                      )}
                    </b>

                    {/* TEXT FIELD */}
                    <Field
                      name="content"
                      type="text"
                      className={
                        errors.content
                          ? "form-control field-error"
                          : "nice-form-control form-control"
                      }
                    />

                    <ErrorMessage
                      className="error"
                      name="content"
                      component="span"
                    />
                  </label>
                  <br />

                  <label htmlFor="createdDate" className="nice-form-control">
                    <b>
                      Created Date:
                      {touched.createdDate && !errors.createdDate && (
                        <span className="okCheck">
                          <FaCheckCircle /> looks good!
                        </span>
                      )}
                    </b>

                    <ErrorMessage
                      className="error"
                      name="createdDate"
                      component="span"
                    />
                  </label>
                  <br />

                  <label htmlFor="createdBy" className="nice-form-control">
                    <b>
                      Created By:
                      {touched.createdBy && !errors.createdBy && (
                        <span className="okCheck">
                          <FaCheckCircle /> looks good!
                        </span>
                      )}
                    </b>

                    {/* TEXT FIELD */}
                    <Field
                      name="createdBy"
                      type="text"
                      className={
                        errors.createdBy
                          ? "form-control field-error"
                          : "nice-form-control form-control"
                      }
                    />

                    <ErrorMessage
                      className="error"
                      name="createdBy"
                      component="span"
                    />
                  </label>
                  <br />

                  <label htmlFor="id" className="nice-form-control">
                    <b>
                      Id:
                      {touched.id && !errors.id && (
                        <span className="okCheck">
                          <FaCheckCircle /> looks good!
                        </span>
                      )}
                    </b>

                    {/* TEXT FIELD */}
                    <Field
                      name="id"
                      type="text"
                      className={
                        errors.id
                          ? "form-control field-error"
                          : "nice-form-control form-control"
                      }
                    />

                    <ErrorMessage
                      className="error"
                      name="id"
                      component="span"
                    />
                  </label>
                  <br />

                  <label htmlFor="ownerId" className="nice-form-control">
                    <b>
                      Owner Id:
                      {touched.ownerId && !errors.ownerId && (
                        <span className="okCheck">
                          <FaCheckCircle /> looks good!
                        </span>
                      )}
                    </b>

                    {/* TEXT FIELD */}
                    <Field
                      name="ownerId"
                      type="text"
                      className={
                        errors.ownerId
                          ? "form-control field-error"
                          : "nice-form-control form-control"
                      }
                    />

                    <ErrorMessage
                      className="error"
                      name="ownerId"
                      component="span"
                    />
                  </label>
                  <br />

                  <label htmlFor="keyHash" className="nice-form-control">
                    <b>
                      Key Hash:
                      {touched.keyHash && !errors.keyHash && (
                        <span className="okCheck">
                          <FaCheckCircle /> looks good!
                        </span>
                      )}
                    </b>

                    {/* TEXT FIELD */}
                    <Field
                      name="keyHash"
                      type="text"
                      className={
                        errors.keyHash
                          ? "form-control field-error"
                          : "nice-form-control form-control"
                      }
                    />

                    <ErrorMessage
                      className="error"
                      name="keyHash"
                      component="span"
                    />
                  </label>
                  <br />

                  <label
                    htmlFor="lastAccessedById"
                    className="nice-form-control"
                  >
                    <b>
                      Last Accessed By Id:
                      {touched.lastAccessedById && !errors.lastAccessedById && (
                        <span className="okCheck">
                          <FaCheckCircle /> looks good!
                        </span>
                      )}
                    </b>

                    {/* TEXT FIELD */}
                    <Field
                      name="lastAccessedById"
                      type="text"
                      className={
                        errors.lastAccessedById
                          ? "form-control field-error"
                          : "nice-form-control form-control"
                      }
                    />

                    <ErrorMessage
                      className="error"
                      name="lastAccessedById"
                      component="span"
                    />
                  </label>
                  <br />

                  <label
                    htmlFor="lastAccessedDate"
                    className="nice-form-control"
                  >
                    <b>
                      Last Accessed Date:
                      {touched.lastAccessedDate && !errors.lastAccessedDate && (
                        <span className="okCheck">
                          <FaCheckCircle /> looks good!
                        </span>
                      )}
                    </b>

                    <ErrorMessage
                      className="error"
                      name="lastAccessedDate"
                      component="span"
                    />
                  </label>
                  <br />

                  <label
                    htmlFor="lastModifiedById"
                    className="nice-form-control"
                  >
                    <b>
                      Last Modified By Id:
                      {touched.lastModifiedById && !errors.lastModifiedById && (
                        <span className="okCheck">
                          <FaCheckCircle /> looks good!
                        </span>
                      )}
                    </b>

                    {/* TEXT FIELD */}
                    <Field
                      name="lastModifiedById"
                      type="text"
                      className={
                        errors.lastModifiedById
                          ? "form-control field-error"
                          : "nice-form-control form-control"
                      }
                    />

                    <ErrorMessage
                      className="error"
                      name="lastModifiedById"
                      component="span"
                    />
                  </label>
                  <br />

                  <label
                    htmlFor="lastModifiedDate"
                    className="nice-form-control"
                  >
                    <b>
                      Last Modified Date:
                      {touched.lastModifiedDate && !errors.lastModifiedDate && (
                        <span className="okCheck">
                          <FaCheckCircle /> looks good!
                        </span>
                      )}
                    </b>

                    <ErrorMessage
                      className="error"
                      name="lastModifiedDate"
                      component="span"
                    />
                  </label>
                  <br />

                  {/* SUBMIT BUTTON */}
                  <CoolButton
                    variant={
                      touched && isValid
                        ? isSubmitting
                          ? "disabled"
                          : "success"
                        : "warning"
                    }
                    type="submit"
                  >
                    {isSubmitting && (
                      <Spinner
                        style={{ float: "left" }}
                        as="span"
                        animation="grow"
                        variant="light"
                        aria-hidden="true"
                      />
                    )}
                    <FaCheckCircle size={30} /> Create New Note
                  </CoolButton>
                </Accordion.Body>
              </Accordion.Item>

              {/* Read-Only System Fields */}
              <Accordion.Item eventKey="2">
                <Accordion.Header>System Fields (Read Only)</Accordion.Header>
                <Accordion.Body>
                  <Row></Row>
                </Accordion.Body>
              </Accordion.Item>
            </Accordion>
          </form>
        )}
      </Formik>
    </div>
  );
};

/*
lowercase entitytypelookup
uppercase ENTITYTYPELOOKUP
snakecase entity_type_lookup
pascalcase EntityTypeLookup
camelcase entityTypeLookup
kebabcase entity-type-lookup
*/

const EntityTypeLookup = () => {
  return (
    <>
      <option value="customer" label="Customer" />
      <option value="opportunity" label="Opportunity" />
      <option value="contact" label="Contact" />
      <option value="sales-activity" label="Sales Activity" />
    </>
  );
};

/* Export the generated form */
export default NoteForm;
