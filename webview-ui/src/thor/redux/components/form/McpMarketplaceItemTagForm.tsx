import {
  ErrorMessage,
  Field,
  Formik,
  FormikHelpers,
  FormikValues,
} from "formik";
import React from "react";
import {
  Form as BSForm,
  Accordion,
  Col,
  Nav,
  Row,
  Spinner,
} from "react-bootstrap";
import { FaCheckCircle, FaCogs, FaRegPlusSquare } from "react-icons/fa";
import CoolButton from "../../../../components/CoolButton";
import * as Yup from "yup";

import { McpMarketplaceItemTag } from "../../../model";

import { useAddMcpMarketplaceItemTagMutation } from "../../services/McpMarketplaceItemTagService";

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-05-08T17:49:28.351161-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelForm.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description:
McpMarketplaceItemTag
*/

/* -----------------------------------------------------
   ENUM VALIDATION ARRAYS (Yup oneOf checks), if any
-------------------------------------------------------- */

/* -----------------------------------------------------
   YUP VALIDATION SCHEMA
   (Skip read-only fields and container types)
-------------------------------------------------------- */
const validationSchema = Yup.object().shape({
  mcpMarketplaceItemId: Yup.string(),

  name: Yup.string(),

  description: Yup.string(),

  notes: Yup.string(),

  id: Yup.string(),

  ownerId: Yup.string(),

  createdDate: Yup.date(),

  keyHash: Yup.string(),

  lastAccessedById: Yup.string(),

  lastAccessedDate: Yup.date(),

  lastModifiedById: Yup.string(),

  lastModifiedDate: Yup.date(),
});

/* -----------------------------------------------------
   COMPONENT
-------------------------------------------------------- */
const McpMarketplaceItemTagForm: React.FC = () => {
  const [addMcpMarketplaceItemTag, addMcpMarketplaceItemTagResult] =
    useAddMcpMarketplaceItemTagMutation();

  /* INITIAL VALUES - skip read-only fields */
  const initialValues: Partial<McpMarketplaceItemTag> = {
    mcpMarketplaceItemId: "null",

    name: "null",

    description: "null",

    notes: "null",

    id: "45885302-66bc-4fef-84f2-16b772821729",

    ownerId: "866dfabc-26c2-4023-b866-8e70a8c906af",

    keyHash: "null",

    lastAccessedById: "ce6abb08-0afe-429f-ac75-2f2171c70888",

    lastModifiedById: "6bf29f0e-bcc6-46f6-87c9-689014c44245",
  };

  /* SUBMIT HANDLER */
  const handleSubmit = (
    values: FormikValues,
    { setSubmitting }: FormikHelpers<McpMarketplaceItemTag>,
  ) => {
    // Simulate slow network or do what you need:
    setTimeout(() => {
      console.log("McpMarketplaceItemTag form values:", values);
      addMcpMarketplaceItemTag(values);
      setSubmitting(false);
    }, 500);
  };

  return (
    <div>
      <Formik
        validateOnBlur={true}
        initialValues={initialValues as McpMarketplaceItemTag}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >
        {({
          isSubmitting,
          isValid,
          errors,
          setFieldValue,
          touched,
          setFieldTouched,
          handleSubmit,
        }) => (
          <form onSubmit={handleSubmit} className="form">
            <Accordion defaultActiveKey="1">
              {/* Debug/Dev Accordion */}
              <Accordion.Item eventKey="0">
                <Accordion.Header>
                  <FaCogs size={36} />
                </Accordion.Header>
                <Accordion.Body>
                  errors: {JSON.stringify(errors)}
                  <br />
                  touched: {JSON.stringify(touched)}
                  <br />
                  addMcpMarketplaceItemTagResult:{" "}
                  {JSON.stringify(addMcpMarketplaceItemTagResult)}
                </Accordion.Body>
              </Accordion.Item>

              {/* Editable Fields (NON-read-only) */}
              <Accordion.Item eventKey="1">
                <Accordion.Header>
                  <FaRegPlusSquare size={36} /> Add New McpMarketplaceItemTag
                </Accordion.Header>
                <Accordion.Body>
                  <label
                    htmlFor="mcpMarketplaceItemId"
                    className="nice-form-control"
                  >
                    <b>
                      Mcp Marketplace Item Id:
                      {touched.mcpMarketplaceItemId &&
                        !errors.mcpMarketplaceItemId && (
                          <span className="okCheck">
                            <FaCheckCircle /> looks good!
                          </span>
                        )}
                    </b>

                    {/* TEXT FIELD */}
                    <Field
                      name="mcpMarketplaceItemId"
                      type="text"
                      className={
                        errors.mcpMarketplaceItemId
                          ? "form-control field-error"
                          : "nice-form-control form-control"
                      }
                    />

                    <ErrorMessage
                      className="error"
                      name="mcpMarketplaceItemId"
                      component="span"
                    />
                  </label>
                  <br />

                  <label htmlFor="name" className="nice-form-control">
                    <b>
                      Name:
                      {touched.name && !errors.name && (
                        <span className="okCheck">
                          <FaCheckCircle /> looks good!
                        </span>
                      )}
                    </b>

                    {/* TEXT FIELD */}
                    <Field
                      name="name"
                      type="text"
                      className={
                        errors.name
                          ? "form-control field-error"
                          : "nice-form-control form-control"
                      }
                    />

                    <ErrorMessage
                      className="error"
                      name="name"
                      component="span"
                    />
                  </label>
                  <br />

                  <label htmlFor="description" className="nice-form-control">
                    <b>
                      Description:
                      {touched.description && !errors.description && (
                        <span className="okCheck">
                          <FaCheckCircle /> looks good!
                        </span>
                      )}
                    </b>

                    {/* TEXT FIELD */}
                    <Field
                      name="description"
                      type="text"
                      className={
                        errors.description
                          ? "form-control field-error"
                          : "nice-form-control form-control"
                      }
                    />

                    <ErrorMessage
                      className="error"
                      name="description"
                      component="span"
                    />
                  </label>
                  <br />

                  <label htmlFor="notes" className="nice-form-control">
                    <b>
                      Notes:
                      {touched.notes && !errors.notes && (
                        <span className="okCheck">
                          <FaCheckCircle /> looks good!
                        </span>
                      )}
                    </b>

                    {/* TEXT FIELD */}
                    <Field
                      name="notes"
                      type="text"
                      className={
                        errors.notes
                          ? "form-control field-error"
                          : "nice-form-control form-control"
                      }
                    />

                    <ErrorMessage
                      className="error"
                      name="notes"
                      component="span"
                    />
                  </label>
                  <br />

                  <label htmlFor="id" className="nice-form-control">
                    <b>
                      Id:
                      {touched.id && !errors.id && (
                        <span className="okCheck">
                          <FaCheckCircle /> looks good!
                        </span>
                      )}
                    </b>

                    {/* TEXT FIELD */}
                    <Field
                      name="id"
                      type="text"
                      className={
                        errors.id
                          ? "form-control field-error"
                          : "nice-form-control form-control"
                      }
                    />

                    <ErrorMessage
                      className="error"
                      name="id"
                      component="span"
                    />
                  </label>
                  <br />

                  <label htmlFor="ownerId" className="nice-form-control">
                    <b>
                      Owner Id:
                      {touched.ownerId && !errors.ownerId && (
                        <span className="okCheck">
                          <FaCheckCircle /> looks good!
                        </span>
                      )}
                    </b>

                    {/* TEXT FIELD */}
                    <Field
                      name="ownerId"
                      type="text"
                      className={
                        errors.ownerId
                          ? "form-control field-error"
                          : "nice-form-control form-control"
                      }
                    />

                    <ErrorMessage
                      className="error"
                      name="ownerId"
                      component="span"
                    />
                  </label>
                  <br />

                  <label htmlFor="createdDate" className="nice-form-control">
                    <b>
                      Created Date:
                      {touched.createdDate && !errors.createdDate && (
                        <span className="okCheck">
                          <FaCheckCircle /> looks good!
                        </span>
                      )}
                    </b>

                    <ErrorMessage
                      className="error"
                      name="createdDate"
                      component="span"
                    />
                  </label>
                  <br />

                  <label htmlFor="keyHash" className="nice-form-control">
                    <b>
                      Key Hash:
                      {touched.keyHash && !errors.keyHash && (
                        <span className="okCheck">
                          <FaCheckCircle /> looks good!
                        </span>
                      )}
                    </b>

                    {/* TEXT FIELD */}
                    <Field
                      name="keyHash"
                      type="text"
                      className={
                        errors.keyHash
                          ? "form-control field-error"
                          : "nice-form-control form-control"
                      }
                    />

                    <ErrorMessage
                      className="error"
                      name="keyHash"
                      component="span"
                    />
                  </label>
                  <br />

                  <label
                    htmlFor="lastAccessedById"
                    className="nice-form-control"
                  >
                    <b>
                      Last Accessed By Id:
                      {touched.lastAccessedById && !errors.lastAccessedById && (
                        <span className="okCheck">
                          <FaCheckCircle /> looks good!
                        </span>
                      )}
                    </b>

                    {/* TEXT FIELD */}
                    <Field
                      name="lastAccessedById"
                      type="text"
                      className={
                        errors.lastAccessedById
                          ? "form-control field-error"
                          : "nice-form-control form-control"
                      }
                    />

                    <ErrorMessage
                      className="error"
                      name="lastAccessedById"
                      component="span"
                    />
                  </label>
                  <br />

                  <label
                    htmlFor="lastAccessedDate"
                    className="nice-form-control"
                  >
                    <b>
                      Last Accessed Date:
                      {touched.lastAccessedDate && !errors.lastAccessedDate && (
                        <span className="okCheck">
                          <FaCheckCircle /> looks good!
                        </span>
                      )}
                    </b>

                    <ErrorMessage
                      className="error"
                      name="lastAccessedDate"
                      component="span"
                    />
                  </label>
                  <br />

                  <label
                    htmlFor="lastModifiedById"
                    className="nice-form-control"
                  >
                    <b>
                      Last Modified By Id:
                      {touched.lastModifiedById && !errors.lastModifiedById && (
                        <span className="okCheck">
                          <FaCheckCircle /> looks good!
                        </span>
                      )}
                    </b>

                    {/* TEXT FIELD */}
                    <Field
                      name="lastModifiedById"
                      type="text"
                      className={
                        errors.lastModifiedById
                          ? "form-control field-error"
                          : "nice-form-control form-control"
                      }
                    />

                    <ErrorMessage
                      className="error"
                      name="lastModifiedById"
                      component="span"
                    />
                  </label>
                  <br />

                  <label
                    htmlFor="lastModifiedDate"
                    className="nice-form-control"
                  >
                    <b>
                      Last Modified Date:
                      {touched.lastModifiedDate && !errors.lastModifiedDate && (
                        <span className="okCheck">
                          <FaCheckCircle /> looks good!
                        </span>
                      )}
                    </b>

                    <ErrorMessage
                      className="error"
                      name="lastModifiedDate"
                      component="span"
                    />
                  </label>
                  <br />

                  {/* SUBMIT BUTTON */}
                  <CoolButton
                    variant={
                      touched && isValid
                        ? isSubmitting
                          ? "disabled"
                          : "success"
                        : "warning"
                    }
                    type="submit"
                  >
                    {isSubmitting && (
                      <Spinner
                        style={{ float: "left" }}
                        as="span"
                        animation="grow"
                        variant="light"
                        aria-hidden="true"
                      />
                    )}
                    <FaCheckCircle size={30} /> Create New McpMarketplaceItemTag
                  </CoolButton>
                </Accordion.Body>
              </Accordion.Item>

              {/* Read-Only System Fields */}
              <Accordion.Item eventKey="2">
                <Accordion.Header>System Fields (Read Only)</Accordion.Header>
                <Accordion.Body>
                  <Row></Row>
                </Accordion.Body>
              </Accordion.Item>
            </Accordion>
          </form>
        )}
      </Formik>
    </div>
  );
};

/* Export the generated form */
export default McpMarketplaceItemTagForm;
