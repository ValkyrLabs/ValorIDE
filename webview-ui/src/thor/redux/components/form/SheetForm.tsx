import { ErrorMessage, Field, Formik, FormikHelpers, FormikValues } from 'formik';
import React, { useState } from 'react';
import {
  Form as BSForm,
  Accordion,
  Col,
  Nav,
  Row,
  Spinner
} from 'react-bootstrap';
import { FaCheckCircle, FaCogs, FaRegPlusSquare, FaUserShield } from 'react-icons/fa';
import CoolButton from '../../../../components/CoolButton';
import * as Yup from 'yup';
import PermissionDialog from '../../../../components/PermissionDialog';
import { AclGrantRequest, PermissionType } from '../../types/AclTypes';


import {
  Sheet,
} from '../../../model';

import { useAddSheetMutation } from '../../services/SheetService';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-08-12T20:30:33.554374-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelForm.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description:
GridHeim sheet
*/

/* -----------------------------------------------------
   ENUM VALIDATION ARRAYS (Yup oneOf checks), if any
-------------------------------------------------------- */

/* -----------------------------------------------------
   YUP VALIDATION SCHEMA
   (Skip read-only fields and container types)
-------------------------------------------------------- */
const validationSchema = Yup.object().shape({
    
        workbookId: Yup.string()
          
          
          ,
    
        name: Yup.string()
          
          
          ,
    
        id: Yup.string()
          
          
          ,
    
        ownerId: Yup.string()
          
          
          ,
    
        createdDate: Yup.date()
          
          
          ,
    
        keyHash: Yup.string()
          
          
          ,
    
        lastAccessedById: Yup.string()
          
          
          ,
    
        lastAccessedDate: Yup.date()
          
          
          ,
    
        lastModifiedById: Yup.string()
          
          
          ,
    
        lastModifiedDate: Yup.date()
          
          
          ,
});

/* -----------------------------------------------------
   COMPONENT
-------------------------------------------------------- */
const SheetForm: React.FC = () => {
  const [addSheet, addSheetResult] = useAddSheetMutation();
  
  // Permission Management State
  const [showPermissionDialog, setShowPermissionDialog] = useState(false);
  const [createdObjectId, setCreatedObjectId] = useState<string | null>(null);

  // Mock current user - in real implementation, this would come from auth context
  const currentUser = {
    username: 'current_user', // This should come from authentication context
    permissions: {
      isOwner: true, // This should be determined by checking object ownership
      isAdmin: true, // This should come from user roles
      canGrantPermissions: true,
      permissions: [PermissionType.READ, PermissionType.WRITE, PermissionType.CREATE, PermissionType.DELETE, PermissionType.ADMINISTRATION],
    },
  };

  /* INITIAL VALUES - skip read-only fields */
  const initialValues: Partial<Sheet> = {
          

            workbookId: '3fa85f64-5717-4562-b3fc-2c963f66afa7',





          

            name: 'null',





          

            id: 'f19f41f8-ecaa-4dab-9e2c-ebefd6535544',





          

            ownerId: '47d47221-9bc5-4ae3-b1ce-d1257751b621',





          






          

            keyHash: 'null',





          

            lastAccessedById: '5d78e501-ebd1-4961-b0df-2ad948034bdd',





          






          

            lastModifiedById: '64174e52-6fa7-414a-a754-1f245df86ed3',





          






  };

  // Permission Management Handlers
  const handleManagePermissions = (objectId: string) => {
    setCreatedObjectId(objectId);
    setShowPermissionDialog(true);
  };

  const handlePermissionDialogClose = () => {
    setShowPermissionDialog(false);
    setCreatedObjectId(null);
  };

  const handlePermissionsSave = (grants: AclGrantRequest[]) => {
    console.log('Permissions saved for new Sheet:', grants);
    // Optionally show success message or redirect
  };

  /* SUBMIT HANDLER */
  const handleSubmit = async (values: FormikValues, { setSubmitting }: FormikHelpers<Sheet>) => {
    try {
      console.log("Sheet form values:", values);
      const result = await addSheet(values).unwrap();
      
      // If object was created successfully and has an ID, offer to set permissions
      if (result && result.id && currentUser.permissions.canGrantPermissions) {
        const shouldSetPermissions = window.confirm(
          `Sheet created successfully! Would you like to set permissions for this object?`
        );
        if (shouldSetPermissions) {
          handleManagePermissions(result.id);
        }
      }
      
      setSubmitting(false);
    } catch (error) {
      console.error('Failed to create Sheet:', error);
      setSubmitting(false);
    }
  };

  return (
    <div>
      <Formik
        validateOnBlur={true}
        initialValues={initialValues as Sheet}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >
        {({
          isSubmitting,
          isValid,
          errors,
          setFieldValue,
          touched,
          setFieldTouched,
          handleSubmit
        }) => (
          <form onSubmit={handleSubmit} className="form">
            <Accordion defaultActiveKey="1">
              {/* Debug/Dev Accordion */}
              <Accordion.Item eventKey="0">
                <Accordion.Header>
                  <FaCogs size={36} />
                </Accordion.Header>
                <Accordion.Body>
                  errors: {JSON.stringify(errors)}
                  <br />
                  touched: {JSON.stringify(touched)}
                  <br />
                  addSheetResult: {JSON.stringify(addSheetResult)}
                </Accordion.Body>
              </Accordion.Item>

              {/* Editable Fields (NON-read-only) */}
              <Accordion.Item eventKey="1">
                <Accordion.Header>
                  <FaRegPlusSquare size={36} /> Add New Sheet
                </Accordion.Header>
                <Accordion.Body>
                    
                    <label htmlFor="workbookId" className="nice-form-control">
                      <b>
                        Workbook Id:
                        {touched.workbookId &&
                         !errors.workbookId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* TEXT FIELD */}
                          <Field
                            name="workbookId"
                            type="text"
                            className={
                              errors.workbookId
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />






                      <ErrorMessage
                        className="error"
                        name="workbookId"
                        component="span"
                      />
                    </label>
                    <br />
                    
                    <label htmlFor="name" className="nice-form-control">
                      <b>
                        Name:
                        {touched.name &&
                         !errors.name && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* TEXT FIELD */}
                          <Field
                            name="name"
                            type="text"
                            className={
                              errors.name
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />






                      <ErrorMessage
                        className="error"
                        name="name"
                        component="span"
                      />
                    </label>
                    <br />
                    
                    <label htmlFor="id" className="nice-form-control">
                      <b>
                        Id:
                        {touched.id &&
                         !errors.id && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* TEXT FIELD */}
                          <Field
                            name="id"
                            type="text"
                            className={
                              errors.id
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />






                      <ErrorMessage
                        className="error"
                        name="id"
                        component="span"
                      />
                    </label>
                    <br />
                    
                    <label htmlFor="ownerId" className="nice-form-control">
                      <b>
                        Owner Id:
                        {touched.ownerId &&
                         !errors.ownerId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* TEXT FIELD */}
                          <Field
                            name="ownerId"
                            type="text"
                            className={
                              errors.ownerId
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />






                      <ErrorMessage
                        className="error"
                        name="ownerId"
                        component="span"
                      />
                    </label>
                    <br />
                    
                    <label htmlFor="createdDate" className="nice-form-control">
                      <b>
                        Created Date:
                        {touched.createdDate &&
                         !errors.createdDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                      <ErrorMessage
                        className="error"
                        name="createdDate"
                        component="span"
                      />
                    </label>
                    <br />
                    
                    <label htmlFor="keyHash" className="nice-form-control">
                      <b>
                        Key Hash:
                        {touched.keyHash &&
                         !errors.keyHash && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* TEXT FIELD */}
                          <Field
                            name="keyHash"
                            type="text"
                            className={
                              errors.keyHash
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />






                      <ErrorMessage
                        className="error"
                        name="keyHash"
                        component="span"
                      />
                    </label>
                    <br />
                    
                    <label htmlFor="lastAccessedById" className="nice-form-control">
                      <b>
                        Last Accessed By Id:
                        {touched.lastAccessedById &&
                         !errors.lastAccessedById && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* TEXT FIELD */}
                          <Field
                            name="lastAccessedById"
                            type="text"
                            className={
                              errors.lastAccessedById
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />






                      <ErrorMessage
                        className="error"
                        name="lastAccessedById"
                        component="span"
                      />
                    </label>
                    <br />
                    
                    <label htmlFor="lastAccessedDate" className="nice-form-control">
                      <b>
                        Last Accessed Date:
                        {touched.lastAccessedDate &&
                         !errors.lastAccessedDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                      <ErrorMessage
                        className="error"
                        name="lastAccessedDate"
                        component="span"
                      />
                    </label>
                    <br />
                    
                    <label htmlFor="lastModifiedById" className="nice-form-control">
                      <b>
                        Last Modified By Id:
                        {touched.lastModifiedById &&
                         !errors.lastModifiedById && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* TEXT FIELD */}
                          <Field
                            name="lastModifiedById"
                            type="text"
                            className={
                              errors.lastModifiedById
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />






                      <ErrorMessage
                        className="error"
                        name="lastModifiedById"
                        component="span"
                      />
                    </label>
                    <br />
                    
                    <label htmlFor="lastModifiedDate" className="nice-form-control">
                      <b>
                        Last Modified Date:
                        {touched.lastModifiedDate &&
                         !errors.lastModifiedDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                      <ErrorMessage
                        className="error"
                        name="lastModifiedDate"
                        component="span"
                      />
                    </label>
                    <br />

                  {/* SUBMIT BUTTON */}
                  <CoolButton
                    variant={touched && isValid ? (isSubmitting ? 'disabled' : 'success') : 'warning'}
                    type="submit"
                  >
                    {isSubmitting && (
                      <Spinner
                        style={ { float: 'left' } }
                        as="span"
                        animation="grow"
                        variant="light"
                        aria-hidden="true"
                      />
                    )}
                    <FaCheckCircle size={30} /> Create New Sheet
                  </CoolButton>
                </Accordion.Body>
              </Accordion.Item>

              {/* Read-Only System Fields */}
              <Accordion.Item eventKey="2">
                <Accordion.Header>System Fields (Read Only)</Accordion.Header>
                <Accordion.Body>
                  <Row>
                  </Row>
                </Accordion.Body>
              </Accordion.Item>
            </Accordion>
          </form>
        )}
      </Formik>

      {/* Permission Management Dialog */}
      {createdObjectId && (
        <PermissionDialog
          objectType="com.valkyrlabs.model.Sheet"
          objectId={createdObjectId}
          isVisible={showPermissionDialog}
          onClose={handlePermissionDialogClose}
          onSave={handlePermissionsSave}
          currentUser={currentUser}
        />
      )}
    </div>
  );
};



/* Export the generated form */
export default SheetForm;

