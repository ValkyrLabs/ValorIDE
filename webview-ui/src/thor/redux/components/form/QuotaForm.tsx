import { ErrorMessage, Field, Formik, FormikHelpers, FormikValues } from 'formik';
import React, { useState } from 'react';
import {
  Form as BSForm,
  Accordion,
  Col,
  Row,
  Spinner
} from 'react-bootstrap';
import LoadingSpinner from '@valkyr/component-library/LoadingSpinner';
import { FaCheckCircle, FaCogs, FaRegPlusSquare } from 'react-icons/fa';
import CoolButton from '@valkyr/component-library/CoolButton';
import * as Yup from 'yup';
import { SmartField } from '@valkyr/component-library/ForeignKey/SmartField';

import { PermissionDialog } from '@valkyr/component-library/PermissionDialog';
import { AclGrantRequest, PermissionType } from '@valkyr/component-library/PermissionDialog/types';


import {
  Quota,
  QuotaResourceTypeEnum,
} from '@thor/model';

import { useAddQuotaMutation } from '../../services/QuotaService';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelForm.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description:
Per-principal quota limits for rate limiting and concurrency control
*/

/* -----------------------------------------------------
   ENUM VALIDATION ARRAYS (Yup oneOf checks), if any
-------------------------------------------------------- */
const ResourceTypeValidation = () => {
  return [
    'WORKFLOW_EXECUTION',
    'API_CALL',
    'LLM_REQUEST',
    'EMAIL_SEND',
    'FILE_UPLOAD',
  ];
};

/* -----------------------------------------------------
   YUP VALIDATION SCHEMA (skip read-only fields)
-------------------------------------------------------- */
const asNumber = (schema: Yup.NumberSchema) =>
  schema.transform((val, orig) => (orig === '' || orig === null ? undefined : val));

const validationSchema = Yup.object().shape({
        principalId: Yup.string(),
      resourceType: Yup.mixed()
        .oneOf(ResourceTypeValidation(), "Invalid value for resourceType")
        ,
        maxConcurrent: asNumber(Yup.number().integer().typeError("maxConcurrent must be a number")),
        maxPerHour: asNumber(Yup.number().integer().typeError("maxPerHour must be a number")),
        maxPerDay: asNumber(Yup.number().integer().typeError("maxPerDay must be a number")),
        currentConcurrent: asNumber(Yup.number().integer().typeError("currentConcurrent must be a number")),
        currentHourCount: asNumber(Yup.number().integer().typeError("currentHourCount must be a number")),
        currentDayCount: asNumber(Yup.number().integer().typeError("currentDayCount must be a number")),
        hourResetAt: Yup.date()
          .transform((value, originalValue) => {
            if (!originalValue) {
              return value;
            }
            const parsed = new Date(originalValue);
            return Number.isNaN(parsed.getTime()) ? value : parsed;
          }).typeError("hourResetAt must be a valid date"),
        dayResetAt: Yup.date()
          .transform((value, originalValue) => {
            if (!originalValue) {
              return value;
            }
            const parsed = new Date(originalValue);
            return Number.isNaN(parsed.getTime()) ? value : parsed;
          }).typeError("dayResetAt must be a valid date"),
        id: Yup.string(),
        ownerId: Yup.string(),
        createdDate: Yup.date()
          .transform((value, originalValue) => {
            if (!originalValue) {
              return value;
            }
            const parsed = new Date(originalValue);
            return Number.isNaN(parsed.getTime()) ? value : parsed;
          }).typeError("createdDate must be a valid date"),
        keyHash: Yup.string(),
        lastAccessedById: Yup.string(),
        lastAccessedDate: Yup.date()
          .transform((value, originalValue) => {
            if (!originalValue) {
              return value;
            }
            const parsed = new Date(originalValue);
            return Number.isNaN(parsed.getTime()) ? value : parsed;
          }).typeError("lastAccessedDate must be a valid date"),
        lastModifiedById: Yup.string(),
        lastModifiedDate: Yup.date()
          .transform((value, originalValue) => {
            if (!originalValue) {
              return value;
            }
            const parsed = new Date(originalValue);
            return Number.isNaN(parsed.getTime()) ? value : parsed;
          }).typeError("lastModifiedDate must be a valid date"),
});

/* -----------------------------------------------------
   COMPONENT
-------------------------------------------------------- */
const QuotaForm: React.FC = () => {
  const [addQuota, addQuotaResult] = useAddQuotaMutation();

  // Permission Management State
  const [showPermissionDialog, setShowPermissionDialog] = useState(false);
  const [createdObjectId, setCreatedObjectId] = useState<string | null>(null);

  // Mock current user - in real implementation, this would come from auth context
  const currentUser = {
    username: 'current_user',
    permissions: {
      isOwner: true,
      isAdmin: true,
      canGrantPermissions: true,
      permissions: [PermissionType.READ, PermissionType.WRITE, PermissionType.CREATE, PermissionType.DELETE, PermissionType.ADMINISTRATION],
    },
  };

  /* -----------------------------------------------------
     INITIAL VALUES - only NON read-only fields
  -------------------------------------------------------- */
  const initialValues: Partial<Quota> = {
          principalId: '',
        resourceType: undefined,
          maxConcurrent: 0,
          maxPerHour: 0,
          maxPerDay: 0,
          currentConcurrent: 0,
          currentHourCount: 0,
          currentDayCount: 0,
          hourResetAt: new Date(),
          dayResetAt: new Date(),
          id: '',
          ownerId: '',
          createdDate: new Date(),
          keyHash: '',
          lastAccessedById: '',
          lastAccessedDate: new Date(),
          lastModifiedById: '',
          lastModifiedDate: new Date(),
  };

  // Permission Management Handlers
  const handleManagePermissions = (objectId: string) => {
    setCreatedObjectId(objectId);
    setShowPermissionDialog(true);
  };

  const handlePermissionDialogClose = () => {
    setShowPermissionDialog(false);
    setCreatedObjectId(null);
  };

  const handlePermissionsSave = (grants: AclGrantRequest[]) => {
    console.log('Permissions saved for new Quota:', grants);
  };

  /* SUBMIT HANDLER */
  const handleSubmit = async (values: FormikValues, { setSubmitting }: FormikHelpers<Quota>) => {
    try {
      console.log("Quota form values:", values);

      // NOTE: depending on your generated endpoint, you may need { body: values }
      const result = await addQuota(values as any).unwrap();

      if (result && result.id && currentUser.permissions.canGrantPermissions) {
        const shouldSetPermissions = window.confirm(
          `Quota created successfully! Would you like to set permissions for this object?`
        );
        if (shouldSetPermissions) {
          handleManagePermissions(result.id);
        }
      }

      setSubmitting(false);
    } catch (error) {
      console.error('Failed to create Quota:', error);
      setSubmitting(false);
    }
  };

  return (
    <div>
      <Formik
        validateOnBlur={true}
        initialValues={initialValues as Quota}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >
        {({
          isSubmitting,
          isValid,
          errors,
          values,
          setFieldValue,
          touched,
          setFieldTouched,
          handleSubmit
        }) => (
          <form onSubmit={handleSubmit} className="form">
            <Accordion defaultActiveKey="1">
              
              {/* Editable Fields (NON read-only) */}
              <Accordion.Item eventKey="1">
                <Accordion.Header>
                  <FaRegPlusSquare size={28} /> &nbsp; Add New Quota
                </Accordion.Header>
                <Accordion.Body>
                    <label htmlFor="principalId" className="nice-form-control">
                      <b>
                        Principal Id:
                        {touched.principalId &&
                         !errors.principalId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="principalId"
                            value={values?.principalId}
                            placeholder="Principal Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="principalId"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="resourceType" className="nice-form-control">
                      <b>
                        Resource Type:
                        {touched.resourceType &&
                         !errors.resourceType && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>

                        {/* ENUM DROPDOWN */}
                        <BSForm.Select
                          name="resourceType"
                          value={values.resourceType || ''}
                          className={
                            errors.resourceType
                              ? 'form-control field-error'
                              : 'nice-form-control form-control'
                          }
                          onChange={(e) => {
                            setFieldTouched('resourceType', true);
                            setFieldValue('resourceType', e.target.value || undefined);
                          }}
                        >
                          <option value="" label="Select Resource Type" />
                          <ResourceTypeLookup />
                        </BSForm.Select>


                      <ErrorMessage
                        className="error"
                        name="resourceType"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="maxConcurrent" className="nice-form-control">
                      <b>
                        Max Concurrent:
                        {touched.maxConcurrent &&
                         !errors.maxConcurrent && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>




                          {/* INTEGER FIELD */}
                          <Field
                            name="maxConcurrent"
                            type="number"
                            value={values.maxConcurrent || ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('maxConcurrent', true);
                              const v = e.target.value;
                              setFieldValue('maxConcurrent', v === '' ? undefined : Number(v));
                            }}
                            className={
                              errors.maxConcurrent
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />






                      <ErrorMessage
                        className="error"
                        name="maxConcurrent"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="maxPerHour" className="nice-form-control">
                      <b>
                        Max Per Hour:
                        {touched.maxPerHour &&
                         !errors.maxPerHour && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>




                          {/* INTEGER FIELD */}
                          <Field
                            name="maxPerHour"
                            type="number"
                            value={values.maxPerHour || ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('maxPerHour', true);
                              const v = e.target.value;
                              setFieldValue('maxPerHour', v === '' ? undefined : Number(v));
                            }}
                            className={
                              errors.maxPerHour
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />






                      <ErrorMessage
                        className="error"
                        name="maxPerHour"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="maxPerDay" className="nice-form-control">
                      <b>
                        Max Per Day:
                        {touched.maxPerDay &&
                         !errors.maxPerDay && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>




                          {/* INTEGER FIELD */}
                          <Field
                            name="maxPerDay"
                            type="number"
                            value={values.maxPerDay || ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('maxPerDay', true);
                              const v = e.target.value;
                              setFieldValue('maxPerDay', v === '' ? undefined : Number(v));
                            }}
                            className={
                              errors.maxPerDay
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />






                      <ErrorMessage
                        className="error"
                        name="maxPerDay"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="currentConcurrent" className="nice-form-control">
                      <b>
                        Current Concurrent:
                        {touched.currentConcurrent &&
                         !errors.currentConcurrent && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>




                          {/* INTEGER FIELD */}
                          <Field
                            name="currentConcurrent"
                            type="number"
                            value={values.currentConcurrent || ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('currentConcurrent', true);
                              const v = e.target.value;
                              setFieldValue('currentConcurrent', v === '' ? undefined : Number(v));
                            }}
                            className={
                              errors.currentConcurrent
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />






                      <ErrorMessage
                        className="error"
                        name="currentConcurrent"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="currentHourCount" className="nice-form-control">
                      <b>
                        Current Hour Count:
                        {touched.currentHourCount &&
                         !errors.currentHourCount && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>




                          {/* INTEGER FIELD */}
                          <Field
                            name="currentHourCount"
                            type="number"
                            value={values.currentHourCount || ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('currentHourCount', true);
                              const v = e.target.value;
                              setFieldValue('currentHourCount', v === '' ? undefined : Number(v));
                            }}
                            className={
                              errors.currentHourCount
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />






                      <ErrorMessage
                        className="error"
                        name="currentHourCount"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="currentDayCount" className="nice-form-control">
                      <b>
                        Current Day Count:
                        {touched.currentDayCount &&
                         !errors.currentDayCount && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>




                          {/* INTEGER FIELD */}
                          <Field
                            name="currentDayCount"
                            type="number"
                            value={values.currentDayCount || ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('currentDayCount', true);
                              const v = e.target.value;
                              setFieldValue('currentDayCount', v === '' ? undefined : Number(v));
                            }}
                            className={
                              errors.currentDayCount
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />






                      <ErrorMessage
                        className="error"
                        name="currentDayCount"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="hourResetAt" className="nice-form-control">
                      <b>
                        Hour Reset At:
                        {touched.hourResetAt &&
                         !errors.hourResetAt && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                          {/* DATETIME FIELD */}
                          <Field
                            name="hourResetAt"
                            type="datetime-local"
                            value={values.hourResetAt ? 
                              new Date(values.hourResetAt).toISOString().slice(0, 16) : 
                              ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('hourResetAt', true);
                              const v = e.target.value;
                              setFieldValue('hourResetAt', v ? new Date(v).toISOString() : '');
                            }}
                            className={
                              errors.hourResetAt
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />

                      <ErrorMessage
                        className="error"
                        name="hourResetAt"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="dayResetAt" className="nice-form-control">
                      <b>
                        Day Reset At:
                        {touched.dayResetAt &&
                         !errors.dayResetAt && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                          {/* DATETIME FIELD */}
                          <Field
                            name="dayResetAt"
                            type="datetime-local"
                            value={values.dayResetAt ? 
                              new Date(values.dayResetAt).toISOString().slice(0, 16) : 
                              ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('dayResetAt', true);
                              const v = e.target.value;
                              setFieldValue('dayResetAt', v ? new Date(v).toISOString() : '');
                            }}
                            className={
                              errors.dayResetAt
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />

                      <ErrorMessage
                        className="error"
                        name="dayResetAt"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="id" className="nice-form-control">
                      <b>
                        Id:
                        {touched.id &&
                         !errors.id && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="id"
                            value={values?.id}
                            placeholder="Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="id"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="ownerId" className="nice-form-control">
                      <b>
                        Owner Id:
                        {touched.ownerId &&
                         !errors.ownerId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="ownerId"
                            value={values?.ownerId}
                            placeholder="Owner Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="ownerId"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="createdDate" className="nice-form-control">
                      <b>
                        Created Date:
                        {touched.createdDate &&
                         !errors.createdDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                          {/* DATETIME FIELD */}
                          <Field
                            name="createdDate"
                            type="datetime-local"
                            value={values.createdDate ? 
                              new Date(values.createdDate).toISOString().slice(0, 16) : 
                              ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('createdDate', true);
                              const v = e.target.value;
                              setFieldValue('createdDate', v ? new Date(v).toISOString() : '');
                            }}
                            className={
                              errors.createdDate
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />

                      <ErrorMessage
                        className="error"
                        name="createdDate"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="keyHash" className="nice-form-control">
                      <b>
                        Key Hash:
                        {touched.keyHash &&
                         !errors.keyHash && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="keyHash"
                            value={values?.keyHash}
                            placeholder="Key Hash"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="keyHash"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastAccessedById" className="nice-form-control">
                      <b>
                        Last Accessed By Id:
                        {touched.lastAccessedById &&
                         !errors.lastAccessedById && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="lastAccessedById"
                            value={values?.lastAccessedById}
                            placeholder="Last Accessed By Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="lastAccessedById"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastAccessedDate" className="nice-form-control">
                      <b>
                        Last Accessed Date:
                        {touched.lastAccessedDate &&
                         !errors.lastAccessedDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                          {/* DATETIME FIELD */}
                          <Field
                            name="lastAccessedDate"
                            type="datetime-local"
                            value={values.lastAccessedDate ? 
                              new Date(values.lastAccessedDate).toISOString().slice(0, 16) : 
                              ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('lastAccessedDate', true);
                              const v = e.target.value;
                              setFieldValue('lastAccessedDate', v ? new Date(v).toISOString() : '');
                            }}
                            className={
                              errors.lastAccessedDate
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />

                      <ErrorMessage
                        className="error"
                        name="lastAccessedDate"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastModifiedById" className="nice-form-control">
                      <b>
                        Last Modified By Id:
                        {touched.lastModifiedById &&
                         !errors.lastModifiedById && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="lastModifiedById"
                            value={values?.lastModifiedById}
                            placeholder="Last Modified By Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />







                      <ErrorMessage
                        className="error"
                        name="lastModifiedById"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastModifiedDate" className="nice-form-control">
                      <b>
                        Last Modified Date:
                        {touched.lastModifiedDate &&
                         !errors.lastModifiedDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                          {/* DATETIME FIELD */}
                          <Field
                            name="lastModifiedDate"
                            type="datetime-local"
                            value={values.lastModifiedDate ? 
                              new Date(values.lastModifiedDate).toISOString().slice(0, 16) : 
                              ''}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                              setFieldTouched('lastModifiedDate', true);
                              const v = e.target.value;
                              setFieldValue('lastModifiedDate', v ? new Date(v).toISOString() : '');
                            }}
                            className={
                              errors.lastModifiedDate
                                ? 'form-control field-error'
                                : 'nice-form-control form-control'
                            }
                          />

                      <ErrorMessage
                        className="error"
                        name="lastModifiedDate"
                        component="span"
                      />
                    </label>
                    <br />

                  {/* SUBMIT BUTTON */}
                  <CoolButton
                    variant={isValid ? (isSubmitting ? 'disabled' : 'success') : 'warning'}
                    type="submit"
                    disabled={!isValid || isSubmitting}
                  >
                    {isSubmitting && (<span style={ { float: 'left', minHeight: 0 } }><LoadingSpinner label="" size={18} /></span>)}
                    <FaCheckCircle size={28} /> Create New Quota
                  </CoolButton>

                  {addQuotaResult.error && (
                    <div className="error" style={ { marginTop: 12 }}>
                      {JSON.stringify('data' in (addQuotaResult as any).error ? (addQuotaResult as any).error.data : (addQuotaResult as any).error)}
                    </div>
                  )}
                </Accordion.Body>
              </Accordion.Item>

            {/* Debug/Dev Accordion */}
              <Accordion.Item eventKey="0">
                <Accordion.Header>
                  <FaCogs size={28} /> &nbsp;Server Messages
                </Accordion.Header>
                <Accordion.Body>
                  errors: {JSON.stringify(errors)}
                  <br />
                  addQuotaResult: {JSON.stringify(addQuotaResult)}
                </Accordion.Body>
              </Accordion.Item>

            </Accordion>
          </form>
        )}
      </Formik>

      {/* Permission Management Dialog */}
      {createdObjectId && (
        <PermissionDialog
          objectType="com.valkyrlabs.model.Quota"
          objectId={createdObjectId}
          isVisible={showPermissionDialog}
          onClose={handlePermissionDialogClose}
          onSave={handlePermissionsSave}
          currentUser={currentUser}
        />
      )}
    </div>
  );
};

/*
lowercase resourcetypelookup
uppercase RESOURCETYPELOOKUP
snakecase resource_type_lookup
pascalcase ResourceTypeLookup
camelcase resourceTypeLookup
kebabcase resource-type-lookup
*/

const ResourceTypeLookup = () => {
  return (
    <>
      <option value='WORKFLOW_EXECUTION' label="Workflow Execution" />
      <option value='API_CALL' label="Api Call" />
      <option value='LLM_REQUEST' label="Llm Request" />
      <option value='EMAIL_SEND' label="Email Send" />
      <option value='FILE_UPLOAD' label="File Upload" />
    </>
  );
};



/* Export the generated form */
export default QuotaForm;

