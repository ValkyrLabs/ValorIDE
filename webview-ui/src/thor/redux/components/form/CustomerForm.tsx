import { ErrorMessage, Field, Formik, FormikHelpers, FormikValues } from "formik"
import React from "react"
import { Form as BSForm, Accordion, Col, Nav, Row, Spinner } from "react-bootstrap"
import { FaCheckCircle, FaCogs, FaRegPlusSquare } from "react-icons/fa"
import CoolButton from "../../../../components/CoolButton"
import * as Yup from "yup"

import { Customer, CustomerStatusEnum, CustomerRoleEnum } from "../../../model"

import { useAddCustomerMutation } from "../../services/CustomerService"

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-05-08T17:49:28.351161-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelForm.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description:
Represents a customer entity for CRM.
*/

/* -----------------------------------------------------
   ENUM VALIDATION ARRAYS (Yup oneOf checks), if any
-------------------------------------------------------- */
const StatusValidation = () => {
	return ["active", "inactive", "prospect"]
}
const RoleValidation = () => {
	return [
		"CxO",
		"Engineering",
		"Project Management",
		"Management",
		"Support Staff",
		"QA",
		"Self-Employed",
		"Consultant - Firm",
		"Consultant - Independent",
		"Contractor",
		"Partner",
		"Associate",
		"Reseller",
		"Hobbyist",
		"Student",
		"legal",
		"assessment",
		"regulatory",
		"financial",
		"management",
		"marketing",
		"sales",
		"procurement",
		"technical",
	]
}

/* -----------------------------------------------------
   YUP VALIDATION SCHEMA
   (Skip read-only fields and container types)
-------------------------------------------------------- */
const validationSchema = Yup.object().shape({
	principalId: Yup.string()

		.required("principalId is required."),
	status: Yup.mixed()
		.oneOf(StatusValidation(), "Invalid value for status")

		.notRequired(),

	role: Yup.mixed()
		.oneOf(RoleValidation(), "Invalid value for role")

		.notRequired(),

	id: Yup.string(),

	ownerId: Yup.string(),

	createdDate: Yup.date(),

	keyHash: Yup.string(),

	lastAccessedById: Yup.string(),

	lastAccessedDate: Yup.date(),

	lastModifiedById: Yup.string(),

	lastModifiedDate: Yup.date(),
})

/* -----------------------------------------------------
   COMPONENT
-------------------------------------------------------- */
const CustomerForm: React.FC = () => {
	const [addCustomer, addCustomerResult] = useAddCustomerMutation()

	/* INITIAL VALUES - skip read-only fields */
	const initialValues: Partial<Customer> = {
		principalId: "null",

		status: CustomerStatusEnum[Object.keys(CustomerStatusEnum)[0]],

		role: CustomerRoleEnum[Object.keys(CustomerRoleEnum)[0]],

		id: "68531f76-0396-4d11-8e38-db4700c0c921",

		ownerId: "9bffb175-3a51-4ade-bd45-633cf3b3b648",

		keyHash: "null",

		lastAccessedById: "99330cf8-b6b2-4c00-9128-0c0d424dd44b",

		lastModifiedById: "84b1e40e-c012-4417-a14d-05e1dfe7fa68",
	}

	/* SUBMIT HANDLER */
	const handleSubmit = (values: FormikValues, { setSubmitting }: FormikHelpers<Customer>) => {
		// Simulate slow network or do what you need:
		setTimeout(() => {
			console.log("Customer form values:", values)
			addCustomer(values)
			setSubmitting(false)
		}, 500)
	}

	return (
		<div>
			<Formik
				validateOnBlur={true}
				initialValues={initialValues as Customer}
				validationSchema={validationSchema}
				onSubmit={handleSubmit}>
				{({ isSubmitting, isValid, errors, setFieldValue, touched, setFieldTouched, handleSubmit }) => (
					<form onSubmit={handleSubmit} className="form">
						<Accordion defaultActiveKey="1">
							{/* Debug/Dev Accordion */}
							<Accordion.Item eventKey="0">
								<Accordion.Header>
									<FaCogs size={36} />
								</Accordion.Header>
								<Accordion.Body>
									errors: {JSON.stringify(errors)}
									<br />
									touched: {JSON.stringify(touched)}
									<br />
									addCustomerResult: {JSON.stringify(addCustomerResult)}
								</Accordion.Body>
							</Accordion.Item>

							{/* Editable Fields (NON-read-only) */}
							<Accordion.Item eventKey="1">
								<Accordion.Header>
									<FaRegPlusSquare size={36} /> Add New Customer
								</Accordion.Header>
								<Accordion.Body>
									<label htmlFor="principalId" className="nice-form-control">
										<b>
											Principal Id:
											{touched.principalId && !errors.principalId && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="principalId"
											type="text"
											className={
												errors.principalId ? "form-control field-error" : "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="principalId" component="span" />
									</label>
									<br />

									<label htmlFor="status" className="nice-form-control">
										<b>
											Status:
											{touched.status && !errors.status && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* ENUM DROPDOWN */}
										<BSForm.Select
											name="status"
											className={
												errors.status ? "form-control field-error" : "nice-form-control form-control"
											}
											onChange={(e) => {
												setFieldTouched("status", true)
												setFieldValue("status", e.target.value)
											}}>
											<option value="" label="Select Status" />
											<StatusLookup />
										</BSForm.Select>

										<ErrorMessage className="error" name="status" component="span" />
									</label>
									<br />

									<label htmlFor="role" className="nice-form-control">
										<b>
											Role:
											{touched.role && !errors.role && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* ENUM DROPDOWN */}
										<BSForm.Select
											name="role"
											className={
												errors.role ? "form-control field-error" : "nice-form-control form-control"
											}
											onChange={(e) => {
												setFieldTouched("role", true)
												setFieldValue("role", e.target.value)
											}}>
											<option value="" label="Select Role" />
											<RoleLookup />
										</BSForm.Select>

										<ErrorMessage className="error" name="role" component="span" />
									</label>
									<br />

									<label htmlFor="id" className="nice-form-control">
										<b>
											Id:
											{touched.id && !errors.id && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="id"
											type="text"
											className={errors.id ? "form-control field-error" : "nice-form-control form-control"}
										/>

										<ErrorMessage className="error" name="id" component="span" />
									</label>
									<br />

									<label htmlFor="ownerId" className="nice-form-control">
										<b>
											Owner Id:
											{touched.ownerId && !errors.ownerId && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="ownerId"
											type="text"
											className={
												errors.ownerId ? "form-control field-error" : "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="ownerId" component="span" />
									</label>
									<br />

									<label htmlFor="createdDate" className="nice-form-control">
										<b>
											Created Date:
											{touched.createdDate && !errors.createdDate && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										<ErrorMessage className="error" name="createdDate" component="span" />
									</label>
									<br />

									<label htmlFor="keyHash" className="nice-form-control">
										<b>
											Key Hash:
											{touched.keyHash && !errors.keyHash && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="keyHash"
											type="text"
											className={
												errors.keyHash ? "form-control field-error" : "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="keyHash" component="span" />
									</label>
									<br />

									<label htmlFor="lastAccessedById" className="nice-form-control">
										<b>
											Last Accessed By Id:
											{touched.lastAccessedById && !errors.lastAccessedById && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="lastAccessedById"
											type="text"
											className={
												errors.lastAccessedById
													? "form-control field-error"
													: "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="lastAccessedById" component="span" />
									</label>
									<br />

									<label htmlFor="lastAccessedDate" className="nice-form-control">
										<b>
											Last Accessed Date:
											{touched.lastAccessedDate && !errors.lastAccessedDate && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										<ErrorMessage className="error" name="lastAccessedDate" component="span" />
									</label>
									<br />

									<label htmlFor="lastModifiedById" className="nice-form-control">
										<b>
											Last Modified By Id:
											{touched.lastModifiedById && !errors.lastModifiedById && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="lastModifiedById"
											type="text"
											className={
												errors.lastModifiedById
													? "form-control field-error"
													: "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="lastModifiedById" component="span" />
									</label>
									<br />

									<label htmlFor="lastModifiedDate" className="nice-form-control">
										<b>
											Last Modified Date:
											{touched.lastModifiedDate && !errors.lastModifiedDate && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										<ErrorMessage className="error" name="lastModifiedDate" component="span" />
									</label>
									<br />

									{/* SUBMIT BUTTON */}
									<CoolButton
										variant={touched && isValid ? (isSubmitting ? "disabled" : "success") : "warning"}
										type="submit">
										{isSubmitting && (
											<Spinner
												style={{ float: "left" }}
												as="span"
												animation="grow"
												variant="light"
												aria-hidden="true"
											/>
										)}
										<FaCheckCircle size={30} /> Create New Customer
									</CoolButton>
								</Accordion.Body>
							</Accordion.Item>

							{/* Read-Only System Fields */}
							<Accordion.Item eventKey="2">
								<Accordion.Header>System Fields (Read Only)</Accordion.Header>
								<Accordion.Body>
									<Row></Row>
								</Accordion.Body>
							</Accordion.Item>
						</Accordion>
					</form>
				)}
			</Formik>
		</div>
	)
}

/*
lowercase statuslookup
uppercase STATUSLOOKUP
snakecase status_lookup
pascalcase StatusLookup
camelcase statusLookup
kebabcase status-lookup
*/

const StatusLookup = () => {
	return (
		<>
			<option value="active" label="Active" />
			<option value="inactive" label="Inactive" />
			<option value="prospect" label="Prospect" />
		</>
	)
}

/*
lowercase rolelookup
uppercase ROLELOOKUP
snakecase role_lookup
pascalcase RoleLookup
camelcase roleLookup
kebabcase role-lookup
*/

const RoleLookup = () => {
	return (
		<>
			<option value="CxO" label="Cx O" />
			<option value="Engineering" label="Engineering" />
			<option value="Project Management" label="Project Management" />
			<option value="Management" label="Management" />
			<option value="Support Staff" label="Support Staff" />
			<option value="QA" label="Qa" />
			<option value="Self-Employed" label="Self Employed" />
			<option value="Consultant - Firm" label="Consultant Firm" />
			<option value="Consultant - Independent" label="Consultant Independent" />
			<option value="Contractor" label="Contractor" />
			<option value="Partner" label="Partner" />
			<option value="Associate" label="Associate" />
			<option value="Reseller" label="Reseller" />
			<option value="Hobbyist" label="Hobbyist" />
			<option value="Student" label="Student" />
			<option value="legal" label="Legal" />
			<option value="assessment" label="Assessment" />
			<option value="regulatory" label="Regulatory" />
			<option value="financial" label="Financial" />
			<option value="management" label="Management 2" />
			<option value="marketing" label="Marketing" />
			<option value="sales" label="Sales" />
			<option value="procurement" label="Procurement" />
			<option value="technical" label="Technical" />
		</>
	)
}

/* Export the generated form */
export default CustomerForm
