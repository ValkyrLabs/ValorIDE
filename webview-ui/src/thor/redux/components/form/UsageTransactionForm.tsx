import { ErrorMessage, Field, Formik, FormikHelpers, FormikValues } from "formik"
import React from "react"
import { Form as BSForm, Accordion, Col, Nav, Row, Spinner } from "react-bootstrap"
import { FaCheckCircle, FaCogs, FaRegPlusSquare } from "react-icons/fa"
import CoolButton from "../../../../components/CoolButton"
import * as Yup from "yup"

import { UsageTransaction } from "../../../model"

import { useAddUsageTransactionMutation } from "../../services/UsageTransactionService"

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-05-08T17:49:28.351161-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelForm.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description:
A record of credits spent on a model invocation
*/

/* -----------------------------------------------------
   ENUM VALIDATION ARRAYS (Yup oneOf checks), if any
-------------------------------------------------------- */

/* -----------------------------------------------------
   YUP VALIDATION SCHEMA
   (Skip read-only fields and container types)
-------------------------------------------------------- */
const validationSchema = Yup.object().shape({
	spentAt: Yup.date()

		.required("spentAt is required."),
	credits: Yup.number()

		.required("credits is required."),
	modelProvider: Yup.string()

		.required("modelProvider is required."),
	model: Yup.string()

		.required("model is required."),
	promptTokens: Yup.number()

		.required("promptTokens is required."),
	completionTokens: Yup.number()

		.required("completionTokens is required."),
	id: Yup.string(),

	ownerId: Yup.string(),

	createdDate: Yup.date(),

	keyHash: Yup.string(),

	lastAccessedById: Yup.string(),

	lastAccessedDate: Yup.date(),

	lastModifiedById: Yup.string(),

	lastModifiedDate: Yup.date(),
})

/* -----------------------------------------------------
   COMPONENT
-------------------------------------------------------- */
const UsageTransactionForm: React.FC = () => {
	const [addUsageTransaction, addUsageTransactionResult] = useAddUsageTransactionMutation()

	/* INITIAL VALUES - skip read-only fields */
	const initialValues: Partial<UsageTransaction> = {
		modelProvider: "null",

		model: "null",

		promptTokens: 0,

		completionTokens: 0,

		id: "251478e8-47cd-4a21-8543-33c820898dcb",

		ownerId: "1f4a75d2-a666-4a44-b09a-2f1d594e740b",

		keyHash: "null",

		lastAccessedById: "2f17dc90-6cef-475c-bb3d-8ad500eef2f8",

		lastModifiedById: "c6ed9ce2-efb1-4e1a-bfc0-e39d5e73e916",
	}

	/* SUBMIT HANDLER */
	const handleSubmit = (values: FormikValues, { setSubmitting }: FormikHelpers<UsageTransaction>) => {
		// Simulate slow network or do what you need:
		setTimeout(() => {
			console.log("UsageTransaction form values:", values)
			addUsageTransaction(values)
			setSubmitting(false)
		}, 500)
	}

	return (
		<div>
			<Formik
				validateOnBlur={true}
				initialValues={initialValues as UsageTransaction}
				validationSchema={validationSchema}
				onSubmit={handleSubmit}>
				{({ isSubmitting, isValid, errors, setFieldValue, touched, setFieldTouched, handleSubmit }) => (
					<form onSubmit={handleSubmit} className="form">
						<Accordion defaultActiveKey="1">
							{/* Debug/Dev Accordion */}
							<Accordion.Item eventKey="0">
								<Accordion.Header>
									<FaCogs size={36} />
								</Accordion.Header>
								<Accordion.Body>
									errors: {JSON.stringify(errors)}
									<br />
									touched: {JSON.stringify(touched)}
									<br />
									addUsageTransactionResult: {JSON.stringify(addUsageTransactionResult)}
								</Accordion.Body>
							</Accordion.Item>

							{/* Editable Fields (NON-read-only) */}
							<Accordion.Item eventKey="1">
								<Accordion.Header>
									<FaRegPlusSquare size={36} /> Add New UsageTransaction
								</Accordion.Header>
								<Accordion.Body>
									<label htmlFor="spentAt" className="nice-form-control">
										<b>
											Spent At:
											{touched.spentAt && !errors.spentAt && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										<ErrorMessage className="error" name="spentAt" component="span" />
									</label>
									<br />

									<label htmlFor="credits" className="nice-form-control">
										<b>
											Credits:
											{touched.credits && !errors.credits && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										<ErrorMessage className="error" name="credits" component="span" />
									</label>
									<br />

									<label htmlFor="modelProvider" className="nice-form-control">
										<b>
											Model Provider:
											{touched.modelProvider && !errors.modelProvider && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="modelProvider"
											type="text"
											className={
												errors.modelProvider
													? "form-control field-error"
													: "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="modelProvider" component="span" />
									</label>
									<br />

									<label htmlFor="model" className="nice-form-control">
										<b>
											Model:
											{touched.model && !errors.model && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="model"
											type="text"
											className={
												errors.model ? "form-control field-error" : "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="model" component="span" />
									</label>
									<br />

									<label htmlFor="promptTokens" className="nice-form-control">
										<b>
											Prompt Tokens:
											{touched.promptTokens && !errors.promptTokens && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* INTEGER FIELD */}
										<Field
											name="promptTokens"
											type="text"
											className={
												errors.promptTokens
													? "form-control field-error"
													: "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="promptTokens" component="span" />
									</label>
									<br />

									<label htmlFor="completionTokens" className="nice-form-control">
										<b>
											Completion Tokens:
											{touched.completionTokens && !errors.completionTokens && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* INTEGER FIELD */}
										<Field
											name="completionTokens"
											type="text"
											className={
												errors.completionTokens
													? "form-control field-error"
													: "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="completionTokens" component="span" />
									</label>
									<br />

									<label htmlFor="id" className="nice-form-control">
										<b>
											Id:
											{touched.id && !errors.id && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="id"
											type="text"
											className={errors.id ? "form-control field-error" : "nice-form-control form-control"}
										/>

										<ErrorMessage className="error" name="id" component="span" />
									</label>
									<br />

									<label htmlFor="ownerId" className="nice-form-control">
										<b>
											Owner Id:
											{touched.ownerId && !errors.ownerId && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="ownerId"
											type="text"
											className={
												errors.ownerId ? "form-control field-error" : "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="ownerId" component="span" />
									</label>
									<br />

									<label htmlFor="createdDate" className="nice-form-control">
										<b>
											Created Date:
											{touched.createdDate && !errors.createdDate && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										<ErrorMessage className="error" name="createdDate" component="span" />
									</label>
									<br />

									<label htmlFor="keyHash" className="nice-form-control">
										<b>
											Key Hash:
											{touched.keyHash && !errors.keyHash && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="keyHash"
											type="text"
											className={
												errors.keyHash ? "form-control field-error" : "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="keyHash" component="span" />
									</label>
									<br />

									<label htmlFor="lastAccessedById" className="nice-form-control">
										<b>
											Last Accessed By Id:
											{touched.lastAccessedById && !errors.lastAccessedById && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="lastAccessedById"
											type="text"
											className={
												errors.lastAccessedById
													? "form-control field-error"
													: "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="lastAccessedById" component="span" />
									</label>
									<br />

									<label htmlFor="lastAccessedDate" className="nice-form-control">
										<b>
											Last Accessed Date:
											{touched.lastAccessedDate && !errors.lastAccessedDate && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										<ErrorMessage className="error" name="lastAccessedDate" component="span" />
									</label>
									<br />

									<label htmlFor="lastModifiedById" className="nice-form-control">
										<b>
											Last Modified By Id:
											{touched.lastModifiedById && !errors.lastModifiedById && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="lastModifiedById"
											type="text"
											className={
												errors.lastModifiedById
													? "form-control field-error"
													: "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="lastModifiedById" component="span" />
									</label>
									<br />

									<label htmlFor="lastModifiedDate" className="nice-form-control">
										<b>
											Last Modified Date:
											{touched.lastModifiedDate && !errors.lastModifiedDate && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										<ErrorMessage className="error" name="lastModifiedDate" component="span" />
									</label>
									<br />

									{/* SUBMIT BUTTON */}
									<CoolButton
										variant={touched && isValid ? (isSubmitting ? "disabled" : "success") : "warning"}
										type="submit">
										{isSubmitting && (
											<Spinner
												style={{ float: "left" }}
												as="span"
												animation="grow"
												variant="light"
												aria-hidden="true"
											/>
										)}
										<FaCheckCircle size={30} /> Create New UsageTransaction
									</CoolButton>
								</Accordion.Body>
							</Accordion.Item>

							{/* Read-Only System Fields */}
							<Accordion.Item eventKey="2">
								<Accordion.Header>System Fields (Read Only)</Accordion.Header>
								<Accordion.Body>
									<Row></Row>
								</Accordion.Body>
							</Accordion.Item>
						</Accordion>
					</form>
				)}
			</Formik>
		</div>
	)
}

/* Export the generated form */
export default UsageTransactionForm
