import { ErrorMessage, Field, Formik, FormikHelpers, FormikValues } from "formik"
import React from "react"
import { Form as BSForm, Accordion, Col, Nav, Row, Spinner } from "react-bootstrap"
import { FaCheckCircle, FaCogs, FaRegPlusSquare } from "react-icons/fa"
import CoolButton from "../../../../components/CoolButton"
import * as Yup from "yup"

import { Task, TaskRoleEnum, TaskStatusEnum } from "../../../model"

import { useAddTaskMutation } from "../../services/TaskService"

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-05-08T17:49:28.351161-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelForm.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description:
ValkyrAI Task object manages execution and state of automation workflows
*/

/* -----------------------------------------------------
   ENUM VALIDATION ARRAYS (Yup oneOf checks), if any
-------------------------------------------------------- */
const RoleValidation = () => {
	return ["user", "assistant"]
}
const StatusValidation = () => {
	return ["running", "stopped", "ready", "good", "warning", "error", "disabled"]
}

/* -----------------------------------------------------
   YUP VALIDATION SCHEMA
   (Skip read-only fields and container types)
-------------------------------------------------------- */
const validationSchema = Yup.object().shape({
	description: Yup.string(),

	workflowId: Yup.string(),

	role: Yup.mixed()
		.oneOf(RoleValidation(), "Invalid value for role")

		.notRequired(),

	taskOrder: Yup.number(),

	status: Yup.mixed()
		.oneOf(StatusValidation(), "Invalid value for status")

		.notRequired(),

	id: Yup.string(),

	ownerId: Yup.string(),

	createdDate: Yup.date(),

	keyHash: Yup.string(),

	lastAccessedById: Yup.string(),

	lastAccessedDate: Yup.date(),

	lastModifiedById: Yup.string(),

	lastModifiedDate: Yup.date(),
})

/* -----------------------------------------------------
   COMPONENT
-------------------------------------------------------- */
const TaskForm: React.FC = () => {
	const [addTask, addTaskResult] = useAddTaskMutation()

	/* INITIAL VALUES - skip read-only fields */
	const initialValues: Partial<Task> = {
		description: "null",

		workflowId: "null",

		role: TaskRoleEnum[Object.keys(TaskRoleEnum)[0]],

		taskOrder: 0.0,

		status: TaskStatusEnum[Object.keys(TaskStatusEnum)[0]],

		id: "b648071d-cfcd-4dbd-b59b-dbd3cd7626bc",

		ownerId: "3cd8c4bc-21fa-4a58-a2a3-a1d34f0088d2",

		keyHash: "null",

		lastAccessedById: "f603dfd0-710e-42cf-b6a1-e921753853d2",

		lastModifiedById: "1f885271-eff5-4e18-a21e-36b93b6e4145",
	}

	/* SUBMIT HANDLER */
	const handleSubmit = (values: FormikValues, { setSubmitting }: FormikHelpers<Task>) => {
		// Simulate slow network or do what you need:
		setTimeout(() => {
			console.log("Task form values:", values)
			addTask(values)
			setSubmitting(false)
		}, 500)
	}

	return (
		<div>
			<Formik
				validateOnBlur={true}
				initialValues={initialValues as Task}
				validationSchema={validationSchema}
				onSubmit={handleSubmit}>
				{({ isSubmitting, isValid, errors, setFieldValue, touched, setFieldTouched, handleSubmit }) => (
					<form onSubmit={handleSubmit} className="form">
						<Accordion defaultActiveKey="1">
							{/* Debug/Dev Accordion */}
							<Accordion.Item eventKey="0">
								<Accordion.Header>
									<FaCogs size={36} />
								</Accordion.Header>
								<Accordion.Body>
									errors: {JSON.stringify(errors)}
									<br />
									touched: {JSON.stringify(touched)}
									<br />
									addTaskResult: {JSON.stringify(addTaskResult)}
								</Accordion.Body>
							</Accordion.Item>

							{/* Editable Fields (NON-read-only) */}
							<Accordion.Item eventKey="1">
								<Accordion.Header>
									<FaRegPlusSquare size={36} /> Add New Task
								</Accordion.Header>
								<Accordion.Body>
									<label htmlFor="description" className="nice-form-control">
										<b>
											Description:
											{touched.description && !errors.description && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="description"
											type="text"
											className={
												errors.description ? "form-control field-error" : "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="description" component="span" />
									</label>
									<br />

									<label htmlFor="workflowId" className="nice-form-control">
										<b>
											Workflow Id:
											{touched.workflowId && !errors.workflowId && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="workflowId"
											type="text"
											className={
												errors.workflowId ? "form-control field-error" : "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="workflowId" component="span" />
									</label>
									<br />

									<label htmlFor="role" className="nice-form-control">
										<b>
											Role:
											{touched.role && !errors.role && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* ENUM DROPDOWN */}
										<BSForm.Select
											name="role"
											className={
												errors.role ? "form-control field-error" : "nice-form-control form-control"
											}
											onChange={(e) => {
												setFieldTouched("role", true)
												setFieldValue("role", e.target.value)
											}}>
											<option value="" label="Select Role" />
											<RoleLookup />
										</BSForm.Select>

										<ErrorMessage className="error" name="role" component="span" />
									</label>
									<br />

									<label htmlFor="taskOrder" className="nice-form-control">
										<b>
											Task Order:
											{touched.taskOrder && !errors.taskOrder && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* FLOAT FIELD */}
										<Field
											name="taskOrder"
											type="text"
											className={
												errors.taskOrder ? "form-control field-error" : "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="taskOrder" component="span" />
									</label>
									<br />

									<label htmlFor="status" className="nice-form-control">
										<b>
											Status:
											{touched.status && !errors.status && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* ENUM DROPDOWN */}
										<BSForm.Select
											name="status"
											className={
												errors.status ? "form-control field-error" : "nice-form-control form-control"
											}
											onChange={(e) => {
												setFieldTouched("status", true)
												setFieldValue("status", e.target.value)
											}}>
											<option value="" label="Select Status" />
											<StatusLookup />
										</BSForm.Select>

										<ErrorMessage className="error" name="status" component="span" />
									</label>
									<br />

									<label htmlFor="id" className="nice-form-control">
										<b>
											Id:
											{touched.id && !errors.id && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="id"
											type="text"
											className={errors.id ? "form-control field-error" : "nice-form-control form-control"}
										/>

										<ErrorMessage className="error" name="id" component="span" />
									</label>
									<br />

									<label htmlFor="ownerId" className="nice-form-control">
										<b>
											Owner Id:
											{touched.ownerId && !errors.ownerId && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="ownerId"
											type="text"
											className={
												errors.ownerId ? "form-control field-error" : "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="ownerId" component="span" />
									</label>
									<br />

									<label htmlFor="createdDate" className="nice-form-control">
										<b>
											Created Date:
											{touched.createdDate && !errors.createdDate && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										<ErrorMessage className="error" name="createdDate" component="span" />
									</label>
									<br />

									<label htmlFor="keyHash" className="nice-form-control">
										<b>
											Key Hash:
											{touched.keyHash && !errors.keyHash && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="keyHash"
											type="text"
											className={
												errors.keyHash ? "form-control field-error" : "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="keyHash" component="span" />
									</label>
									<br />

									<label htmlFor="lastAccessedById" className="nice-form-control">
										<b>
											Last Accessed By Id:
											{touched.lastAccessedById && !errors.lastAccessedById && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="lastAccessedById"
											type="text"
											className={
												errors.lastAccessedById
													? "form-control field-error"
													: "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="lastAccessedById" component="span" />
									</label>
									<br />

									<label htmlFor="lastAccessedDate" className="nice-form-control">
										<b>
											Last Accessed Date:
											{touched.lastAccessedDate && !errors.lastAccessedDate && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										<ErrorMessage className="error" name="lastAccessedDate" component="span" />
									</label>
									<br />

									<label htmlFor="lastModifiedById" className="nice-form-control">
										<b>
											Last Modified By Id:
											{touched.lastModifiedById && !errors.lastModifiedById && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="lastModifiedById"
											type="text"
											className={
												errors.lastModifiedById
													? "form-control field-error"
													: "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="lastModifiedById" component="span" />
									</label>
									<br />

									<label htmlFor="lastModifiedDate" className="nice-form-control">
										<b>
											Last Modified Date:
											{touched.lastModifiedDate && !errors.lastModifiedDate && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										<ErrorMessage className="error" name="lastModifiedDate" component="span" />
									</label>
									<br />

									{/* SUBMIT BUTTON */}
									<CoolButton
										variant={touched && isValid ? (isSubmitting ? "disabled" : "success") : "warning"}
										type="submit">
										{isSubmitting && (
											<Spinner
												style={{ float: "left" }}
												as="span"
												animation="grow"
												variant="light"
												aria-hidden="true"
											/>
										)}
										<FaCheckCircle size={30} /> Create New Task
									</CoolButton>
								</Accordion.Body>
							</Accordion.Item>

							{/* Read-Only System Fields */}
							<Accordion.Item eventKey="2">
								<Accordion.Header>System Fields (Read Only)</Accordion.Header>
								<Accordion.Body>
									<Row></Row>
								</Accordion.Body>
							</Accordion.Item>
						</Accordion>
					</form>
				)}
			</Formik>
		</div>
	)
}

/*
lowercase rolelookup
uppercase ROLELOOKUP
snakecase role_lookup
pascalcase RoleLookup
camelcase roleLookup
kebabcase role-lookup
*/

const RoleLookup = () => {
	return (
		<>
			<option value="user" label="User" />
			<option value="assistant" label="Assistant" />
		</>
	)
}

/*
lowercase statuslookup
uppercase STATUSLOOKUP
snakecase status_lookup
pascalcase StatusLookup
camelcase statusLookup
kebabcase status-lookup
*/

const StatusLookup = () => {
	return (
		<>
			<option value="running" label="Running" />
			<option value="stopped" label="Stopped" />
			<option value="ready" label="Ready" />
			<option value="good" label="Good" />
			<option value="warning" label="Warning" />
			<option value="error" label="Error" />
			<option value="disabled" label="Disabled" />
		</>
	)
}

/* Export the generated form */
export default TaskForm
