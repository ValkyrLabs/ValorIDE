import { ErrorMessage, Field, Formik, FormikHelpers, FormikValues } from 'formik';
import React, { useState } from 'react';
import {
  Form as BSForm,
  Accordion,
  Col,
  Row,
  Spinner
} from 'react-bootstrap';
import LoadingSpinner from '@valkyr/component-library/LoadingSpinner';
import { FaCheckCircle, FaCogs, FaRegPlusSquare } from 'react-icons/fa';
import CoolButton from '@valkyr/component-library/CoolButton';
import * as Yup from 'yup';
import { SmartField } from '@valkyr/component-library/ForeignKey/SmartField';

import { PermissionDialog } from '@valkyr/component-library/PermissionDialog';
import { AclGrantRequest, PermissionType } from '@valkyr/component-library/PermissionDialog/types';


import {
  Stack,
  StackCategoryEnum,
  StackLanguageEnum,
  StackTemplateRepoEnum,
  StackStatusEnum,
} from '@thor/model';

import { useAddStackMutation } from '../../services/StackService';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-09-10T13:59:56.351525-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelForm.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description:
A Stack is a runnable configuration for an Application
*/

/* -----------------------------------------------------
   ENUM VALIDATION ARRAYS (Yup oneOf checks), if any
-------------------------------------------------------- */
const CategoryValidation = () => {
  return [
    'Full Stack',
    'Front End',
    'API',
    'Data Library',
    'Infrastructure',
    'Documentation',
  ];
};
const LanguageValidation = () => {
  return [
    'valkyrai_java_spring',
    'valkyrai_kotlin_spring',
  ];
};
const TemplateRepoValidation = () => {
  return [
    'java_spring',
    'typescript_rtk_bootstrap',
  ];
};
const StatusValidation = () => {
  return [
    'available',
    'syntax_error',
    'compilation_error',
    'runtime_error',
    'database_error',
    'locked',
  ];
};

/* -----------------------------------------------------
   YUP VALIDATION SCHEMA (skip read-only fields)
-------------------------------------------------------- */
const asNumber = (schema: Yup.NumberSchema) =>
  schema.transform((val, orig) => (orig === '' || orig === null ? undefined : val));

const validationSchema = Yup.object().shape({
        name: Yup.string().required("name is required."),
        schemaData: Yup.string().required("schemaData is required."),
        execModuleId: Yup.string(),
      category: Yup.mixed()
        .oneOf(CategoryValidation(), "Invalid value for category")
        ,
        artifactId: Yup.string(),
        applicationId: Yup.string(),
        adminServerHost: Yup.string(),
        adminServerPort: Yup.string(),
        hostName: Yup.string(),
        hostPort: Yup.string(),
        orgName: Yup.string(),
        gitUser: Yup.string(),
        gitRepo: Yup.string(),
        skipSwaggerGen: Yup.boolean(),
        skipJavaGen: Yup.boolean(),
        skipDbGen: Yup.boolean(),
        skipReactGen: Yup.boolean(),
        dbGenDropTable: Yup.boolean(),
        thorApiSecureKey: Yup.string(),
        dbUrl: Yup.string(),
        dbName: Yup.string(),
        dbUser: Yup.string(),
        dbPassword: Yup.string(),
        schemaName: Yup.string(),
      language: Yup.mixed()
        .oneOf(LanguageValidation(), "Invalid value for language")
        ,
      templateRepo: Yup.mixed()
        .oneOf(TemplateRepoValidation(), "Invalid value for templateRepo")
        ,
        schemaFileName: Yup.string(),
      status: Yup.mixed()
        .oneOf(StatusValidation(), "Invalid value for status")
        ,
        id: Yup.string(),
        ownerId: Yup.string(),
        keyHash: Yup.string(),
        lastAccessedById: Yup.string(),
        lastModifiedById: Yup.string(),
});

/* -----------------------------------------------------
   COMPONENT
-------------------------------------------------------- */
const StackForm: React.FC = () => {
  const [addStack, addStackResult] = useAddStackMutation();

  // Permission Management State
  const [showPermissionDialog, setShowPermissionDialog] = useState(false);
  const [createdObjectId, setCreatedObjectId] = useState<string | null>(null);

  // Mock current user - in real implementation, this would come from auth context
  const currentUser = {
    username: 'current_user',
    permissions: {
      isOwner: true,
      isAdmin: true,
      canGrantPermissions: true,
      permissions: [PermissionType.READ, PermissionType.WRITE, PermissionType.CREATE, PermissionType.DELETE, PermissionType.ADMINISTRATION],
    },
  };

  /* -----------------------------------------------------
     INITIAL VALUES - only NON read-only fields
  -------------------------------------------------------- */
  const initialValues: Partial<Stack> = {
          name: '',
          schemaData: '',
          execModuleId: '',
        category: undefined,
          artifactId: '',
          applicationId: '',
          adminServerHost: '',
          adminServerPort: '',
          hostName: '',
          hostPort: '',
          orgName: '',
          gitUser: '',
          gitRepo: '',
          skipSwaggerGen: false,
          skipJavaGen: false,
          skipDbGen: false,
          skipReactGen: false,
          dbGenDropTable: false,
          thorApiSecureKey: '',
          dbUrl: '',
          dbName: '',
          dbUser: '',
          dbPassword: '',
          schemaName: '',
        language: undefined,
        templateRepo: undefined,
          schemaFileName: '',
        status: undefined,
          id: '',
          ownerId: '',
          keyHash: '',
          lastAccessedById: '',
          lastModifiedById: '',
  };

  // Permission Management Handlers
  const handleManagePermissions = (objectId: string) => {
    setCreatedObjectId(objectId);
    setShowPermissionDialog(true);
  };

  const handlePermissionDialogClose = () => {
    setShowPermissionDialog(false);
    setCreatedObjectId(null);
  };

  const handlePermissionsSave = (grants: AclGrantRequest[]) => {
    console.log('Permissions saved for new Stack:', grants);
  };

  /* SUBMIT HANDLER */
  const handleSubmit = async (values: FormikValues, { setSubmitting }: FormikHelpers<Stack>) => {
    try {
      console.log("Stack form values:", values);

      // NOTE: depending on your generated endpoint, you may need { body: values }
      const result = await addStack(values as any).unwrap();

      if (result && result.id && currentUser.permissions.canGrantPermissions) {
        const shouldSetPermissions = window.confirm(
          `Stack created successfully! Would you like to set permissions for this object?`
        );
        if (shouldSetPermissions) {
          handleManagePermissions(result.id);
        }
      }

      setSubmitting(false);
    } catch (error) {
      console.error('Failed to create Stack:', error);
      setSubmitting(false);
    }
  };

  return (
    <div>
      <Formik
        validateOnBlur={true}
        initialValues={initialValues as Stack}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >
        {({
          isSubmitting,
          isValid,
          errors,
          values,
          setFieldValue,
          touched,
          setFieldTouched,
          handleSubmit
        }) => (
          <form onSubmit={handleSubmit} className="form">
            <Accordion defaultActiveKey="1">
              
              {/* Editable Fields (NON read-only) */}
              <Accordion.Item eventKey="1">
                <Accordion.Header>
                  <FaRegPlusSquare size={28} /> &nbsp; Add New Stack
                </Accordion.Header>
                <Accordion.Body>
                    <label htmlFor="name" className="nice-form-control">
                      <b>
                        Name:
                        {touched.name &&
                         !errors.name && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="name"
                            value={values?.name}
                            placeholder="Name"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="name"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="schemaData" className="nice-form-control">
                      <b>
                        Schema Data:
                        {touched.schemaData &&
                         !errors.schemaData && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="schemaData"
                            value={values?.schemaData}
                            placeholder="Schema Data"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="schemaData"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="execModuleId" className="nice-form-control">
                      <b>
                        Exec Module Id:
                        {touched.execModuleId &&
                         !errors.execModuleId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="execModuleId"
                            value={values?.execModuleId}
                            placeholder="Exec Module Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="execModuleId"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="category" className="nice-form-control">
                      <b>
                        Category:
                        {touched.category &&
                         !errors.category && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>

                        {/* ENUM DROPDOWN */}
                        <BSForm.Select
                          name="category"
                          className={
                            errors.category
                              ? 'form-control field-error'
                              : 'nice-form-control form-control'
                          }
                          onChange={(e) => {
                            setFieldTouched('category', true);
                            setFieldValue('category', e.target.value || undefined);
                          }}
                        >
                          <option value="" label="Select Category" />
                          <CategoryLookup />
                        </BSForm.Select>


                      <ErrorMessage
                        className="error"
                        name="category"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="artifactId" className="nice-form-control">
                      <b>
                        Artifact Id:
                        {touched.artifactId &&
                         !errors.artifactId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="artifactId"
                            value={values?.artifactId}
                            placeholder="Artifact Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="artifactId"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="applicationId" className="nice-form-control">
                      <b>
                        Application Id:
                        {touched.applicationId &&
                         !errors.applicationId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="applicationId"
                            value={values?.applicationId}
                            placeholder="Application Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="applicationId"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="adminServerHost" className="nice-form-control">
                      <b>
                        Admin Server Host:
                        {touched.adminServerHost &&
                         !errors.adminServerHost && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="adminServerHost"
                            value={values?.adminServerHost}
                            placeholder="Admin Server Host"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="adminServerHost"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="adminServerPort" className="nice-form-control">
                      <b>
                        Admin Server Port:
                        {touched.adminServerPort &&
                         !errors.adminServerPort && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="adminServerPort"
                            value={values?.adminServerPort}
                            placeholder="Admin Server Port"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="adminServerPort"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="hostName" className="nice-form-control">
                      <b>
                        Host Name:
                        {touched.hostName &&
                         !errors.hostName && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="hostName"
                            value={values?.hostName}
                            placeholder="Host Name"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="hostName"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="hostPort" className="nice-form-control">
                      <b>
                        Host Port:
                        {touched.hostPort &&
                         !errors.hostPort && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="hostPort"
                            value={values?.hostPort}
                            placeholder="Host Port"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="hostPort"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="orgName" className="nice-form-control">
                      <b>
                        Org Name:
                        {touched.orgName &&
                         !errors.orgName && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="orgName"
                            value={values?.orgName}
                            placeholder="Org Name"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="orgName"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="gitUser" className="nice-form-control">
                      <b>
                        Git User:
                        {touched.gitUser &&
                         !errors.gitUser && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="gitUser"
                            value={values?.gitUser}
                            placeholder="Git User"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="gitUser"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="gitRepo" className="nice-form-control">
                      <b>
                        Git Repo:
                        {touched.gitRepo &&
                         !errors.gitRepo && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="gitRepo"
                            value={values?.gitRepo}
                            placeholder="Git Repo"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="gitRepo"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="skipSwaggerGen" className="nice-form-control">
                      <b>
                        Skip Swagger Gen:
                        {touched.skipSwaggerGen &&
                         !errors.skipSwaggerGen && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>


                          {/* CHECKBOX FIELD */}
                          <BSForm.Check
                            id="skipSwaggerGen"
                            name="skipSwaggerGen"
                            onChange={(e) => {
                              setFieldTouched('skipSwaggerGen', true);
                              setFieldValue('skipSwaggerGen', e.target.checked);
                            }}
                            isInvalid={!!errors.skipSwaggerGen}
                            className={errors.skipSwaggerGen ? 'error' : ''}
                          />







                      <ErrorMessage
                        className="error"
                        name="skipSwaggerGen"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="skipJavaGen" className="nice-form-control">
                      <b>
                        Skip Java Gen:
                        {touched.skipJavaGen &&
                         !errors.skipJavaGen && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>


                          {/* CHECKBOX FIELD */}
                          <BSForm.Check
                            id="skipJavaGen"
                            name="skipJavaGen"
                            onChange={(e) => {
                              setFieldTouched('skipJavaGen', true);
                              setFieldValue('skipJavaGen', e.target.checked);
                            }}
                            isInvalid={!!errors.skipJavaGen}
                            className={errors.skipJavaGen ? 'error' : ''}
                          />







                      <ErrorMessage
                        className="error"
                        name="skipJavaGen"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="skipDbGen" className="nice-form-control">
                      <b>
                        Skip Db Gen:
                        {touched.skipDbGen &&
                         !errors.skipDbGen && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>


                          {/* CHECKBOX FIELD */}
                          <BSForm.Check
                            id="skipDbGen"
                            name="skipDbGen"
                            onChange={(e) => {
                              setFieldTouched('skipDbGen', true);
                              setFieldValue('skipDbGen', e.target.checked);
                            }}
                            isInvalid={!!errors.skipDbGen}
                            className={errors.skipDbGen ? 'error' : ''}
                          />







                      <ErrorMessage
                        className="error"
                        name="skipDbGen"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="skipReactGen" className="nice-form-control">
                      <b>
                        Skip React Gen:
                        {touched.skipReactGen &&
                         !errors.skipReactGen && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>


                          {/* CHECKBOX FIELD */}
                          <BSForm.Check
                            id="skipReactGen"
                            name="skipReactGen"
                            onChange={(e) => {
                              setFieldTouched('skipReactGen', true);
                              setFieldValue('skipReactGen', e.target.checked);
                            }}
                            isInvalid={!!errors.skipReactGen}
                            className={errors.skipReactGen ? 'error' : ''}
                          />







                      <ErrorMessage
                        className="error"
                        name="skipReactGen"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="dbGenDropTable" className="nice-form-control">
                      <b>
                        Db Gen Drop Table:
                        {touched.dbGenDropTable &&
                         !errors.dbGenDropTable && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>


                          {/* CHECKBOX FIELD */}
                          <BSForm.Check
                            id="dbGenDropTable"
                            name="dbGenDropTable"
                            onChange={(e) => {
                              setFieldTouched('dbGenDropTable', true);
                              setFieldValue('dbGenDropTable', e.target.checked);
                            }}
                            isInvalid={!!errors.dbGenDropTable}
                            className={errors.dbGenDropTable ? 'error' : ''}
                          />







                      <ErrorMessage
                        className="error"
                        name="dbGenDropTable"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="thorApiSecureKey" className="nice-form-control">
                      <b>
                        Thor Api Secure Key:
                        {touched.thorApiSecureKey &&
                         !errors.thorApiSecureKey && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="thorApiSecureKey"
                            value={values?.thorApiSecureKey}
                            placeholder="Thor Api Secure Key"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="thorApiSecureKey"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="dbUrl" className="nice-form-control">
                      <b>
                        Db Url:
                        {touched.dbUrl &&
                         !errors.dbUrl && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="dbUrl"
                            value={values?.dbUrl}
                            placeholder="Db Url"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="dbUrl"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="dbName" className="nice-form-control">
                      <b>
                        Db Name:
                        {touched.dbName &&
                         !errors.dbName && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="dbName"
                            value={values?.dbName}
                            placeholder="Db Name"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="dbName"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="dbUser" className="nice-form-control">
                      <b>
                        Db User:
                        {touched.dbUser &&
                         !errors.dbUser && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="dbUser"
                            value={values?.dbUser}
                            placeholder="Db User"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="dbUser"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="dbPassword" className="nice-form-control">
                      <b>
                        Db Password:
                        {touched.dbPassword &&
                         !errors.dbPassword && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="dbPassword"
                            value={values?.dbPassword}
                            placeholder="Db Password"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="dbPassword"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="schemaName" className="nice-form-control">
                      <b>
                        Schema Name:
                        {touched.schemaName &&
                         !errors.schemaName && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="schemaName"
                            value={values?.schemaName}
                            placeholder="Schema Name"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="schemaName"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="language" className="nice-form-control">
                      <b>
                        Language:
                        {touched.language &&
                         !errors.language && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>

                        {/* ENUM DROPDOWN */}
                        <BSForm.Select
                          name="language"
                          className={
                            errors.language
                              ? 'form-control field-error'
                              : 'nice-form-control form-control'
                          }
                          onChange={(e) => {
                            setFieldTouched('language', true);
                            setFieldValue('language', e.target.value || undefined);
                          }}
                        >
                          <option value="" label="Select Language" />
                          <LanguageLookup />
                        </BSForm.Select>


                      <ErrorMessage
                        className="error"
                        name="language"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="templateRepo" className="nice-form-control">
                      <b>
                        Template Repo:
                        {touched.templateRepo &&
                         !errors.templateRepo && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>

                        {/* ENUM DROPDOWN */}
                        <BSForm.Select
                          name="templateRepo"
                          className={
                            errors.templateRepo
                              ? 'form-control field-error'
                              : 'nice-form-control form-control'
                          }
                          onChange={(e) => {
                            setFieldTouched('templateRepo', true);
                            setFieldValue('templateRepo', e.target.value || undefined);
                          }}
                        >
                          <option value="" label="Select Template Repo" />
                          <TemplateRepoLookup />
                        </BSForm.Select>


                      <ErrorMessage
                        className="error"
                        name="templateRepo"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="schemaFileName" className="nice-form-control">
                      <b>
                        Schema File Name:
                        {touched.schemaFileName &&
                         !errors.schemaFileName && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="schemaFileName"
                            value={values?.schemaFileName}
                            placeholder="Schema File Name"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="schemaFileName"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="status" className="nice-form-control">
                      <b>
                        Status:
                        {touched.status &&
                         !errors.status && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>

                        {/* ENUM DROPDOWN */}
                        <BSForm.Select
                          name="status"
                          className={
                            errors.status
                              ? 'form-control field-error'
                              : 'nice-form-control form-control'
                          }
                          onChange={(e) => {
                            setFieldTouched('status', true);
                            setFieldValue('status', e.target.value || undefined);
                          }}
                        >
                          <option value="" label="Select Status" />
                          <StatusLookup />
                        </BSForm.Select>


                      <ErrorMessage
                        className="error"
                        name="status"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="id" className="nice-form-control">
                      <b>
                        Id:
                        {touched.id &&
                         !errors.id && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="id"
                            value={values?.id}
                            placeholder="Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="id"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="ownerId" className="nice-form-control">
                      <b>
                        Owner Id:
                        {touched.ownerId &&
                         !errors.ownerId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="ownerId"
                            value={values?.ownerId}
                            placeholder="Owner Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="ownerId"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="createdDate" className="nice-form-control">
                      <b>
                        Created Date:
                        {touched.createdDate &&
                         !errors.createdDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                      <ErrorMessage
                        className="error"
                        name="createdDate"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="keyHash" className="nice-form-control">
                      <b>
                        Key Hash:
                        {touched.keyHash &&
                         !errors.keyHash && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="keyHash"
                            value={values?.keyHash}
                            placeholder="Key Hash"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="keyHash"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastAccessedById" className="nice-form-control">
                      <b>
                        Last Accessed By Id:
                        {touched.lastAccessedById &&
                         !errors.lastAccessedById && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="lastAccessedById"
                            value={values?.lastAccessedById}
                            placeholder="Last Accessed By Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="lastAccessedById"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastAccessedDate" className="nice-form-control">
                      <b>
                        Last Accessed Date:
                        {touched.lastAccessedDate &&
                         !errors.lastAccessedDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                      <ErrorMessage
                        className="error"
                        name="lastAccessedDate"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastModifiedById" className="nice-form-control">
                      <b>
                        Last Modified By Id:
                        {touched.lastModifiedById &&
                         !errors.lastModifiedById && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="lastModifiedById"
                            value={values?.lastModifiedById}
                            placeholder="Last Modified By Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="lastModifiedById"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastModifiedDate" className="nice-form-control">
                      <b>
                        Last Modified Date:
                        {touched.lastModifiedDate &&
                         !errors.lastModifiedDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                      <ErrorMessage
                        className="error"
                        name="lastModifiedDate"
                        component="span"
                      />
                    </label>
                    <br />

                  {/* SUBMIT BUTTON */}
                  <CoolButton
                    variant={isValid ? (isSubmitting ? 'disabled' : 'success') : 'warning'}
                    type="submit"
                    disabled={!isValid || isSubmitting}
                  >
                    {isSubmitting && (<span style={ { float: 'left', minHeight: 0 } }><LoadingSpinner label="" size={18} /></span>)}
                    <FaCheckCircle size={28} /> Create New Stack
                  </CoolButton>

                  {addStackResult.error && (
                    <div className="error" style={ { marginTop: 12 }}>
                      {JSON.stringify('data' in (addStackResult as any).error ? (addStackResult as any).error.data : (addStackResult as any).error)}
                    </div>
                  )}
                </Accordion.Body>
              </Accordion.Item>

            {/* Debug/Dev Accordion */}
              <Accordion.Item eventKey="0">
                <Accordion.Header>
                  <FaCogs size={28} /> &nbsp;Server Messages
                </Accordion.Header>
                <Accordion.Body>
                  errors: {JSON.stringify(errors)}
                  <br />
                  addStackResult: {JSON.stringify(addStackResult)}
                </Accordion.Body>
              </Accordion.Item>

            </Accordion>
          </form>
        )}
      </Formik>

      {/* Permission Management Dialog */}
      {createdObjectId && (
        <PermissionDialog
          objectType="com.valkyrlabs.model.Stack"
          objectId={createdObjectId}
          isVisible={showPermissionDialog}
          onClose={handlePermissionDialogClose}
          onSave={handlePermissionsSave}
          currentUser={currentUser}
        />
      )}
    </div>
  );
};

/*
lowercase categorylookup
uppercase CATEGORYLOOKUP
snakecase category_lookup
pascalcase CategoryLookup
camelcase categoryLookup
kebabcase category-lookup
*/

const CategoryLookup = () => {
  return (
    <>
      <option value='Full Stack' label="Full Stack" />
      <option value='Front End' label="Front End" />
      <option value='API' label="Api" />
      <option value='Data Library' label="Data Library" />
      <option value='Infrastructure' label="Infrastructure" />
      <option value='Documentation' label="Documentation" />
    </>
  );
};

/*
lowercase languagelookup
uppercase LANGUAGELOOKUP
snakecase language_lookup
pascalcase LanguageLookup
camelcase languageLookup
kebabcase language-lookup
*/

const LanguageLookup = () => {
  return (
    <>
      <option value='valkyrai_java_spring' label="Java Spring" />
      <option value='valkyrai_kotlin_spring' label="Kotlin Spring" />
    </>
  );
};

/*
lowercase templaterepolookup
uppercase TEMPLATEREPOLOOKUP
snakecase template_repo_lookup
pascalcase TemplateRepoLookup
camelcase templateRepoLookup
kebabcase template-repo-lookup
*/

const TemplateRepoLookup = () => {
  return (
    <>
      <option value='java_spring' label="Java Spring" />
      <option value='typescript_rtk_bootstrap' label="Typescript Rtk Bootstrap" />
    </>
  );
};

/*
lowercase statuslookup
uppercase STATUSLOOKUP
snakecase status_lookup
pascalcase StatusLookup
camelcase statusLookup
kebabcase status-lookup
*/

const StatusLookup = () => {
  return (
    <>
      <option value='available' label="Available" />
      <option value='syntax_error' label="Syntax Error" />
      <option value='compilation_error' label="Compilation Error" />
      <option value='runtime_error' label="Runtime Error" />
      <option value='database_error' label="Database Error" />
      <option value='locked' label="Locked" />
    </>
  );
};



/* Export the generated form */
export default StackForm;

