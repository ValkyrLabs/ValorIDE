import { ErrorMessage, Field, Formik, FormikHelpers, FormikValues } from 'formik';
import React, { useState } from 'react';
import {
  Form as BSForm,
  Accordion,
  Col,
  Row,
  Spinner
} from 'react-bootstrap';
import LoadingSpinner from '@valkyr/component-library/LoadingSpinner';
import { FaCheckCircle, FaCogs, FaRegPlusSquare } from 'react-icons/fa';
import CoolButton from '@valkyr/component-library/CoolButton';
import * as Yup from 'yup';
import { SmartField } from '@valkyr/component-library/ForeignKey/SmartField';

import { PermissionDialog } from '@valkyr/component-library/PermissionDialog';
import { AclGrantRequest, PermissionType } from '@valkyr/component-library/PermissionDialog/types';


import {
  ChatMessage,
  ChatMessageRoleEnum,
  ChatMessageSourceTypeEnum,
} from '@thor/model';

import { useAddChatMessageMutation } from '../../services/ChatMessageService';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-09-10T13:59:56.351525-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelForm.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description:
A chat message sent as part of a conversation.
*/

/* -----------------------------------------------------
   ENUM VALIDATION ARRAYS (Yup oneOf checks), if any
-------------------------------------------------------- */
const RoleValidation = () => {
  return [
    'system',
    'user',
    'assistant',
  ];
};
const SourceTypeValidation = () => {
  return [
    'api',
    'server_log',
    'p2p',
  ];
};

/* -----------------------------------------------------
   YUP VALIDATION SCHEMA (skip read-only fields)
-------------------------------------------------------- */
const asNumber = (schema: Yup.NumberSchema) =>
  schema.transform((val, orig) => (orig === '' || orig === null ? undefined : val));

const validationSchema = Yup.object().shape({
      role: Yup.mixed()
        .oneOf(RoleValidation(), "Invalid value for role")
        .required("role is required."),
        content: Yup.string().required("content is required."),
        sessionId: Yup.string(),
        chatCompletionRequestId: Yup.string(),
        connected: Yup.boolean(),
        json: Yup.string(),
      sourceType: Yup.mixed()
        .oneOf(SourceTypeValidation(), "Invalid value for sourceType")
        ,
        sourceOwner: Yup.string(),
        id: Yup.string(),
        ownerId: Yup.string(),
        keyHash: Yup.string(),
        lastAccessedById: Yup.string(),
        lastModifiedById: Yup.string(),
});

/* -----------------------------------------------------
   COMPONENT
-------------------------------------------------------- */
const ChatMessageForm: React.FC = () => {
  const [addChatMessage, addChatMessageResult] = useAddChatMessageMutation();

  // Permission Management State
  const [showPermissionDialog, setShowPermissionDialog] = useState(false);
  const [createdObjectId, setCreatedObjectId] = useState<string | null>(null);

  // Mock current user - in real implementation, this would come from auth context
  const currentUser = {
    username: 'current_user',
    permissions: {
      isOwner: true,
      isAdmin: true,
      canGrantPermissions: true,
      permissions: [PermissionType.READ, PermissionType.WRITE, PermissionType.CREATE, PermissionType.DELETE, PermissionType.ADMINISTRATION],
    },
  };

  /* -----------------------------------------------------
     INITIAL VALUES - only NON read-only fields
  -------------------------------------------------------- */
  const initialValues: Partial<ChatMessage> = {
        role: undefined,
          content: '',
          sessionId: '',
          chatCompletionRequestId: '',
          connected: false,
          json: '',
        sourceType: undefined,
          sourceOwner: '',
          id: '',
          ownerId: '',
          keyHash: '',
          lastAccessedById: '',
          lastModifiedById: '',
  };

  // Permission Management Handlers
  const handleManagePermissions = (objectId: string) => {
    setCreatedObjectId(objectId);
    setShowPermissionDialog(true);
  };

  const handlePermissionDialogClose = () => {
    setShowPermissionDialog(false);
    setCreatedObjectId(null);
  };

  const handlePermissionsSave = (grants: AclGrantRequest[]) => {
    console.log('Permissions saved for new ChatMessage:', grants);
  };

  /* SUBMIT HANDLER */
  const handleSubmit = async (values: FormikValues, { setSubmitting }: FormikHelpers<ChatMessage>) => {
    try {
      console.log("ChatMessage form values:", values);

      // NOTE: depending on your generated endpoint, you may need { body: values }
      const result = await addChatMessage(values as any).unwrap();

      if (result && result.id && currentUser.permissions.canGrantPermissions) {
        const shouldSetPermissions = window.confirm(
          `ChatMessage created successfully! Would you like to set permissions for this object?`
        );
        if (shouldSetPermissions) {
          handleManagePermissions(result.id);
        }
      }

      setSubmitting(false);
    } catch (error) {
      console.error('Failed to create ChatMessage:', error);
      setSubmitting(false);
    }
  };

  return (
    <div>
      <Formik
        validateOnBlur={true}
        initialValues={initialValues as ChatMessage}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >
        {({
          isSubmitting,
          isValid,
          errors,
          values,
          setFieldValue,
          touched,
          setFieldTouched,
          handleSubmit
        }) => (
          <form onSubmit={handleSubmit} className="form">
            <Accordion defaultActiveKey="1">
              
              {/* Editable Fields (NON read-only) */}
              <Accordion.Item eventKey="1">
                <Accordion.Header>
                  <FaRegPlusSquare size={28} /> &nbsp; Add New ChatMessage
                </Accordion.Header>
                <Accordion.Body>
                    <label htmlFor="role" className="nice-form-control">
                      <b>
                        Role:
                        {touched.role &&
                         !errors.role && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>

                        {/* ENUM DROPDOWN */}
                        <BSForm.Select
                          name="role"
                          className={
                            errors.role
                              ? 'form-control field-error'
                              : 'nice-form-control form-control'
                          }
                          onChange={(e) => {
                            setFieldTouched('role', true);
                            setFieldValue('role', e.target.value || undefined);
                          }}
                        >
                          <option value="" label="Select Role" />
                          <RoleLookup />
                        </BSForm.Select>


                      <ErrorMessage
                        className="error"
                        name="role"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="content" className="nice-form-control">
                      <b>
                        Content:
                        {touched.content &&
                         !errors.content && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="content"
                            value={values?.content}
                            placeholder="Content"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="content"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="sessionId" className="nice-form-control">
                      <b>
                        Session Id:
                        {touched.sessionId &&
                         !errors.sessionId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="sessionId"
                            value={values?.sessionId}
                            placeholder="Session Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="sessionId"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="chatCompletionRequestId" className="nice-form-control">
                      <b>
                        Chat Completion Request Id:
                        {touched.chatCompletionRequestId &&
                         !errors.chatCompletionRequestId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="chatCompletionRequestId"
                            value={values?.chatCompletionRequestId}
                            placeholder="Chat Completion Request Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="chatCompletionRequestId"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="connected" className="nice-form-control">
                      <b>
                        Connected:
                        {touched.connected &&
                         !errors.connected && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>


                          {/* CHECKBOX FIELD */}
                          <BSForm.Check
                            id="connected"
                            name="connected"
                            onChange={(e) => {
                              setFieldTouched('connected', true);
                              setFieldValue('connected', e.target.checked);
                            }}
                            isInvalid={!!errors.connected}
                            className={errors.connected ? 'error' : ''}
                          />







                      <ErrorMessage
                        className="error"
                        name="connected"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="json" className="nice-form-control">
                      <b>
                        Json:
                        {touched.json &&
                         !errors.json && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="json"
                            value={values?.json}
                            placeholder="Json"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="json"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="sourceType" className="nice-form-control">
                      <b>
                        Source Type:
                        {touched.sourceType &&
                         !errors.sourceType && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>

                        {/* ENUM DROPDOWN */}
                        <BSForm.Select
                          name="sourceType"
                          className={
                            errors.sourceType
                              ? 'form-control field-error'
                              : 'nice-form-control form-control'
                          }
                          onChange={(e) => {
                            setFieldTouched('sourceType', true);
                            setFieldValue('sourceType', e.target.value || undefined);
                          }}
                        >
                          <option value="" label="Select Source Type" />
                          <SourceTypeLookup />
                        </BSForm.Select>


                      <ErrorMessage
                        className="error"
                        name="sourceType"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="sourceOwner" className="nice-form-control">
                      <b>
                        Source Owner:
                        {touched.sourceOwner &&
                         !errors.sourceOwner && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="sourceOwner"
                            value={values?.sourceOwner}
                            placeholder="Source Owner"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="sourceOwner"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="id" className="nice-form-control">
                      <b>
                        Id:
                        {touched.id &&
                         !errors.id && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="id"
                            value={values?.id}
                            placeholder="Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="id"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="ownerId" className="nice-form-control">
                      <b>
                        Owner Id:
                        {touched.ownerId &&
                         !errors.ownerId && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="ownerId"
                            value={values?.ownerId}
                            placeholder="Owner Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="ownerId"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="createdDate" className="nice-form-control">
                      <b>
                        Created Date:
                        {touched.createdDate &&
                         !errors.createdDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                      <ErrorMessage
                        className="error"
                        name="createdDate"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="keyHash" className="nice-form-control">
                      <b>
                        Key Hash:
                        {touched.keyHash &&
                         !errors.keyHash && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="keyHash"
                            value={values?.keyHash}
                            placeholder="Key Hash"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="keyHash"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastAccessedById" className="nice-form-control">
                      <b>
                        Last Accessed By Id:
                        {touched.lastAccessedById &&
                         !errors.lastAccessedById && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="lastAccessedById"
                            value={values?.lastAccessedById}
                            placeholder="Last Accessed By Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="lastAccessedById"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastAccessedDate" className="nice-form-control">
                      <b>
                        Last Accessed Date:
                        {touched.lastAccessedDate &&
                         !errors.lastAccessedDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                      <ErrorMessage
                        className="error"
                        name="lastAccessedDate"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastModifiedById" className="nice-form-control">
                      <b>
                        Last Modified By Id:
                        {touched.lastModifiedById &&
                         !errors.lastModifiedById && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>



                          {/* SMART FIELD (UUID-aware picker for *Id), fallback text */}
                          <SmartField
                            name="lastModifiedById"
                            value={values?.lastModifiedById}
                            placeholder="Last Modified By Id"
                            setFieldValue={setFieldValue}
                            setFieldTouched={setFieldTouched}
                          />






                      <ErrorMessage
                        className="error"
                        name="lastModifiedById"
                        component="span"
                      />
                    </label>
                    <br />
                    <label htmlFor="lastModifiedDate" className="nice-form-control">
                      <b>
                        Last Modified Date:
                        {touched.lastModifiedDate &&
                         !errors.lastModifiedDate && (
                          <span className="okCheck"><FaCheckCircle /> looks good!</span>
                        )}
                      </b>









                      <ErrorMessage
                        className="error"
                        name="lastModifiedDate"
                        component="span"
                      />
                    </label>
                    <br />

                  {/* SUBMIT BUTTON */}
                  <CoolButton
                    variant={isValid ? (isSubmitting ? 'disabled' : 'success') : 'warning'}
                    type="submit"
                    disabled={!isValid || isSubmitting}
                  >
                    {isSubmitting && (<span style={ { float: 'left', minHeight: 0 } }><LoadingSpinner label="" size={18} /></span>)}
                    <FaCheckCircle size={28} /> Create New ChatMessage
                  </CoolButton>

                  {addChatMessageResult.error && (
                    <div className="error" style={ { marginTop: 12 }}>
                      {JSON.stringify('data' in (addChatMessageResult as any).error ? (addChatMessageResult as any).error.data : (addChatMessageResult as any).error)}
                    </div>
                  )}
                </Accordion.Body>
              </Accordion.Item>

            {/* Debug/Dev Accordion */}
              <Accordion.Item eventKey="0">
                <Accordion.Header>
                  <FaCogs size={28} /> &nbsp;Server Messages
                </Accordion.Header>
                <Accordion.Body>
                  errors: {JSON.stringify(errors)}
                  <br />
                  addChatMessageResult: {JSON.stringify(addChatMessageResult)}
                </Accordion.Body>
              </Accordion.Item>

            </Accordion>
          </form>
        )}
      </Formik>

      {/* Permission Management Dialog */}
      {createdObjectId && (
        <PermissionDialog
          objectType="com.valkyrlabs.model.ChatMessage"
          objectId={createdObjectId}
          isVisible={showPermissionDialog}
          onClose={handlePermissionDialogClose}
          onSave={handlePermissionsSave}
          currentUser={currentUser}
        />
      )}
    </div>
  );
};

/*
lowercase rolelookup
uppercase ROLELOOKUP
snakecase role_lookup
pascalcase RoleLookup
camelcase roleLookup
kebabcase role-lookup
*/

const RoleLookup = () => {
  return (
    <>
      <option value='system' label="System" />
      <option value='user' label="User" />
      <option value='assistant' label="Assistant" />
    </>
  );
};

/*
lowercase sourcetypelookup
uppercase SOURCETYPELOOKUP
snakecase source_type_lookup
pascalcase SourceTypeLookup
camelcase sourceTypeLookup
kebabcase source-type-lookup
*/

const SourceTypeLookup = () => {
  return (
    <>
      <option value='api' label="Api" />
      <option value='server_log' label="Server Log" />
      <option value='p2p' label="P 2 p" />
    </>
  );
};



/* Export the generated form */
export default ChatMessageForm;

