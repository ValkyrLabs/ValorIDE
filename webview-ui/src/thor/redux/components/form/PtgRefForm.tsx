import { ErrorMessage, Field, Formik, FormikHelpers, FormikValues } from "formik"
import React from "react"
import { Form as BSForm, Accordion, Col, Nav, Row, Spinner } from "react-bootstrap"
import { FaCheckCircle, FaCogs, FaRegPlusSquare } from "react-icons/fa"
import CoolButton from "../../../../components/CoolButton"
import * as Yup from "yup"

import { PtgRef, PtgRefTypeEnum } from "../../../model"

import { useAddPtgRefMutation } from "../../services/PtgRefService"

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-05-08T17:49:28.351161-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelForm.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description:
GridHeim Formula Reference
*/

/* -----------------------------------------------------
   ENUM VALIDATION ARRAYS (Yup oneOf checks), if any
-------------------------------------------------------- */
const TypeValidation = () => {
	return ["PtgAdd", "PtgSub", "PtgMul", "PtgDiv"]
}

/* -----------------------------------------------------
   YUP VALIDATION SCHEMA
   (Skip read-only fields and container types)
-------------------------------------------------------- */
const validationSchema = Yup.object().shape({
	sheetId: Yup.string(),

	formulaId: Yup.string(),

	reference: Yup.string(),

	type: Yup.mixed()
		.oneOf(TypeValidation(), "Invalid value for type")

		.notRequired(),

	id: Yup.string(),

	ownerId: Yup.string(),

	createdDate: Yup.date(),

	keyHash: Yup.string(),

	lastAccessedById: Yup.string(),

	lastAccessedDate: Yup.date(),

	lastModifiedById: Yup.string(),

	lastModifiedDate: Yup.date(),
})

/* -----------------------------------------------------
   COMPONENT
-------------------------------------------------------- */
const PtgRefForm: React.FC = () => {
	const [addPtgRef, addPtgRefResult] = useAddPtgRefMutation()

	/* INITIAL VALUES - skip read-only fields */
	const initialValues: Partial<PtgRef> = {
		sheetId: "null",

		formulaId: "null",

		reference: "null",

		type: PtgRefTypeEnum[Object.keys(PtgRefTypeEnum)[0]],

		id: "6f5b5086-b5a1-4001-870a-8b5a87e1fa85",

		ownerId: "8a846729-74c7-47b9-9c20-95aaf9abe613",

		keyHash: "null",

		lastAccessedById: "5c90defe-ddb4-44f5-8f5a-bb76219fc25d",

		lastModifiedById: "569593af-22e9-495f-9c17-a29a73b56e9d",
	}

	/* SUBMIT HANDLER */
	const handleSubmit = (values: FormikValues, { setSubmitting }: FormikHelpers<PtgRef>) => {
		// Simulate slow network or do what you need:
		setTimeout(() => {
			console.log("PtgRef form values:", values)
			addPtgRef(values)
			setSubmitting(false)
		}, 500)
	}

	return (
		<div>
			<Formik
				validateOnBlur={true}
				initialValues={initialValues as PtgRef}
				validationSchema={validationSchema}
				onSubmit={handleSubmit}>
				{({ isSubmitting, isValid, errors, setFieldValue, touched, setFieldTouched, handleSubmit }) => (
					<form onSubmit={handleSubmit} className="form">
						<Accordion defaultActiveKey="1">
							{/* Debug/Dev Accordion */}
							<Accordion.Item eventKey="0">
								<Accordion.Header>
									<FaCogs size={36} />
								</Accordion.Header>
								<Accordion.Body>
									errors: {JSON.stringify(errors)}
									<br />
									touched: {JSON.stringify(touched)}
									<br />
									addPtgRefResult: {JSON.stringify(addPtgRefResult)}
								</Accordion.Body>
							</Accordion.Item>

							{/* Editable Fields (NON-read-only) */}
							<Accordion.Item eventKey="1">
								<Accordion.Header>
									<FaRegPlusSquare size={36} /> Add New PtgRef
								</Accordion.Header>
								<Accordion.Body>
									<label htmlFor="sheetId" className="nice-form-control">
										<b>
											Sheet Id:
											{touched.sheetId && !errors.sheetId && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="sheetId"
											type="text"
											className={
												errors.sheetId ? "form-control field-error" : "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="sheetId" component="span" />
									</label>
									<br />

									<label htmlFor="formulaId" className="nice-form-control">
										<b>
											Formula Id:
											{touched.formulaId && !errors.formulaId && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="formulaId"
											type="text"
											className={
												errors.formulaId ? "form-control field-error" : "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="formulaId" component="span" />
									</label>
									<br />

									<label htmlFor="reference" className="nice-form-control">
										<b>
											Reference:
											{touched.reference && !errors.reference && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="reference"
											type="text"
											className={
												errors.reference ? "form-control field-error" : "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="reference" component="span" />
									</label>
									<br />

									<label htmlFor="type" className="nice-form-control">
										<b>
											Type:
											{touched.type && !errors.type && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* ENUM DROPDOWN */}
										<BSForm.Select
											name="type"
											className={
												errors.type ? "form-control field-error" : "nice-form-control form-control"
											}
											onChange={(e) => {
												setFieldTouched("type", true)
												setFieldValue("type", e.target.value)
											}}>
											<option value="" label="Select Type" />
											<TypeLookup />
										</BSForm.Select>

										<ErrorMessage className="error" name="type" component="span" />
									</label>
									<br />

									<label htmlFor="id" className="nice-form-control">
										<b>
											Id:
											{touched.id && !errors.id && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="id"
											type="text"
											className={errors.id ? "form-control field-error" : "nice-form-control form-control"}
										/>

										<ErrorMessage className="error" name="id" component="span" />
									</label>
									<br />

									<label htmlFor="ownerId" className="nice-form-control">
										<b>
											Owner Id:
											{touched.ownerId && !errors.ownerId && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="ownerId"
											type="text"
											className={
												errors.ownerId ? "form-control field-error" : "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="ownerId" component="span" />
									</label>
									<br />

									<label htmlFor="createdDate" className="nice-form-control">
										<b>
											Created Date:
											{touched.createdDate && !errors.createdDate && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										<ErrorMessage className="error" name="createdDate" component="span" />
									</label>
									<br />

									<label htmlFor="keyHash" className="nice-form-control">
										<b>
											Key Hash:
											{touched.keyHash && !errors.keyHash && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="keyHash"
											type="text"
											className={
												errors.keyHash ? "form-control field-error" : "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="keyHash" component="span" />
									</label>
									<br />

									<label htmlFor="lastAccessedById" className="nice-form-control">
										<b>
											Last Accessed By Id:
											{touched.lastAccessedById && !errors.lastAccessedById && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="lastAccessedById"
											type="text"
											className={
												errors.lastAccessedById
													? "form-control field-error"
													: "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="lastAccessedById" component="span" />
									</label>
									<br />

									<label htmlFor="lastAccessedDate" className="nice-form-control">
										<b>
											Last Accessed Date:
											{touched.lastAccessedDate && !errors.lastAccessedDate && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										<ErrorMessage className="error" name="lastAccessedDate" component="span" />
									</label>
									<br />

									<label htmlFor="lastModifiedById" className="nice-form-control">
										<b>
											Last Modified By Id:
											{touched.lastModifiedById && !errors.lastModifiedById && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										{/* TEXT FIELD */}
										<Field
											name="lastModifiedById"
											type="text"
											className={
												errors.lastModifiedById
													? "form-control field-error"
													: "nice-form-control form-control"
											}
										/>

										<ErrorMessage className="error" name="lastModifiedById" component="span" />
									</label>
									<br />

									<label htmlFor="lastModifiedDate" className="nice-form-control">
										<b>
											Last Modified Date:
											{touched.lastModifiedDate && !errors.lastModifiedDate && (
												<span className="okCheck">
													<FaCheckCircle /> looks good!
												</span>
											)}
										</b>

										<ErrorMessage className="error" name="lastModifiedDate" component="span" />
									</label>
									<br />

									{/* SUBMIT BUTTON */}
									<CoolButton
										variant={touched && isValid ? (isSubmitting ? "disabled" : "success") : "warning"}
										type="submit">
										{isSubmitting && (
											<Spinner
												style={{ float: "left" }}
												as="span"
												animation="grow"
												variant="light"
												aria-hidden="true"
											/>
										)}
										<FaCheckCircle size={30} /> Create New PtgRef
									</CoolButton>
								</Accordion.Body>
							</Accordion.Item>

							{/* Read-Only System Fields */}
							<Accordion.Item eventKey="2">
								<Accordion.Header>System Fields (Read Only)</Accordion.Header>
								<Accordion.Body>
									<Row></Row>
								</Accordion.Body>
							</Accordion.Item>
						</Accordion>
					</form>
				)}
			</Formik>
		</div>
	)
}

/*
lowercase typelookup
uppercase TYPELOOKUP
snakecase type_lookup
pascalcase TypeLookup
camelcase typeLookup
kebabcase type-lookup
*/

const TypeLookup = () => {
	return (
		<>
			<option value="PtgAdd" label="Ptg Add" />
			<option value="PtgSub" label="Ptg Sub" />
			<option value="PtgMul" label="Ptg Mul" />
			<option value="PtgDiv" label="Ptg Div" />
		</>
	)
}

/* Export the generated form */
export default PtgRefForm
