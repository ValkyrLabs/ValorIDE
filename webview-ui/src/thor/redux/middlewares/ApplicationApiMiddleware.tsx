/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-03T07:35:49.309640-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/apiRest.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/

import { 
    getApplication, 
    postApplication,
    getApplicationList , 
    deleteApplication , 
    updateApplication 
} from '@thor/api/ApplicationApi';

import {

    ADD_APPLICATION_REQUEST,
    FETCH_APPLICATION_REQUEST,
    LIST_APPLICATION_REQUEST,
    UPDATE_APPLICATION_REQUEST,
    DELETE_APPLICATION_REQUEST,

    addApplicationFailure,
    addApplicationSuccess,

    fetchApplicationFailure,
    fetchApplicationSuccess,
    
    listApplicationFailure,
    listApplicationSuccess,

    updateApplicationFailure,
    updateApplicationSuccess,
    
    deleteApplicationFailure,
    deleteApplicationSuccess,
    
} from '../actions/ApplicationApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: Application
*/

export const ApplicationMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("Application MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_APPLICATION_REQUEST:
            try {
                const response = postApplication(action.payload);
                dispatch(addApplicationSuccess(response.body));
            } catch (error) {
                dispatch(addApplicationFailure(error.message));
            }
            break;

        case LIST_APPLICATION_REQUEST:
            try {
                const response = getApplicationList({});
                dispatch(listApplicationSuccess(response.body));
            } catch (error) {
                dispatch(listApplicationFailure(error.message));
            }
            break;


        case FETCH_APPLICATION_REQUEST:
            try {
                const response = getApplication(action.id);
                dispatch(fetchApplicationSuccess(response.body));
            } catch (error) {
                dispatch(fetchApplicationFailure(error.message));
            }
            break;

        case UPDATE_APPLICATION_REQUEST:
            try {
                const { id, Application } = action.payload;
                const response = updateApplication(id);
                dispatch(updateApplicationSuccess(response.body));
            } catch (error) {
                dispatch(updateApplicationFailure(error.message));
            }
            break;

        case DELETE_APPLICATION_REQUEST:
            try {
                const { id, Application } = action.payload;
                const response = deleteApplication(id);
                dispatch(deleteApplicationSuccess(response.body));
            } catch (error) {
                dispatch(deleteApplicationFailure(error.message));
            }
            break;

        default:
            break;
    }
};

