/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-03T07:35:49.309640-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/apiRest.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/

import { 
    getSalesOrder, 
    postSalesOrder,
    getSalesOrderList , 
    deleteSalesOrder , 
    updateSalesOrder 
} from '@thor/api/SalesOrderApi';

import {

    ADD_SALESORDER_REQUEST,
    FETCH_SALESORDER_REQUEST,
    LIST_SALESORDER_REQUEST,
    UPDATE_SALESORDER_REQUEST,
    DELETE_SALESORDER_REQUEST,

    addSalesOrderFailure,
    addSalesOrderSuccess,

    fetchSalesOrderFailure,
    fetchSalesOrderSuccess,
    
    listSalesOrderFailure,
    listSalesOrderSuccess,

    updateSalesOrderFailure,
    updateSalesOrderSuccess,
    
    deleteSalesOrderFailure,
    deleteSalesOrderSuccess,
    
} from '../actions/SalesOrderApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: SalesOrder
*/

export const SalesOrderMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("SalesOrder MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_SALESORDER_REQUEST:
            try {
                const response = postSalesOrder(action.payload);
                dispatch(addSalesOrderSuccess(response.body));
            } catch (error) {
                dispatch(addSalesOrderFailure(error.message));
            }
            break;

        case LIST_SALESORDER_REQUEST:
            try {
                const response = getSalesOrderList({});
                dispatch(listSalesOrderSuccess(response.body));
            } catch (error) {
                dispatch(listSalesOrderFailure(error.message));
            }
            break;


        case FETCH_SALESORDER_REQUEST:
            try {
                const response = getSalesOrder(action.id);
                dispatch(fetchSalesOrderSuccess(response.body));
            } catch (error) {
                dispatch(fetchSalesOrderFailure(error.message));
            }
            break;

        case UPDATE_SALESORDER_REQUEST:
            try {
                const { id, SalesOrder } = action.payload;
                const response = updateSalesOrder(id);
                dispatch(updateSalesOrderSuccess(response.body));
            } catch (error) {
                dispatch(updateSalesOrderFailure(error.message));
            }
            break;

        case DELETE_SALESORDER_REQUEST:
            try {
                const { id, SalesOrder } = action.payload;
                const response = deleteSalesOrder(id);
                dispatch(deleteSalesOrderSuccess(response.body));
            } catch (error) {
                dispatch(deleteSalesOrderFailure(error.message));
            }
            break;

        default:
            break;
    }
};

