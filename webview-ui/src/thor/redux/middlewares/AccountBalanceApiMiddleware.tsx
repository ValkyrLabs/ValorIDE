/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-09-19T15:19:30.243687-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/apiRest.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/

import { 
    getAccountBalance, 
    postAccountBalance,
    getAccountBalanceList , 
    deleteAccountBalance , 
    updateAccountBalance 
} from '@thor/api/AccountBalanceApi';

import {

    ADD_ACCOUNTBALANCE_REQUEST,
    FETCH_ACCOUNTBALANCE_REQUEST,
    LIST_ACCOUNTBALANCE_REQUEST,
    UPDATE_ACCOUNTBALANCE_REQUEST,
    DELETE_ACCOUNTBALANCE_REQUEST,

    addAccountBalanceFailure,
    addAccountBalanceSuccess,

    fetchAccountBalanceFailure,
    fetchAccountBalanceSuccess,
    
    listAccountBalanceFailure,
    listAccountBalanceSuccess,

    updateAccountBalanceFailure,
    updateAccountBalanceSuccess,
    
    deleteAccountBalanceFailure,
    deleteAccountBalanceSuccess,
    
} from '../actions/AccountBalanceApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: AccountBalance
*/

export const AccountBalanceMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("AccountBalance MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_ACCOUNTBALANCE_REQUEST:
            try {
                const response = postAccountBalance(action.payload);
                dispatch(addAccountBalanceSuccess(response.body));
            } catch (error) {
                dispatch(addAccountBalanceFailure(error.message));
            }
            break;

        case LIST_ACCOUNTBALANCE_REQUEST:
            try {
                const response = getAccountBalanceList({});
                dispatch(listAccountBalanceSuccess(response.body));
            } catch (error) {
                dispatch(listAccountBalanceFailure(error.message));
            }
            break;


        case FETCH_ACCOUNTBALANCE_REQUEST:
            try {
                const response = getAccountBalance(action.id);
                dispatch(fetchAccountBalanceSuccess(response.body));
            } catch (error) {
                dispatch(fetchAccountBalanceFailure(error.message));
            }
            break;

        case UPDATE_ACCOUNTBALANCE_REQUEST:
            try {
                const { id, AccountBalance } = action.payload;
                const response = updateAccountBalance(id);
                dispatch(updateAccountBalanceSuccess(response.body));
            } catch (error) {
                dispatch(updateAccountBalanceFailure(error.message));
            }
            break;

        case DELETE_ACCOUNTBALANCE_REQUEST:
            try {
                const { id, AccountBalance } = action.payload;
                const response = deleteAccountBalance(id);
                dispatch(deleteAccountBalanceSuccess(response.body));
            } catch (error) {
                dispatch(deleteAccountBalanceFailure(error.message));
            }
            break;

        default:
            break;
    }
};

