
import { 
    getMcpServer, 
    postMcpServer,
    getMcpServerList , 
    deleteMcpServer , 
    updateMcpServer 
} from '../../api/McpServerApi';

import {

    ADD_MCPSERVER_REQUEST,
    FETCH_MCPSERVER_REQUEST,
    LIST_MCPSERVER_REQUEST,
    UPDATE_MCPSERVER_REQUEST,
    DELETE_MCPSERVER_REQUEST,

    addMcpServerFailure,
    addMcpServerSuccess,

    fetchMcpServerFailure,
    fetchMcpServerSuccess,
    
    listMcpServerFailure,
    listMcpServerSuccess,

    updateMcpServerFailure,
    updateMcpServerSuccess,
    
    deleteMcpServerFailure,
    deleteMcpServerSuccess,
    
} from '../actions/McpServerApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: McpServer
*/

export const McpServerMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("McpServer MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_MCPSERVER_REQUEST:
            try {
                const response = postMcpServer(action.payload);
                dispatch(addMcpServerSuccess(response.body));
            } catch (error) {
                dispatch(addMcpServerFailure(error.message));
            }
            break;

        case LIST_MCPSERVER_REQUEST:
            try {
                const response = getMcpServerList({});
                dispatch(listMcpServerSuccess(response.body));
            } catch (error) {
                dispatch(listMcpServerFailure(error.message));
            }
            break;


        case FETCH_MCPSERVER_REQUEST:
            try {
                const response = getMcpServer(action.id);
                dispatch(fetchMcpServerSuccess(response.body));
            } catch (error) {
                dispatch(fetchMcpServerFailure(error.message));
            }
            break;

        case UPDATE_MCPSERVER_REQUEST:
            try {
                const { id, McpServer } = action.payload;
                const response = updateMcpServer(id);
                dispatch(updateMcpServerSuccess(response.body));
            } catch (error) {
                dispatch(updateMcpServerFailure(error.message));
            }
            break;

        case DELETE_MCPSERVER_REQUEST:
            try {
                const { id, McpServer } = action.payload;
                const response = deleteMcpServer(id);
                dispatch(deleteMcpServerSuccess(response.body));
            } catch (error) {
                dispatch(deleteMcpServerFailure(error.message));
            }
            break;

        default:
            break;
    }
};

