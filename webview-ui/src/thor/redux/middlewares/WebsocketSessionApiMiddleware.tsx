/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-03T07:35:49.309640-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/apiRest.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/

import { 
    getWebsocketSession, 
    postWebsocketSession,
    getWebsocketSessionList , 
    deleteWebsocketSession , 
    updateWebsocketSession 
} from '@thor/api/WebsocketSessionApi';

import {

    ADD_WEBSOCKETSESSION_REQUEST,
    FETCH_WEBSOCKETSESSION_REQUEST,
    LIST_WEBSOCKETSESSION_REQUEST,
    UPDATE_WEBSOCKETSESSION_REQUEST,
    DELETE_WEBSOCKETSESSION_REQUEST,

    addWebsocketSessionFailure,
    addWebsocketSessionSuccess,

    fetchWebsocketSessionFailure,
    fetchWebsocketSessionSuccess,
    
    listWebsocketSessionFailure,
    listWebsocketSessionSuccess,

    updateWebsocketSessionFailure,
    updateWebsocketSessionSuccess,
    
    deleteWebsocketSessionFailure,
    deleteWebsocketSessionSuccess,
    
} from '../actions/WebsocketSessionApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: WebsocketSession
*/

export const WebsocketSessionMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("WebsocketSession MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_WEBSOCKETSESSION_REQUEST:
            try {
                const response = postWebsocketSession(action.payload);
                dispatch(addWebsocketSessionSuccess(response.body));
            } catch (error) {
                dispatch(addWebsocketSessionFailure(error.message));
            }
            break;

        case LIST_WEBSOCKETSESSION_REQUEST:
            try {
                const response = getWebsocketSessionList({});
                dispatch(listWebsocketSessionSuccess(response.body));
            } catch (error) {
                dispatch(listWebsocketSessionFailure(error.message));
            }
            break;


        case FETCH_WEBSOCKETSESSION_REQUEST:
            try {
                const response = getWebsocketSession(action.id);
                dispatch(fetchWebsocketSessionSuccess(response.body));
            } catch (error) {
                dispatch(fetchWebsocketSessionFailure(error.message));
            }
            break;

        case UPDATE_WEBSOCKETSESSION_REQUEST:
            try {
                const { id, WebsocketSession } = action.payload;
                const response = updateWebsocketSession(id);
                dispatch(updateWebsocketSessionSuccess(response.body));
            } catch (error) {
                dispatch(updateWebsocketSessionFailure(error.message));
            }
            break;

        case DELETE_WEBSOCKETSESSION_REQUEST:
            try {
                const { id, WebsocketSession } = action.payload;
                const response = deleteWebsocketSession(id);
                dispatch(deleteWebsocketSessionSuccess(response.body));
            } catch (error) {
                dispatch(deleteWebsocketSessionFailure(error.message));
            }
            break;

        default:
            break;
    }
};

