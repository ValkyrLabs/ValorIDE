/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-09-19T15:19:30.243687-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/apiRest.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/

import { 
    getAgent, 
    postAgent,
    getAgentList , 
    deleteAgent , 
    updateAgent 
} from '@thor/api/AgentApi';

import {

    ADD_AGENT_REQUEST,
    FETCH_AGENT_REQUEST,
    LIST_AGENT_REQUEST,
    UPDATE_AGENT_REQUEST,
    DELETE_AGENT_REQUEST,

    addAgentFailure,
    addAgentSuccess,

    fetchAgentFailure,
    fetchAgentSuccess,
    
    listAgentFailure,
    listAgentSuccess,

    updateAgentFailure,
    updateAgentSuccess,
    
    deleteAgentFailure,
    deleteAgentSuccess,
    
} from '../actions/AgentApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: Agent
*/

export const AgentMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("Agent MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_AGENT_REQUEST:
            try {
                const response = postAgent(action.payload);
                dispatch(addAgentSuccess(response.body));
            } catch (error) {
                dispatch(addAgentFailure(error.message));
            }
            break;

        case LIST_AGENT_REQUEST:
            try {
                const response = getAgentList({});
                dispatch(listAgentSuccess(response.body));
            } catch (error) {
                dispatch(listAgentFailure(error.message));
            }
            break;


        case FETCH_AGENT_REQUEST:
            try {
                const response = getAgent(action.id);
                dispatch(fetchAgentSuccess(response.body));
            } catch (error) {
                dispatch(fetchAgentFailure(error.message));
            }
            break;

        case UPDATE_AGENT_REQUEST:
            try {
                const { id, Agent } = action.payload;
                const response = updateAgent(id);
                dispatch(updateAgentSuccess(response.body));
            } catch (error) {
                dispatch(updateAgentFailure(error.message));
            }
            break;

        case DELETE_AGENT_REQUEST:
            try {
                const { id, Agent } = action.payload;
                const response = deleteAgent(id);
                dispatch(deleteAgentSuccess(response.body));
            } catch (error) {
                dispatch(deleteAgentFailure(error.message));
            }
            break;

        default:
            break;
    }
};

