/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-03T07:35:49.309640-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/apiRest.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/

import { 
    getChatCompletionResponse, 
    postChatCompletionResponse,
    getChatCompletionResponseList , 
    deleteChatCompletionResponse , 
    updateChatCompletionResponse 
} from '@thor/api/ChatCompletionResponseApi';

import {

    ADD_CHATCOMPLETIONRESPONSE_REQUEST,
    FETCH_CHATCOMPLETIONRESPONSE_REQUEST,
    LIST_CHATCOMPLETIONRESPONSE_REQUEST,
    UPDATE_CHATCOMPLETIONRESPONSE_REQUEST,
    DELETE_CHATCOMPLETIONRESPONSE_REQUEST,

    addChatCompletionResponseFailure,
    addChatCompletionResponseSuccess,

    fetchChatCompletionResponseFailure,
    fetchChatCompletionResponseSuccess,
    
    listChatCompletionResponseFailure,
    listChatCompletionResponseSuccess,

    updateChatCompletionResponseFailure,
    updateChatCompletionResponseSuccess,
    
    deleteChatCompletionResponseFailure,
    deleteChatCompletionResponseSuccess,
    
} from '../actions/ChatCompletionResponseApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: ChatCompletionResponse
*/

export const ChatCompletionResponseMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("ChatCompletionResponse MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_CHATCOMPLETIONRESPONSE_REQUEST:
            try {
                const response = postChatCompletionResponse(action.payload);
                dispatch(addChatCompletionResponseSuccess(response.body));
            } catch (error) {
                dispatch(addChatCompletionResponseFailure(error.message));
            }
            break;

        case LIST_CHATCOMPLETIONRESPONSE_REQUEST:
            try {
                const response = getChatCompletionResponseList({});
                dispatch(listChatCompletionResponseSuccess(response.body));
            } catch (error) {
                dispatch(listChatCompletionResponseFailure(error.message));
            }
            break;


        case FETCH_CHATCOMPLETIONRESPONSE_REQUEST:
            try {
                const response = getChatCompletionResponse(action.id);
                dispatch(fetchChatCompletionResponseSuccess(response.body));
            } catch (error) {
                dispatch(fetchChatCompletionResponseFailure(error.message));
            }
            break;

        case UPDATE_CHATCOMPLETIONRESPONSE_REQUEST:
            try {
                const { id, ChatCompletionResponse } = action.payload;
                const response = updateChatCompletionResponse(id);
                dispatch(updateChatCompletionResponseSuccess(response.body));
            } catch (error) {
                dispatch(updateChatCompletionResponseFailure(error.message));
            }
            break;

        case DELETE_CHATCOMPLETIONRESPONSE_REQUEST:
            try {
                const { id, ChatCompletionResponse } = action.payload;
                const response = deleteChatCompletionResponse(id);
                dispatch(deleteChatCompletionResponseSuccess(response.body));
            } catch (error) {
                dispatch(deleteChatCompletionResponseFailure(error.message));
            }
            break;

        default:
            break;
    }
};

