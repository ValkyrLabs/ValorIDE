import {
	getMcpToolCallResponse,
	postMcpToolCallResponse,
	getMcpToolCallResponseList,
	deleteMcpToolCallResponse,
	updateMcpToolCallResponse,
} from "../../api"

import {
	ADD_MCPTOOLCALLRESPONSE_REQUEST,
	FETCH_MCPTOOLCALLRESPONSE_REQUEST,
	LIST_MCPTOOLCALLRESPONSE_REQUEST,
	UPDATE_MCPTOOLCALLRESPONSE_REQUEST,
	DELETE_MCPTOOLCALLRESPONSE_REQUEST,
	addMcpToolCallResponseFailure,
	addMcpToolCallResponseSuccess,
	fetchMcpToolCallResponseFailure,
	fetchMcpToolCallResponseSuccess,
	listMcpToolCallResponseFailure,
	listMcpToolCallResponseSuccess,
	updateMcpToolCallResponseFailure,
	updateMcpToolCallResponseSuccess,
	deleteMcpToolCallResponseFailure,
	deleteMcpToolCallResponseSuccess,
} from "../actions/McpToolCallResponseApiAction"

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: McpToolCallResponse
*/

export const McpToolCallResponseMiddleware =
	({ dispatch }) =>
	(next) =>
	async (action) => {
		console.log("McpToolCallResponse MIDDLEWARE: " + JSON.stringify(action))
		next(action)

		switch (action.type) {
			case ADD_MCPTOOLCALLRESPONSE_REQUEST:
				try {
					const response = postMcpToolCallResponse(action.payload)
					dispatch(addMcpToolCallResponseSuccess(response.body))
				} catch (error) {
					dispatch(addMcpToolCallResponseFailure(error.message))
				}
				break

			case LIST_MCPTOOLCALLRESPONSE_REQUEST:
				try {
					const response = getMcpToolCallResponseList()
					dispatch(listMcpToolCallResponseSuccess(response.body))
				} catch (error) {
					dispatch(listMcpToolCallResponseFailure(error.message))
				}
				break

			case FETCH_MCPTOOLCALLRESPONSE_REQUEST:
				try {
					const response = getMcpToolCallResponse(action.id)
					dispatch(fetchMcpToolCallResponseSuccess(response.body))
				} catch (error) {
					dispatch(fetchMcpToolCallResponseFailure(error.message))
				}
				break

			case UPDATE_MCPTOOLCALLRESPONSE_REQUEST:
				try {
					const { id, McpToolCallResponse } = action.payload
					const response = updateMcpToolCallResponse(id)
					dispatch(updateMcpToolCallResponseSuccess(response.body))
				} catch (error) {
					dispatch(updateMcpToolCallResponseFailure(error.message))
				}
				break

			case DELETE_MCPTOOLCALLRESPONSE_REQUEST:
				try {
					const { id, McpToolCallResponse } = action.payload
					const response = deleteMcpToolCallResponse(id)
					dispatch(deleteMcpToolCallResponseSuccess(response.body))
				} catch (error) {
					dispatch(deleteMcpToolCallResponseFailure(error.message))
				}
				break

			default:
				break
		}
	}
