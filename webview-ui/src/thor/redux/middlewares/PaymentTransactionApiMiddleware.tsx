/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-03T07:35:49.309640-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/apiRest.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/

import { 
    getPaymentTransaction, 
    postPaymentTransaction,
    getPaymentTransactionList , 
    deletePaymentTransaction , 
    updatePaymentTransaction 
} from '@thor/api/PaymentTransactionApi';

import {

    ADD_PAYMENTTRANSACTION_REQUEST,
    FETCH_PAYMENTTRANSACTION_REQUEST,
    LIST_PAYMENTTRANSACTION_REQUEST,
    UPDATE_PAYMENTTRANSACTION_REQUEST,
    DELETE_PAYMENTTRANSACTION_REQUEST,

    addPaymentTransactionFailure,
    addPaymentTransactionSuccess,

    fetchPaymentTransactionFailure,
    fetchPaymentTransactionSuccess,
    
    listPaymentTransactionFailure,
    listPaymentTransactionSuccess,

    updatePaymentTransactionFailure,
    updatePaymentTransactionSuccess,
    
    deletePaymentTransactionFailure,
    deletePaymentTransactionSuccess,
    
} from '../actions/PaymentTransactionApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: PaymentTransaction
*/

export const PaymentTransactionMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("PaymentTransaction MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_PAYMENTTRANSACTION_REQUEST:
            try {
                const response = postPaymentTransaction(action.payload);
                dispatch(addPaymentTransactionSuccess(response.body));
            } catch (error) {
                dispatch(addPaymentTransactionFailure(error.message));
            }
            break;

        case LIST_PAYMENTTRANSACTION_REQUEST:
            try {
                const response = getPaymentTransactionList({});
                dispatch(listPaymentTransactionSuccess(response.body));
            } catch (error) {
                dispatch(listPaymentTransactionFailure(error.message));
            }
            break;


        case FETCH_PAYMENTTRANSACTION_REQUEST:
            try {
                const response = getPaymentTransaction(action.id);
                dispatch(fetchPaymentTransactionSuccess(response.body));
            } catch (error) {
                dispatch(fetchPaymentTransactionFailure(error.message));
            }
            break;

        case UPDATE_PAYMENTTRANSACTION_REQUEST:
            try {
                const { id, PaymentTransaction } = action.payload;
                const response = updatePaymentTransaction(id);
                dispatch(updatePaymentTransactionSuccess(response.body));
            } catch (error) {
                dispatch(updatePaymentTransactionFailure(error.message));
            }
            break;

        case DELETE_PAYMENTTRANSACTION_REQUEST:
            try {
                const { id, PaymentTransaction } = action.payload;
                const response = deletePaymentTransaction(id);
                dispatch(deletePaymentTransactionSuccess(response.body));
            } catch (error) {
                dispatch(deletePaymentTransactionFailure(error.message));
            }
            break;

        default:
            break;
    }
};

