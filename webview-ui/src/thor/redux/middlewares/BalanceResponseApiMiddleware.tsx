
import { 
    getBalanceResponse, 
    postBalanceResponse,
    getBalanceResponseList , 
    deleteBalanceResponse , 
    updateBalanceResponse 
} from '../../api/BalanceResponseApi';

import {

    ADD_BALANCERESPONSE_REQUEST,
    FETCH_BALANCERESPONSE_REQUEST,
    LIST_BALANCERESPONSE_REQUEST,
    UPDATE_BALANCERESPONSE_REQUEST,
    DELETE_BALANCERESPONSE_REQUEST,

    addBalanceResponseFailure,
    addBalanceResponseSuccess,

    fetchBalanceResponseFailure,
    fetchBalanceResponseSuccess,
    
    listBalanceResponseFailure,
    listBalanceResponseSuccess,

    updateBalanceResponseFailure,
    updateBalanceResponseSuccess,
    
    deleteBalanceResponseFailure,
    deleteBalanceResponseSuccess,
    
} from '../actions/BalanceResponseApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: BalanceResponse
*/

export const BalanceResponseMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("BalanceResponse MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_BALANCERESPONSE_REQUEST:
            try {
                const response = postBalanceResponse(action.payload);
                dispatch(addBalanceResponseSuccess(response.body));
            } catch (error) {
                dispatch(addBalanceResponseFailure(error.message));
            }
            break;

        case LIST_BALANCERESPONSE_REQUEST:
            try {
                const response = getBalanceResponseList({});
                dispatch(listBalanceResponseSuccess(response.body));
            } catch (error) {
                dispatch(listBalanceResponseFailure(error.message));
            }
            break;


        case FETCH_BALANCERESPONSE_REQUEST:
            try {
                const response = getBalanceResponse(action.id);
                dispatch(fetchBalanceResponseSuccess(response.body));
            } catch (error) {
                dispatch(fetchBalanceResponseFailure(error.message));
            }
            break;

        case UPDATE_BALANCERESPONSE_REQUEST:
            try {
                const { id, BalanceResponse } = action.payload;
                const response = updateBalanceResponse(id);
                dispatch(updateBalanceResponseSuccess(response.body));
            } catch (error) {
                dispatch(updateBalanceResponseFailure(error.message));
            }
            break;

        case DELETE_BALANCERESPONSE_REQUEST:
            try {
                const { id, BalanceResponse } = action.payload;
                const response = deleteBalanceResponse(id);
                dispatch(deleteBalanceResponseSuccess(response.body));
            } catch (error) {
                dispatch(deleteBalanceResponseFailure(error.message));
            }
            break;

        default:
            break;
    }
};

