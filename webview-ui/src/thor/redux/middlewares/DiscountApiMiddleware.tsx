/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-09-19T15:19:30.243687-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/apiRest.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/

import { 
    getDiscount, 
    postDiscount,
    getDiscountList , 
    deleteDiscount , 
    updateDiscount 
} from '@thor/api/DiscountApi';

import {

    ADD_DISCOUNT_REQUEST,
    FETCH_DISCOUNT_REQUEST,
    LIST_DISCOUNT_REQUEST,
    UPDATE_DISCOUNT_REQUEST,
    DELETE_DISCOUNT_REQUEST,

    addDiscountFailure,
    addDiscountSuccess,

    fetchDiscountFailure,
    fetchDiscountSuccess,
    
    listDiscountFailure,
    listDiscountSuccess,

    updateDiscountFailure,
    updateDiscountSuccess,
    
    deleteDiscountFailure,
    deleteDiscountSuccess,
    
} from '../actions/DiscountApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: Discount
*/

export const DiscountMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("Discount MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_DISCOUNT_REQUEST:
            try {
                const response = postDiscount(action.payload);
                dispatch(addDiscountSuccess(response.body));
            } catch (error) {
                dispatch(addDiscountFailure(error.message));
            }
            break;

        case LIST_DISCOUNT_REQUEST:
            try {
                const response = getDiscountList({});
                dispatch(listDiscountSuccess(response.body));
            } catch (error) {
                dispatch(listDiscountFailure(error.message));
            }
            break;


        case FETCH_DISCOUNT_REQUEST:
            try {
                const response = getDiscount(action.id);
                dispatch(fetchDiscountSuccess(response.body));
            } catch (error) {
                dispatch(fetchDiscountFailure(error.message));
            }
            break;

        case UPDATE_DISCOUNT_REQUEST:
            try {
                const { id, Discount } = action.payload;
                const response = updateDiscount(id);
                dispatch(updateDiscountSuccess(response.body));
            } catch (error) {
                dispatch(updateDiscountFailure(error.message));
            }
            break;

        case DELETE_DISCOUNT_REQUEST:
            try {
                const { id, Discount } = action.payload;
                const response = deleteDiscount(id);
                dispatch(deleteDiscountSuccess(response.body));
            } catch (error) {
                dispatch(deleteDiscountFailure(error.message));
            }
            break;

        default:
            break;
    }
};

