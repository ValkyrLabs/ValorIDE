
import { 
    getMcpContent, 
    postMcpContent,
    getMcpContentList , 
    deleteMcpContent , 
    updateMcpContent 
} from '../../api';

import {

    ADD_MCPCONTENT_REQUEST,
    FETCH_MCPCONTENT_REQUEST,
    LIST_MCPCONTENT_REQUEST,
    UPDATE_MCPCONTENT_REQUEST,
    DELETE_MCPCONTENT_REQUEST,

    addMcpContentFailure,
    addMcpContentSuccess,

    fetchMcpContentFailure,
    fetchMcpContentSuccess,
    
    listMcpContentFailure,
    listMcpContentSuccess,

    updateMcpContentFailure,
    updateMcpContentSuccess,
    
    deleteMcpContentFailure,
    deleteMcpContentSuccess,
    
} from '../actions/McpContentApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: McpContent
*/

export const McpContentMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("McpContent MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_MCPCONTENT_REQUEST:
            try {
                const response = postMcpContent(action.payload);
                dispatch(addMcpContentSuccess(response.body));
            } catch (error) {
                dispatch(addMcpContentFailure(error.message));
            }
            break;

        case LIST_MCPCONTENT_REQUEST:
            try {
                const response = getMcpContentList();
                dispatch(listMcpContentSuccess(response.body));
            } catch (error) {
                dispatch(listMcpContentFailure(error.message));
            }
            break;


        case FETCH_MCPCONTENT_REQUEST:
            try {
                const response = getMcpContent(action.id);
                dispatch(fetchMcpContentSuccess(response.body));
            } catch (error) {
                dispatch(fetchMcpContentFailure(error.message));
            }
            break;

        case UPDATE_MCPCONTENT_REQUEST:
            try {
                const { id, McpContent } = action.payload;
                const response = updateMcpContent(id);
                dispatch(updateMcpContentSuccess(response.body));
            } catch (error) {
                dispatch(updateMcpContentFailure(error.message));
            }
            break;

        case DELETE_MCPCONTENT_REQUEST:
            try {
                const { id, McpContent } = action.payload;
                const response = deleteMcpContent(id);
                dispatch(deleteMcpContentSuccess(response.body));
            } catch (error) {
                dispatch(deleteMcpContentFailure(error.message));
            }
            break;

        default:
            break;
    }
};

