/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-03T07:35:49.309640-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/apiRest.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/

import { 
    getAclEntry, 
    postAclEntry,
    getAclEntryList , 
    deleteAclEntry , 
    updateAclEntry 
} from '@thor/api/AclEntryApi';

import {

    ADD_ACLENTRY_REQUEST,
    FETCH_ACLENTRY_REQUEST,
    LIST_ACLENTRY_REQUEST,
    UPDATE_ACLENTRY_REQUEST,
    DELETE_ACLENTRY_REQUEST,

    addAclEntryFailure,
    addAclEntrySuccess,

    fetchAclEntryFailure,
    fetchAclEntrySuccess,
    
    listAclEntryFailure,
    listAclEntrySuccess,

    updateAclEntryFailure,
    updateAclEntrySuccess,
    
    deleteAclEntryFailure,
    deleteAclEntrySuccess,
    
} from '../actions/AclEntryApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: AclEntry
*/

export const AclEntryMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("AclEntry MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_ACLENTRY_REQUEST:
            try {
                const response = postAclEntry(action.payload);
                dispatch(addAclEntrySuccess(response.body));
            } catch (error) {
                dispatch(addAclEntryFailure(error.message));
            }
            break;

        case LIST_ACLENTRY_REQUEST:
            try {
                const response = getAclEntryList({});
                dispatch(listAclEntrySuccess(response.body));
            } catch (error) {
                dispatch(listAclEntryFailure(error.message));
            }
            break;


        case FETCH_ACLENTRY_REQUEST:
            try {
                const response = getAclEntry(action.id);
                dispatch(fetchAclEntrySuccess(response.body));
            } catch (error) {
                dispatch(fetchAclEntryFailure(error.message));
            }
            break;

        case UPDATE_ACLENTRY_REQUEST:
            try {
                const { id, AclEntry } = action.payload;
                const response = updateAclEntry(id);
                dispatch(updateAclEntrySuccess(response.body));
            } catch (error) {
                dispatch(updateAclEntryFailure(error.message));
            }
            break;

        case DELETE_ACLENTRY_REQUEST:
            try {
                const { id, AclEntry } = action.payload;
                const response = deleteAclEntry(id);
                dispatch(deleteAclEntrySuccess(response.body));
            } catch (error) {
                dispatch(deleteAclEntryFailure(error.message));
            }
            break;

        default:
            break;
    }
};

