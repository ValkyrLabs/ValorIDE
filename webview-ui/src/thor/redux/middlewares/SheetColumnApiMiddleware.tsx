/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-03T07:35:49.309640-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/apiRest.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/

import { 
    getSheetColumn, 
    postSheetColumn,
    getSheetColumnList , 
    deleteSheetColumn , 
    updateSheetColumn 
} from '@thor/api/SheetColumnApi';

import {

    ADD_SHEETCOLUMN_REQUEST,
    FETCH_SHEETCOLUMN_REQUEST,
    LIST_SHEETCOLUMN_REQUEST,
    UPDATE_SHEETCOLUMN_REQUEST,
    DELETE_SHEETCOLUMN_REQUEST,

    addSheetColumnFailure,
    addSheetColumnSuccess,

    fetchSheetColumnFailure,
    fetchSheetColumnSuccess,
    
    listSheetColumnFailure,
    listSheetColumnSuccess,

    updateSheetColumnFailure,
    updateSheetColumnSuccess,
    
    deleteSheetColumnFailure,
    deleteSheetColumnSuccess,
    
} from '../actions/SheetColumnApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: SheetColumn
*/

export const SheetColumnMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("SheetColumn MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_SHEETCOLUMN_REQUEST:
            try {
                const response = postSheetColumn(action.payload);
                dispatch(addSheetColumnSuccess(response.body));
            } catch (error) {
                dispatch(addSheetColumnFailure(error.message));
            }
            break;

        case LIST_SHEETCOLUMN_REQUEST:
            try {
                const response = getSheetColumnList({});
                dispatch(listSheetColumnSuccess(response.body));
            } catch (error) {
                dispatch(listSheetColumnFailure(error.message));
            }
            break;


        case FETCH_SHEETCOLUMN_REQUEST:
            try {
                const response = getSheetColumn(action.id);
                dispatch(fetchSheetColumnSuccess(response.body));
            } catch (error) {
                dispatch(fetchSheetColumnFailure(error.message));
            }
            break;

        case UPDATE_SHEETCOLUMN_REQUEST:
            try {
                const { id, SheetColumn } = action.payload;
                const response = updateSheetColumn(id);
                dispatch(updateSheetColumnSuccess(response.body));
            } catch (error) {
                dispatch(updateSheetColumnFailure(error.message));
            }
            break;

        case DELETE_SHEETCOLUMN_REQUEST:
            try {
                const { id, SheetColumn } = action.payload;
                const response = deleteSheetColumn(id);
                dispatch(deleteSheetColumnSuccess(response.body));
            } catch (error) {
                dispatch(deleteSheetColumnFailure(error.message));
            }
            break;

        default:
            break;
    }
};

