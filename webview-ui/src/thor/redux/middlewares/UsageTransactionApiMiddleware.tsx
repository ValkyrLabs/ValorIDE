/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-09-19T15:19:30.243687-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/apiRest.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/

import { 
    getUsageTransaction, 
    postUsageTransaction,
    getUsageTransactionList , 
    deleteUsageTransaction , 
    updateUsageTransaction 
} from '@thor/api/UsageTransactionApi';

import {

    ADD_USAGETRANSACTION_REQUEST,
    FETCH_USAGETRANSACTION_REQUEST,
    LIST_USAGETRANSACTION_REQUEST,
    UPDATE_USAGETRANSACTION_REQUEST,
    DELETE_USAGETRANSACTION_REQUEST,

    addUsageTransactionFailure,
    addUsageTransactionSuccess,

    fetchUsageTransactionFailure,
    fetchUsageTransactionSuccess,
    
    listUsageTransactionFailure,
    listUsageTransactionSuccess,

    updateUsageTransactionFailure,
    updateUsageTransactionSuccess,
    
    deleteUsageTransactionFailure,
    deleteUsageTransactionSuccess,
    
} from '../actions/UsageTransactionApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: UsageTransaction
*/

export const UsageTransactionMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("UsageTransaction MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_USAGETRANSACTION_REQUEST:
            try {
                const response = postUsageTransaction(action.payload);
                dispatch(addUsageTransactionSuccess(response.body));
            } catch (error) {
                dispatch(addUsageTransactionFailure(error.message));
            }
            break;

        case LIST_USAGETRANSACTION_REQUEST:
            try {
                const response = getUsageTransactionList({});
                dispatch(listUsageTransactionSuccess(response.body));
            } catch (error) {
                dispatch(listUsageTransactionFailure(error.message));
            }
            break;


        case FETCH_USAGETRANSACTION_REQUEST:
            try {
                const response = getUsageTransaction(action.id);
                dispatch(fetchUsageTransactionSuccess(response.body));
            } catch (error) {
                dispatch(fetchUsageTransactionFailure(error.message));
            }
            break;

        case UPDATE_USAGETRANSACTION_REQUEST:
            try {
                const { id, UsageTransaction } = action.payload;
                const response = updateUsageTransaction(id);
                dispatch(updateUsageTransactionSuccess(response.body));
            } catch (error) {
                dispatch(updateUsageTransactionFailure(error.message));
            }
            break;

        case DELETE_USAGETRANSACTION_REQUEST:
            try {
                const { id, UsageTransaction } = action.payload;
                const response = deleteUsageTransaction(id);
                dispatch(deleteUsageTransactionSuccess(response.body));
            } catch (error) {
                dispatch(deleteUsageTransactionFailure(error.message));
            }
            break;

        default:
            break;
    }
};

