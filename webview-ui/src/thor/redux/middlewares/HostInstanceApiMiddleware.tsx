
import { 
    getHostInstance, 
    postHostInstance,
    getHostInstanceList , 
    deleteHostInstance , 
    updateHostInstance 
} from '../../api/HostInstanceApi';

import {

    ADD_HOSTINSTANCE_REQUEST,
    FETCH_HOSTINSTANCE_REQUEST,
    LIST_HOSTINSTANCE_REQUEST,
    UPDATE_HOSTINSTANCE_REQUEST,
    DELETE_HOSTINSTANCE_REQUEST,

    addHostInstanceFailure,
    addHostInstanceSuccess,

    fetchHostInstanceFailure,
    fetchHostInstanceSuccess,
    
    listHostInstanceFailure,
    listHostInstanceSuccess,

    updateHostInstanceFailure,
    updateHostInstanceSuccess,
    
    deleteHostInstanceFailure,
    deleteHostInstanceSuccess,
    
} from '../actions/HostInstanceApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: HostInstance
*/

export const HostInstanceMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("HostInstance MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_HOSTINSTANCE_REQUEST:
            try {
                const response = postHostInstance(action.payload);
                dispatch(addHostInstanceSuccess(response.body));
            } catch (error) {
                dispatch(addHostInstanceFailure(error.message));
            }
            break;

        case LIST_HOSTINSTANCE_REQUEST:
            try {
                const response = getHostInstanceList({});
                dispatch(listHostInstanceSuccess(response.body));
            } catch (error) {
                dispatch(listHostInstanceFailure(error.message));
            }
            break;


        case FETCH_HOSTINSTANCE_REQUEST:
            try {
                const response = getHostInstance(action.id);
                dispatch(fetchHostInstanceSuccess(response.body));
            } catch (error) {
                dispatch(fetchHostInstanceFailure(error.message));
            }
            break;

        case UPDATE_HOSTINSTANCE_REQUEST:
            try {
                const { id, HostInstance } = action.payload;
                const response = updateHostInstance(id);
                dispatch(updateHostInstanceSuccess(response.body));
            } catch (error) {
                dispatch(updateHostInstanceFailure(error.message));
            }
            break;

        case DELETE_HOSTINSTANCE_REQUEST:
            try {
                const { id, HostInstance } = action.payload;
                const response = deleteHostInstance(id);
                dispatch(deleteHostInstanceSuccess(response.body));
            } catch (error) {
                dispatch(deleteHostInstanceFailure(error.message));
            }
            break;

        default:
            break;
    }
};

