/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-09-19T15:19:30.243687-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/apiRest.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/

import { 
    getMcpMarketplaceCatalog, 
    postMcpMarketplaceCatalog,
    getMcpMarketplaceCatalogList , 
    deleteMcpMarketplaceCatalog , 
    updateMcpMarketplaceCatalog 
} from '@thor/api/McpMarketplaceCatalogApi';

import {

    ADD_MCPMARKETPLACECATALOG_REQUEST,
    FETCH_MCPMARKETPLACECATALOG_REQUEST,
    LIST_MCPMARKETPLACECATALOG_REQUEST,
    UPDATE_MCPMARKETPLACECATALOG_REQUEST,
    DELETE_MCPMARKETPLACECATALOG_REQUEST,

    addMcpMarketplaceCatalogFailure,
    addMcpMarketplaceCatalogSuccess,

    fetchMcpMarketplaceCatalogFailure,
    fetchMcpMarketplaceCatalogSuccess,
    
    listMcpMarketplaceCatalogFailure,
    listMcpMarketplaceCatalogSuccess,

    updateMcpMarketplaceCatalogFailure,
    updateMcpMarketplaceCatalogSuccess,
    
    deleteMcpMarketplaceCatalogFailure,
    deleteMcpMarketplaceCatalogSuccess,
    
} from '../actions/McpMarketplaceCatalogApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: McpMarketplaceCatalog
*/

export const McpMarketplaceCatalogMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("McpMarketplaceCatalog MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_MCPMARKETPLACECATALOG_REQUEST:
            try {
                const response = postMcpMarketplaceCatalog(action.payload);
                dispatch(addMcpMarketplaceCatalogSuccess(response.body));
            } catch (error) {
                dispatch(addMcpMarketplaceCatalogFailure(error.message));
            }
            break;

        case LIST_MCPMARKETPLACECATALOG_REQUEST:
            try {
                const response = getMcpMarketplaceCatalogList({});
                dispatch(listMcpMarketplaceCatalogSuccess(response.body));
            } catch (error) {
                dispatch(listMcpMarketplaceCatalogFailure(error.message));
            }
            break;


        case FETCH_MCPMARKETPLACECATALOG_REQUEST:
            try {
                const response = getMcpMarketplaceCatalog(action.id);
                dispatch(fetchMcpMarketplaceCatalogSuccess(response.body));
            } catch (error) {
                dispatch(fetchMcpMarketplaceCatalogFailure(error.message));
            }
            break;

        case UPDATE_MCPMARKETPLACECATALOG_REQUEST:
            try {
                const { id, McpMarketplaceCatalog } = action.payload;
                const response = updateMcpMarketplaceCatalog(id);
                dispatch(updateMcpMarketplaceCatalogSuccess(response.body));
            } catch (error) {
                dispatch(updateMcpMarketplaceCatalogFailure(error.message));
            }
            break;

        case DELETE_MCPMARKETPLACECATALOG_REQUEST:
            try {
                const { id, McpMarketplaceCatalog } = action.payload;
                const response = deleteMcpMarketplaceCatalog(id);
                dispatch(deleteMcpMarketplaceCatalogSuccess(response.body));
            } catch (error) {
                dispatch(deleteMcpMarketplaceCatalogFailure(error.message));
            }
            break;

        default:
            break;
    }
};

