/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-03T07:35:49.309640-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/apiRest.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/

import { 
    getSheet, 
    postSheet,
    getSheetList , 
    deleteSheet , 
    updateSheet 
} from '@thor/api/SheetApi';

import {

    ADD_SHEET_REQUEST,
    FETCH_SHEET_REQUEST,
    LIST_SHEET_REQUEST,
    UPDATE_SHEET_REQUEST,
    DELETE_SHEET_REQUEST,

    addSheetFailure,
    addSheetSuccess,

    fetchSheetFailure,
    fetchSheetSuccess,
    
    listSheetFailure,
    listSheetSuccess,

    updateSheetFailure,
    updateSheetSuccess,
    
    deleteSheetFailure,
    deleteSheetSuccess,
    
} from '../actions/SheetApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: Sheet
*/

export const SheetMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("Sheet MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_SHEET_REQUEST:
            try {
                const response = postSheet(action.payload);
                dispatch(addSheetSuccess(response.body));
            } catch (error) {
                dispatch(addSheetFailure(error.message));
            }
            break;

        case LIST_SHEET_REQUEST:
            try {
                const response = getSheetList({});
                dispatch(listSheetSuccess(response.body));
            } catch (error) {
                dispatch(listSheetFailure(error.message));
            }
            break;


        case FETCH_SHEET_REQUEST:
            try {
                const response = getSheet(action.id);
                dispatch(fetchSheetSuccess(response.body));
            } catch (error) {
                dispatch(fetchSheetFailure(error.message));
            }
            break;

        case UPDATE_SHEET_REQUEST:
            try {
                const { id, Sheet } = action.payload;
                const response = updateSheet(id);
                dispatch(updateSheetSuccess(response.body));
            } catch (error) {
                dispatch(updateSheetFailure(error.message));
            }
            break;

        case DELETE_SHEET_REQUEST:
            try {
                const { id, Sheet } = action.payload;
                const response = deleteSheet(id);
                dispatch(deleteSheetSuccess(response.body));
            } catch (error) {
                dispatch(deleteSheetFailure(error.message));
            }
            break;

        default:
            break;
    }
};

