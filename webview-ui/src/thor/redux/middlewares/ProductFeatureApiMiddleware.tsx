/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-09-19T15:19:30.243687-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/apiRest.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/

import { 
    getProductFeature, 
    postProductFeature,
    getProductFeatureList , 
    deleteProductFeature , 
    updateProductFeature 
} from '@thor/api/ProductFeatureApi';

import {

    ADD_PRODUCTFEATURE_REQUEST,
    FETCH_PRODUCTFEATURE_REQUEST,
    LIST_PRODUCTFEATURE_REQUEST,
    UPDATE_PRODUCTFEATURE_REQUEST,
    DELETE_PRODUCTFEATURE_REQUEST,

    addProductFeatureFailure,
    addProductFeatureSuccess,

    fetchProductFeatureFailure,
    fetchProductFeatureSuccess,
    
    listProductFeatureFailure,
    listProductFeatureSuccess,

    updateProductFeatureFailure,
    updateProductFeatureSuccess,
    
    deleteProductFeatureFailure,
    deleteProductFeatureSuccess,
    
} from '../actions/ProductFeatureApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: ProductFeature
*/

export const ProductFeatureMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("ProductFeature MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_PRODUCTFEATURE_REQUEST:
            try {
                const response = postProductFeature(action.payload);
                dispatch(addProductFeatureSuccess(response.body));
            } catch (error) {
                dispatch(addProductFeatureFailure(error.message));
            }
            break;

        case LIST_PRODUCTFEATURE_REQUEST:
            try {
                const response = getProductFeatureList({});
                dispatch(listProductFeatureSuccess(response.body));
            } catch (error) {
                dispatch(listProductFeatureFailure(error.message));
            }
            break;


        case FETCH_PRODUCTFEATURE_REQUEST:
            try {
                const response = getProductFeature(action.id);
                dispatch(fetchProductFeatureSuccess(response.body));
            } catch (error) {
                dispatch(fetchProductFeatureFailure(error.message));
            }
            break;

        case UPDATE_PRODUCTFEATURE_REQUEST:
            try {
                const { id, ProductFeature } = action.payload;
                const response = updateProductFeature(id);
                dispatch(updateProductFeatureSuccess(response.body));
            } catch (error) {
                dispatch(updateProductFeatureFailure(error.message));
            }
            break;

        case DELETE_PRODUCTFEATURE_REQUEST:
            try {
                const { id, ProductFeature } = action.payload;
                const response = deleteProductFeature(id);
                dispatch(deleteProductFeatureSuccess(response.body));
            } catch (error) {
                dispatch(deleteProductFeatureFailure(error.message));
            }
            break;

        default:
            break;
    }
};

