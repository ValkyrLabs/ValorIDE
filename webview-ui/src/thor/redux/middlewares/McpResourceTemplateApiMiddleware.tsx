/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-09-19T15:19:30.243687-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/apiRest.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/

import { 
    getMcpResourceTemplate, 
    postMcpResourceTemplate,
    getMcpResourceTemplateList , 
    deleteMcpResourceTemplate , 
    updateMcpResourceTemplate 
} from '@thor/api/McpResourceTemplateApi';

import {

    ADD_MCPRESOURCETEMPLATE_REQUEST,
    FETCH_MCPRESOURCETEMPLATE_REQUEST,
    LIST_MCPRESOURCETEMPLATE_REQUEST,
    UPDATE_MCPRESOURCETEMPLATE_REQUEST,
    DELETE_MCPRESOURCETEMPLATE_REQUEST,

    addMcpResourceTemplateFailure,
    addMcpResourceTemplateSuccess,

    fetchMcpResourceTemplateFailure,
    fetchMcpResourceTemplateSuccess,
    
    listMcpResourceTemplateFailure,
    listMcpResourceTemplateSuccess,

    updateMcpResourceTemplateFailure,
    updateMcpResourceTemplateSuccess,
    
    deleteMcpResourceTemplateFailure,
    deleteMcpResourceTemplateSuccess,
    
} from '../actions/McpResourceTemplateApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: McpResourceTemplate
*/

export const McpResourceTemplateMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("McpResourceTemplate MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_MCPRESOURCETEMPLATE_REQUEST:
            try {
                const response = postMcpResourceTemplate(action.payload);
                dispatch(addMcpResourceTemplateSuccess(response.body));
            } catch (error) {
                dispatch(addMcpResourceTemplateFailure(error.message));
            }
            break;

        case LIST_MCPRESOURCETEMPLATE_REQUEST:
            try {
                const response = getMcpResourceTemplateList({});
                dispatch(listMcpResourceTemplateSuccess(response.body));
            } catch (error) {
                dispatch(listMcpResourceTemplateFailure(error.message));
            }
            break;


        case FETCH_MCPRESOURCETEMPLATE_REQUEST:
            try {
                const response = getMcpResourceTemplate(action.id);
                dispatch(fetchMcpResourceTemplateSuccess(response.body));
            } catch (error) {
                dispatch(fetchMcpResourceTemplateFailure(error.message));
            }
            break;

        case UPDATE_MCPRESOURCETEMPLATE_REQUEST:
            try {
                const { id, McpResourceTemplate } = action.payload;
                const response = updateMcpResourceTemplate(id);
                dispatch(updateMcpResourceTemplateSuccess(response.body));
            } catch (error) {
                dispatch(updateMcpResourceTemplateFailure(error.message));
            }
            break;

        case DELETE_MCPRESOURCETEMPLATE_REQUEST:
            try {
                const { id, McpResourceTemplate } = action.payload;
                const response = deleteMcpResourceTemplate(id);
                dispatch(deleteMcpResourceTemplateSuccess(response.body));
            } catch (error) {
                dispatch(deleteMcpResourceTemplateFailure(error.message));
            }
            break;

        default:
            break;
    }
};

