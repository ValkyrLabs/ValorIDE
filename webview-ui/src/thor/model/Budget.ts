// tslint:disable
/**
 * ValkyrAI CORE API
 * The API for accessing ValkyrAI services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// tslint:disable
/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelGeneric.ts.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/
import { exists, mapValues } from '../src/runtime';

// thorapi

/**
 * Per-principal budget tracking for cost control and kill switches
 * @export
 * @interface Budget
 */
export type Budget  = {
    /**
     * Reference to the Principal (user/team) this budget applies to
     * @type {string}
     * @memberof Budget
     */
    principalId?: string;
    /**
     * Budget name (e.g. \"Q4 2025 API Budget\")
     * @type {string}
     * @memberof Budget
     */
    name?: string;
    /**
     * Start of budget period
     * @type {Date}
     * @memberof Budget
     */
    periodStart?: Date;
    /**
     * End of budget period
     * @type {Date}
     * @memberof Budget
     */
    periodEnd?: Date;
    /**
     * Maximum cost tokens allowed in this period
     * @type {number}
     * @memberof Budget
     */
    maxCostTokens?: number;
    /**
     * Maximum workflow executions allowed in this period
     * @type {number}
     * @memberof Budget
     */
    maxExecutions?: number;
    /**
     * Current cost tokens consumed
     * @type {number}
     * @memberof Budget
     */
    currentCostTokens?: number;
    /**
     * Current workflow executions count
     * @type {number}
     * @memberof Budget
     */
    currentExecutions?: number;
    /**
     * Percentage threshold to trigger alerts (e.g. 0.8 for 80%)
     * @type {number}
     * @memberof Budget
     */
    alertThreshold?: number;
    /**
     * Whether to block executions when budget exceeded
     * @type {boolean}
     * @memberof Budget
     */
    killSwitchEnabled?: boolean;
    /**
     * Budget status
     * @type {string}
     * @memberof Budget
     */
    status?: BudgetStatusEnum;
    /**
     * Unique identifier for object in the system
     * @type {string}
     * @memberof Budget
     */
    id?: string;
    /**
     * UUID of owner of the object in the system
     * @type {string}
     * @memberof Budget
     */
    ownerId?: string;
    /**
     * Date of object creation
     * @type {Date}
     * @memberof Budget
     */
    createdDate?: Date;
    /**
     * Data, including hash of the key(s) used to encrypt this record.
     * @type {string}
     * @memberof Budget
     */
    keyHash?: string;
    /**
     * Last user to access object
     * @type {string}
     * @memberof Budget
     */
    lastAccessedById?: string;
    /**
     * Timestamp of last access of object
     * @type {Date}
     * @memberof Budget
     */
    lastAccessedDate?: Date;
    /**
     * Unique identifier for user who last modifed the object in the system
     * @type {string}
     * @memberof Budget
     */
    lastModifiedById?: string;
    /**
     * Date of last object modification
     * @type {Date}
     * @memberof Budget
     */
    lastModifiedDate?: Date;
}

export function BudgetFromJSON(json: any): Budget {
    return {
        'principalId': !exists(json, 'principalId') ? undefined : json['principalId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'periodStart': !exists(json, 'periodStart') ? undefined : new Date(json['periodStart']),
        'periodEnd': !exists(json, 'periodEnd') ? undefined : new Date(json['periodEnd']),
        'maxCostTokens': !exists(json, 'maxCostTokens') ? undefined : json['maxCostTokens'],
        'maxExecutions': !exists(json, 'maxExecutions') ? undefined : json['maxExecutions'],
        'currentCostTokens': !exists(json, 'currentCostTokens') ? undefined : json['currentCostTokens'],
        'currentExecutions': !exists(json, 'currentExecutions') ? undefined : json['currentExecutions'],
        'alertThreshold': !exists(json, 'alertThreshold') ? undefined : json['alertThreshold'],
        'killSwitchEnabled': !exists(json, 'killSwitchEnabled') ? undefined : json['killSwitchEnabled'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'keyHash': !exists(json, 'keyHash') ? undefined : json['keyHash'],
        'lastAccessedById': !exists(json, 'lastAccessedById') ? undefined : json['lastAccessedById'],
        'lastAccessedDate': !exists(json, 'lastAccessedDate') ? undefined : new Date(json['lastAccessedDate']),
        'lastModifiedById': !exists(json, 'lastModifiedById') ? undefined : json['lastModifiedById'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : new Date(json['lastModifiedDate']),
    };
}

export function BudgetToJSON(value?: Budget): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'principalId': value.principalId,
        'name': value.name,
        'periodStart': value.periodStart === undefined ? undefined : value.periodStart.toISOString(),
        'periodEnd': value.periodEnd === undefined ? undefined : value.periodEnd.toISOString(),
        'maxCostTokens': value.maxCostTokens,
        'maxExecutions': value.maxExecutions,
        'currentCostTokens': value.currentCostTokens,
        'currentExecutions': value.currentExecutions,
        'alertThreshold': value.alertThreshold,
        'killSwitchEnabled': value.killSwitchEnabled,
        'status': value.status,
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'keyHash': value.keyHash,
        'lastAccessedById': value.lastAccessedById,
        'lastAccessedDate': value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
        'lastModifiedById': value.lastModifiedById,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
    };
}

/**
* @export
* @enum {string}
*/
export enum BudgetStatusEnum {
    ACTIVE = 'active',
    EXCEEDED = 'exceeded',
    EXPIRED = 'expired'
}


