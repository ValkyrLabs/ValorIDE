// tslint:disable
/**
 * ValkyrAI CORE API
 * The API for accessing ValkyrAI services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// tslint:disable
/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelGeneric.ts.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/
import { exists, mapValues } from '../src/runtime';
import {


    McpDownloadResponse,
    McpDownloadResponseFromJSON,
    McpDownloadResponseToJSON,
    McpMarketplaceCatalog,
    McpMarketplaceCatalogFromJSON,
    McpMarketplaceCatalogToJSON,
    McpMarketplaceItem,
    McpMarketplaceItemFromJSON,
    McpMarketplaceItemToJSON,
    McpResourceResponse,
    McpResourceResponseFromJSON,
    McpResourceResponseToJSON,
    McpServer,
    McpServerFromJSON,
    McpServerToJSON,
    McpToolCallResponse,
    McpToolCallResponseFromJSON,
    McpToolCallResponseToJSON,
    McpToolPreset,
    McpToolPresetFromJSON,
    McpToolPresetToJSON,
} from './';


// thorapi

/**
 * Aggregated Model Context Protocol configuration exposed to ValorIDE.
 * @export
 * @interface Mcp
 */
export type Mcp  = {
    /**
     * Global MCP operating mode that clients should honor.
     * @type {string}
     * @memberof Mcp
     */
    mode?: McpModeEnum;
    /**
     * Registered MCP servers alongside their tools and resources.
     * @type {Array<McpServer>}
     * @memberof Mcp
     */
    servers?: Array<McpServer>;
    /**
     * Marketplace catalogs available for MCP discovery.
     * @type {Array<McpMarketplaceCatalog>}
     * @memberof Mcp
     */
    marketplaceCatalogs?: Array<McpMarketplaceCatalog>;
    /**
     * Marketplace items exposed outside of catalog context.
     * @type {Array<McpMarketplaceItem>}
     * @memberof Mcp
     */
    marketplaceItems?: Array<McpMarketplaceItem>;
    /**
     * Cached download metadata returned from marketplace installations.
     * @type {Array<McpDownloadResponse>}
     * @memberof Mcp
     */
    downloads?: Array<McpDownloadResponse>;
    /**
     * Cached resource payloads returned from MCP resource access.
     * @type {Array<McpResourceResponse>}
     * @memberof Mcp
     */
    resourceResponses?: Array<McpResourceResponse>;
    /**
     * Historical tool call responses emitted by MCP servers.
     * @type {Array<McpToolCallResponse>}
     * @memberof Mcp
     */
    toolCallResponses?: Array<McpToolCallResponse>;
    /**
     * Curated MCP tool presets shipped with ValkyrAI.
     * @type {Array<McpToolPreset>}
     * @memberof Mcp
     */
    toolPresets?: Array<McpToolPreset>;
    /**
     * Unique identifier for object in the system
     * @type {string}
     * @memberof Mcp
     */
    id?: string;
    /**
     * UUID of owner of the object in the system
     * @type {string}
     * @memberof Mcp
     */
    ownerId?: string;
    /**
     * Date of object creation
     * @type {Date}
     * @memberof Mcp
     */
    createdDate?: Date;
    /**
     * Data, including hash of the key(s) used to encrypt this record.
     * @type {string}
     * @memberof Mcp
     */
    keyHash?: string;
    /**
     * Last user to access object
     * @type {string}
     * @memberof Mcp
     */
    lastAccessedById?: string;
    /**
     * Timestamp of last access of object
     * @type {Date}
     * @memberof Mcp
     */
    lastAccessedDate?: Date;
    /**
     * Unique identifier for user who last modifed the object in the system
     * @type {string}
     * @memberof Mcp
     */
    lastModifiedById?: string;
    /**
     * Date of last object modification
     * @type {Date}
     * @memberof Mcp
     */
    lastModifiedDate?: Date;
}

export function McpFromJSON(json: any): Mcp {
    return {
        'mode': !exists(json, 'mode') ? undefined : json['mode'],
        'servers': !exists(json, 'servers') ? undefined : (json['servers'] as Array<any>).map(McpServerFromJSON),
        'marketplaceCatalogs': !exists(json, 'marketplaceCatalogs') ? undefined : (json['marketplaceCatalogs'] as Array<any>).map(McpMarketplaceCatalogFromJSON),
        'marketplaceItems': !exists(json, 'marketplaceItems') ? undefined : (json['marketplaceItems'] as Array<any>).map(McpMarketplaceItemFromJSON),
        'downloads': !exists(json, 'downloads') ? undefined : (json['downloads'] as Array<any>).map(McpDownloadResponseFromJSON),
        'resourceResponses': !exists(json, 'resourceResponses') ? undefined : (json['resourceResponses'] as Array<any>).map(McpResourceResponseFromJSON),
        'toolCallResponses': !exists(json, 'toolCallResponses') ? undefined : (json['toolCallResponses'] as Array<any>).map(McpToolCallResponseFromJSON),
        'toolPresets': !exists(json, 'toolPresets') ? undefined : (json['toolPresets'] as Array<any>).map(McpToolPresetFromJSON),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'keyHash': !exists(json, 'keyHash') ? undefined : json['keyHash'],
        'lastAccessedById': !exists(json, 'lastAccessedById') ? undefined : json['lastAccessedById'],
        'lastAccessedDate': !exists(json, 'lastAccessedDate') ? undefined : new Date(json['lastAccessedDate']),
        'lastModifiedById': !exists(json, 'lastModifiedById') ? undefined : json['lastModifiedById'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : new Date(json['lastModifiedDate']),
    };
}

export function McpToJSON(value?: Mcp): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'mode': value.mode,
        'servers': value.servers === undefined ? undefined : (value.servers as Array<any>).map(McpServerToJSON),
        'marketplaceCatalogs': value.marketplaceCatalogs === undefined ? undefined : (value.marketplaceCatalogs as Array<any>).map(McpMarketplaceCatalogToJSON),
        'marketplaceItems': value.marketplaceItems === undefined ? undefined : (value.marketplaceItems as Array<any>).map(McpMarketplaceItemToJSON),
        'downloads': value.downloads === undefined ? undefined : (value.downloads as Array<any>).map(McpDownloadResponseToJSON),
        'resourceResponses': value.resourceResponses === undefined ? undefined : (value.resourceResponses as Array<any>).map(McpResourceResponseToJSON),
        'toolCallResponses': value.toolCallResponses === undefined ? undefined : (value.toolCallResponses as Array<any>).map(McpToolCallResponseToJSON),
        'toolPresets': value.toolPresets === undefined ? undefined : (value.toolPresets as Array<any>).map(McpToolPresetToJSON),
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'keyHash': value.keyHash,
        'lastAccessedById': value.lastAccessedById,
        'lastAccessedDate': value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
        'lastModifiedById': value.lastModifiedById,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
    };
}

/**
* @export
* @enum {string}
*/
export enum McpModeEnum {
    FULL = 'full',
    SERVERUSEONLY = 'server-use-only',
    FALSE = 'false'
}


