// tslint:disable
/**
 * ValkyrAI CORE API
 * The API for accessing ValkyrAI services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// tslint:disable
/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelGeneric.ts.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/
import { exists, mapValues } from '../src/runtime';

// thorapi

/**
 * Per-principal quota limits for rate limiting and concurrency control
 * @export
 * @interface Quota
 */
export type Quota  = {
    /**
     * Reference to the Principal this quota applies to
     * @type {string}
     * @memberof Quota
     */
    principalId?: string;
    /**
     * Type of resource being limited
     * @type {string}
     * @memberof Quota
     */
    resourceType?: QuotaResourceTypeEnum;
    /**
     * Maximum concurrent operations
     * @type {number}
     * @memberof Quota
     */
    maxConcurrent?: number;
    /**
     * Maximum operations per hour
     * @type {number}
     * @memberof Quota
     */
    maxPerHour?: number;
    /**
     * Maximum operations per day
     * @type {number}
     * @memberof Quota
     */
    maxPerDay?: number;
    /**
     * Current concurrent operations count
     * @type {number}
     * @memberof Quota
     */
    currentConcurrent?: number;
    /**
     * Operations count in current hour
     * @type {number}
     * @memberof Quota
     */
    currentHourCount?: number;
    /**
     * Operations count in current day
     * @type {number}
     * @memberof Quota
     */
    currentDayCount?: number;
    /**
     * When hourly counter resets
     * @type {Date}
     * @memberof Quota
     */
    hourResetAt?: Date;
    /**
     * When daily counter resets
     * @type {Date}
     * @memberof Quota
     */
    dayResetAt?: Date;
    /**
     * Unique identifier for object in the system
     * @type {string}
     * @memberof Quota
     */
    id?: string;
    /**
     * UUID of owner of the object in the system
     * @type {string}
     * @memberof Quota
     */
    ownerId?: string;
    /**
     * Date of object creation
     * @type {Date}
     * @memberof Quota
     */
    createdDate?: Date;
    /**
     * Data, including hash of the key(s) used to encrypt this record.
     * @type {string}
     * @memberof Quota
     */
    keyHash?: string;
    /**
     * Last user to access object
     * @type {string}
     * @memberof Quota
     */
    lastAccessedById?: string;
    /**
     * Timestamp of last access of object
     * @type {Date}
     * @memberof Quota
     */
    lastAccessedDate?: Date;
    /**
     * Unique identifier for user who last modifed the object in the system
     * @type {string}
     * @memberof Quota
     */
    lastModifiedById?: string;
    /**
     * Date of last object modification
     * @type {Date}
     * @memberof Quota
     */
    lastModifiedDate?: Date;
}

export function QuotaFromJSON(json: any): Quota {
    return {
        'principalId': !exists(json, 'principalId') ? undefined : json['principalId'],
        'resourceType': !exists(json, 'resourceType') ? undefined : json['resourceType'],
        'maxConcurrent': !exists(json, 'maxConcurrent') ? undefined : json['maxConcurrent'],
        'maxPerHour': !exists(json, 'maxPerHour') ? undefined : json['maxPerHour'],
        'maxPerDay': !exists(json, 'maxPerDay') ? undefined : json['maxPerDay'],
        'currentConcurrent': !exists(json, 'currentConcurrent') ? undefined : json['currentConcurrent'],
        'currentHourCount': !exists(json, 'currentHourCount') ? undefined : json['currentHourCount'],
        'currentDayCount': !exists(json, 'currentDayCount') ? undefined : json['currentDayCount'],
        'hourResetAt': !exists(json, 'hourResetAt') ? undefined : new Date(json['hourResetAt']),
        'dayResetAt': !exists(json, 'dayResetAt') ? undefined : new Date(json['dayResetAt']),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'keyHash': !exists(json, 'keyHash') ? undefined : json['keyHash'],
        'lastAccessedById': !exists(json, 'lastAccessedById') ? undefined : json['lastAccessedById'],
        'lastAccessedDate': !exists(json, 'lastAccessedDate') ? undefined : new Date(json['lastAccessedDate']),
        'lastModifiedById': !exists(json, 'lastModifiedById') ? undefined : json['lastModifiedById'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : new Date(json['lastModifiedDate']),
    };
}

export function QuotaToJSON(value?: Quota): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'principalId': value.principalId,
        'resourceType': value.resourceType,
        'maxConcurrent': value.maxConcurrent,
        'maxPerHour': value.maxPerHour,
        'maxPerDay': value.maxPerDay,
        'currentConcurrent': value.currentConcurrent,
        'currentHourCount': value.currentHourCount,
        'currentDayCount': value.currentDayCount,
        'hourResetAt': value.hourResetAt === undefined ? undefined : value.hourResetAt.toISOString(),
        'dayResetAt': value.dayResetAt === undefined ? undefined : value.dayResetAt.toISOString(),
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'keyHash': value.keyHash,
        'lastAccessedById': value.lastAccessedById,
        'lastAccessedDate': value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
        'lastModifiedById': value.lastModifiedById,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
    };
}

/**
* @export
* @enum {string}
*/
export enum QuotaResourceTypeEnum {
    WORKFLOWEXECUTION = 'workflow_execution',
    APICALL = 'api_call',
    LLMREQUEST = 'llm_request',
    EMAILSEND = 'email_send',
    FILEUPLOAD = 'file_upload'
}


