// tslint:disable
/**
 * ValkyrAI CORE API
 * The API for accessing ValkyrAI services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// tslint:disable
/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelGeneric.ts.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/
import { exists, mapValues } from '../src/runtime';
import {


    DigitalAsset,
    DigitalAssetFromJSON,
    DigitalAssetToJSON,
    Principal,
    PrincipalFromJSON,
    PrincipalToJSON,
} from './';


// thorapi

/**
 * Row-level permission grant for a Principal to download a DigitalAsset. Represents the \"fulfillment\" of a digital order line item. Uses Spring ACL for object-level enforcement; backed by ValkyrAclService.grantPermission(). Access is granted automatically when an OrderFulfillmentTask completes successfully. 
 * @export
 * @interface DownloadAccess
 */
export type DownloadAccess  = {
    /**
     * DigitalAsset this access unlocks.
     * @type {string}
     * @memberof DownloadAccess
     */
    digitalAssetId: string;
    /**
     * Principal (customer/user) granted access.
     * @type {string}
     * @memberof DownloadAccess
     */
    principalId: string;
    /**
     * Reference to the LineItem that triggered this access grant. Links order fulfillment to access control. 
     * @type {string}
     * @memberof DownloadAccess
     */
    salesOrderLineItemId: string;
    /**
     * 
     * @type {DigitalAsset}
     * @memberof DownloadAccess
     */
    digitalAsset?: DigitalAsset;
    /**
     * 
     * @type {Principal}
     * @memberof DownloadAccess
     */
    principal?: Principal;
    /**
     * Secure, single-use token for download link generation. Regenerated on each DownloadAccess read to support multiple concurrent downloads. 
     * @type {string}
     * @memberof DownloadAccess
     */
    downloadToken?: string;
    /**
     * Number of times this access has been used to download.
     * @type {number}
     * @memberof DownloadAccess
     */
    downloadCount?: number;
    /**
     * Remaining downloads (-1 = unlimited). Decremented on each successful download; access revoked when zero. 
     * @type {number}
     * @memberof DownloadAccess
     */
    maxDownloadsRemaining?: number;
    /**
     * When access was granted (auto-filled by backend).
     * @type {Date}
     * @memberof DownloadAccess
     */
    grantedAt?: Date;
    /**
     * When download access expires (null = never expires).
     * @type {Date}
     * @memberof DownloadAccess
     */
    expiresAt?: Date;
    /**
     * Timestamp of the most recent download.
     * @type {Date}
     * @memberof DownloadAccess
     */
    lastDownloadedAt?: Date;
    /**
     * If revoked, timestamp of revocation (soft-delete).
     * @type {Date}
     * @memberof DownloadAccess
     */
    revokedAt?: Date;
    /**
     * Reason for revocation (e.g., refund, chargeback, policy violation).
     * @type {string}
     * @memberof DownloadAccess
     */
    revokedReason?: string;
    /**
     * Unique identifier for object in the system
     * @type {string}
     * @memberof DownloadAccess
     */
    id?: string;
    /**
     * UUID of owner of the object in the system
     * @type {string}
     * @memberof DownloadAccess
     */
    ownerId?: string;
    /**
     * Date of object creation
     * @type {Date}
     * @memberof DownloadAccess
     */
    createdDate?: Date;
    /**
     * Data, including hash of the key(s) used to encrypt this record.
     * @type {string}
     * @memberof DownloadAccess
     */
    keyHash?: string;
    /**
     * Last user to access object
     * @type {string}
     * @memberof DownloadAccess
     */
    lastAccessedById?: string;
    /**
     * Timestamp of last access of object
     * @type {Date}
     * @memberof DownloadAccess
     */
    lastAccessedDate?: Date;
    /**
     * Unique identifier for user who last modifed the object in the system
     * @type {string}
     * @memberof DownloadAccess
     */
    lastModifiedById?: string;
    /**
     * Date of last object modification
     * @type {Date}
     * @memberof DownloadAccess
     */
    lastModifiedDate?: Date;
}

export function DownloadAccessFromJSON(json: any): DownloadAccess {
    return {
        'digitalAssetId': json['digitalAssetId'],
        'principalId': json['principalId'],
        'salesOrderLineItemId': json['salesOrderLineItemId'],
        'digitalAsset': !exists(json, 'digitalAsset') ? undefined : DigitalAssetFromJSON(json['digitalAsset']),
        'principal': !exists(json, 'principal') ? undefined : PrincipalFromJSON(json['principal']),
        'downloadToken': !exists(json, 'downloadToken') ? undefined : json['downloadToken'],
        'downloadCount': !exists(json, 'downloadCount') ? undefined : json['downloadCount'],
        'maxDownloadsRemaining': !exists(json, 'maxDownloadsRemaining') ? undefined : json['maxDownloadsRemaining'],
        'grantedAt': !exists(json, 'grantedAt') ? undefined : new Date(json['grantedAt']),
        'expiresAt': !exists(json, 'expiresAt') ? undefined : new Date(json['expiresAt']),
        'lastDownloadedAt': !exists(json, 'lastDownloadedAt') ? undefined : new Date(json['lastDownloadedAt']),
        'revokedAt': !exists(json, 'revokedAt') ? undefined : new Date(json['revokedAt']),
        'revokedReason': !exists(json, 'revokedReason') ? undefined : json['revokedReason'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'keyHash': !exists(json, 'keyHash') ? undefined : json['keyHash'],
        'lastAccessedById': !exists(json, 'lastAccessedById') ? undefined : json['lastAccessedById'],
        'lastAccessedDate': !exists(json, 'lastAccessedDate') ? undefined : new Date(json['lastAccessedDate']),
        'lastModifiedById': !exists(json, 'lastModifiedById') ? undefined : json['lastModifiedById'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : new Date(json['lastModifiedDate']),
    };
}

export function DownloadAccessToJSON(value?: DownloadAccess): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'digitalAssetId': value.digitalAssetId,
        'principalId': value.principalId,
        'salesOrderLineItemId': value.salesOrderLineItemId,
        'digitalAsset': DigitalAssetToJSON(value.digitalAsset),
        'principal': PrincipalToJSON(value.principal),
        'downloadToken': value.downloadToken,
        'downloadCount': value.downloadCount,
        'maxDownloadsRemaining': value.maxDownloadsRemaining,
        'grantedAt': value.grantedAt === undefined ? undefined : value.grantedAt.toISOString(),
        'expiresAt': value.expiresAt === undefined ? undefined : value.expiresAt.toISOString(),
        'lastDownloadedAt': value.lastDownloadedAt === undefined ? undefined : value.lastDownloadedAt.toISOString(),
        'revokedAt': value.revokedAt === undefined ? undefined : value.revokedAt.toISOString(),
        'revokedReason': value.revokedReason,
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'keyHash': value.keyHash,
        'lastAccessedById': value.lastAccessedById,
        'lastAccessedDate': value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
        'lastModifiedById': value.lastModifiedById,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
    };
}


