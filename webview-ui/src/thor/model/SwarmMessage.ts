// tslint:disable
/**
 * ValkyrAI CORE API
 * The API for accessing ValkyrAI services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// tslint:disable
/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelGeneric.ts.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/
import { exists, mapValues } from '../src/runtime';
import {


    Swarm,
    SwarmFromJSON,
    SwarmToJSON,
    SwarmPayload,
    SwarmPayloadFromJSON,
    SwarmPayloadToJSON,
    SwarmSecurity,
    SwarmSecurityFromJSON,
    SwarmSecurityToJSON,
} from './';


// thorapi

/**
 * Structured message envelope for agentic swarm coordination.
 * @export
 * @interface SwarmMessage
 */
export type SwarmMessage  = {
    /**
     * Message classification.
     * @type {string}
     * @memberof SwarmMessage
     */
    type: SwarmMessageTypeEnum;
    /**
     * 
     * @type {Swarm}
     * @memberof SwarmMessage
     */
    from: Swarm;
    /**
     * 
     * @type {Swarm}
     * @memberof SwarmMessage
     */
    to: Swarm;
    /**
     * Timestamp representing when the message was created.
     * @type {Date}
     * @memberof SwarmMessage
     */
    timestamp: Date;
    /**
     * 
     * @type {SwarmPayload}
     * @memberof SwarmMessage
     */
    payload: SwarmPayload;
    /**
     * Identifier of the message being acknowledged.
     * @type {string}
     * @memberof SwarmMessage
     */
    ackId?: string;
    /**
     * 
     * @type {SwarmSecurity}
     * @memberof SwarmMessage
     */
    security?: SwarmSecurity;
    /**
     * Optional time-to-live in milliseconds.
     * @type {number}
     * @memberof SwarmMessage
     */
    ttl?: number;
    /**
     * Delivery priority indicator.
     * @type {string}
     * @memberof SwarmMessage
     */
    priority?: SwarmMessagePriorityEnum;
    /**
     * Unique identifier for object in the system
     * @type {string}
     * @memberof SwarmMessage
     */
    id?: string;
    /**
     * UUID of owner of the object in the system
     * @type {string}
     * @memberof SwarmMessage
     */
    ownerId?: string;
    /**
     * Date of object creation
     * @type {Date}
     * @memberof SwarmMessage
     */
    createdDate?: Date;
    /**
     * Data, including hash of the key(s) used to encrypt this record.
     * @type {string}
     * @memberof SwarmMessage
     */
    keyHash?: string;
    /**
     * Last user to access object
     * @type {string}
     * @memberof SwarmMessage
     */
    lastAccessedById?: string;
    /**
     * Timestamp of last access of object
     * @type {Date}
     * @memberof SwarmMessage
     */
    lastAccessedDate?: Date;
    /**
     * Unique identifier for user who last modifed the object in the system
     * @type {string}
     * @memberof SwarmMessage
     */
    lastModifiedById?: string;
    /**
     * Date of last object modification
     * @type {Date}
     * @memberof SwarmMessage
     */
    lastModifiedDate?: Date;
}

export function SwarmMessageFromJSON(json: any): SwarmMessage {
    return {
        'type': json['type'],
        'from': SwarmFromJSON(json['from']),
        'to': SwarmFromJSON(json['to']),
        'timestamp': new Date(json['timestamp']),
        'payload': SwarmPayloadFromJSON(json['payload']),
        'ackId': !exists(json, 'ackId') ? undefined : json['ackId'],
        'security': !exists(json, 'security') ? undefined : SwarmSecurityFromJSON(json['security']),
        'ttl': !exists(json, 'ttl') ? undefined : json['ttl'],
        'priority': !exists(json, 'priority') ? undefined : json['priority'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'keyHash': !exists(json, 'keyHash') ? undefined : json['keyHash'],
        'lastAccessedById': !exists(json, 'lastAccessedById') ? undefined : json['lastAccessedById'],
        'lastAccessedDate': !exists(json, 'lastAccessedDate') ? undefined : new Date(json['lastAccessedDate']),
        'lastModifiedById': !exists(json, 'lastModifiedById') ? undefined : json['lastModifiedById'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : new Date(json['lastModifiedDate']),
    };
}

export function SwarmMessageToJSON(value?: SwarmMessage): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'type': value.type,
        'from': SwarmToJSON(value.from),
        'to': SwarmToJSON(value.to),
        'timestamp': value.timestamp.toISOString(),
        'payload': SwarmPayloadToJSON(value.payload),
        'ackId': value.ackId,
        'security': SwarmSecurityToJSON(value.security),
        'ttl': value.ttl,
        'priority': value.priority,
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'keyHash': value.keyHash,
        'lastAccessedById': value.lastAccessedById,
        'lastAccessedDate': value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
        'lastModifiedById': value.lastModifiedById,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
    };
}

/**
* @export
* @enum {string}
*/
export enum SwarmMessageTypeEnum {
    COMMAND = 'command',
    RESPONSE = 'response',
    BROADCAST = 'broadcast',
    EVENT = 'event',
    ACK = 'ack',
    NACK = 'nack'
}
/**
* @export
* @enum {string}
*/
export enum SwarmMessagePriorityEnum {
    LOW = 'low',
    NORMAL = 'normal',
    HIGH = 'high',
    URGENT = 'urgent'
}


