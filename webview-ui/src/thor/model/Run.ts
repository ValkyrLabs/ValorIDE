// tslint:disable
/**
 * ValkyrAI CORE API
 * The API for accessing ValkyrAI services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// tslint:disable
/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelGeneric.ts.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/
import { exists, mapValues } from '../src/runtime';

// thorapi

/**
 * A single attempt to execute a Task within a WorkflowExecution with idempotency and lease tracking
 * @export
 * @interface Run
 */
export type Run  = {
    /**
     * Reference to the parent WorkflowExecution
     * @type {string}
     * @memberof Run
     */
    executionId?: string;
    /**
     * Reference to the Task being executed
     * @type {string}
     * @memberof Run
     */
    taskId?: string;
    /**
     * Specific ExecModule within the task
     * @type {string}
     * @memberof Run
     */
    execModuleId?: string;
    /**
     * Retry attempt number (1-based)
     * @type {number}
     * @memberof Run
     */
    attempt?: number;
    /**
     * Current run state
     * @type {string}
     * @memberof Run
     */
    state?: RunStateEnum;
    /**
     * Lease expiration timestamp for at-least-once delivery
     * @type {Date}
     * @memberof Run
     */
    leaseUntil?: Date;
    /**
     * Runner/pod ID that owns the lease
     * @type {string}
     * @memberof Run
     */
    leasedBy?: string;
    /**
     * Identifier of the runner pod executing this run
     * @type {string}
     * @memberof Run
     */
    runnerId?: string;
    /**
     * Content hash of inputs + config for exact-once semantics (SHA-256)
     * @type {string}
     * @memberof Run
     */
    idempotencyKey?: string;
    /**
     * SHA-256 hash of input map for change detection
     * @type {string}
     * @memberof Run
     */
    inputsHash?: string;
    /**
     * SHA-256 hash of module config for change detection
     * @type {string}
     * @memberof Run
     */
    configHash?: string;
    /**
     * When the run started executing
     * @type {Date}
     * @memberof Run
     */
    startedAt?: Date;
    /**
     * When the run completed or failed
     * @type {Date}
     * @memberof Run
     */
    finishedAt?: Date;
    /**
     * Last heartbeat timestamp from runner (for zombie detection)
     * @type {Date}
     * @memberof Run
     */
    heartbeatAt?: Date;
    /**
     * JSON result map from module execution
     * @type {string}
     * @memberof Run
     */
    outputs?: string;
    /**
     * Error message if run failed
     * @type {string}
     * @memberof Run
     */
    error?: string;
    /**
     * Classification of error for retry logic
     * @type {string}
     * @memberof Run
     */
    errorType?: RunErrorTypeEnum;
    /**
     * Timestamp after which retry can be attempted (exponential backoff)
     * @type {Date}
     * @memberof Run
     */
    retryReadyAt?: Date;
    /**
     * Execution duration in milliseconds
     * @type {number}
     * @memberof Run
     */
    durationMs?: number;
    /**
     * Cost tokens for LLM/API usage tracking
     * @type {number}
     * @memberof Run
     */
    costTokens?: number;
    /**
     * Unique identifier for object in the system
     * @type {string}
     * @memberof Run
     */
    id?: string;
    /**
     * UUID of owner of the object in the system
     * @type {string}
     * @memberof Run
     */
    ownerId?: string;
    /**
     * Date of object creation
     * @type {Date}
     * @memberof Run
     */
    createdDate?: Date;
    /**
     * Data, including hash of the key(s) used to encrypt this record.
     * @type {string}
     * @memberof Run
     */
    keyHash?: string;
    /**
     * Last user to access object
     * @type {string}
     * @memberof Run
     */
    lastAccessedById?: string;
    /**
     * Timestamp of last access of object
     * @type {Date}
     * @memberof Run
     */
    lastAccessedDate?: Date;
    /**
     * Unique identifier for user who last modifed the object in the system
     * @type {string}
     * @memberof Run
     */
    lastModifiedById?: string;
    /**
     * Date of last object modification
     * @type {Date}
     * @memberof Run
     */
    lastModifiedDate?: Date;
}

export function RunFromJSON(json: any): Run {
    return {
        'executionId': !exists(json, 'executionId') ? undefined : json['executionId'],
        'taskId': !exists(json, 'taskId') ? undefined : json['taskId'],
        'execModuleId': !exists(json, 'execModuleId') ? undefined : json['execModuleId'],
        'attempt': !exists(json, 'attempt') ? undefined : json['attempt'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'leaseUntil': !exists(json, 'leaseUntil') ? undefined : new Date(json['leaseUntil']),
        'leasedBy': !exists(json, 'leasedBy') ? undefined : json['leasedBy'],
        'runnerId': !exists(json, 'runnerId') ? undefined : json['runnerId'],
        'idempotencyKey': !exists(json, 'idempotencyKey') ? undefined : json['idempotencyKey'],
        'inputsHash': !exists(json, 'inputsHash') ? undefined : json['inputsHash'],
        'configHash': !exists(json, 'configHash') ? undefined : json['configHash'],
        'startedAt': !exists(json, 'startedAt') ? undefined : new Date(json['startedAt']),
        'finishedAt': !exists(json, 'finishedAt') ? undefined : new Date(json['finishedAt']),
        'heartbeatAt': !exists(json, 'heartbeatAt') ? undefined : new Date(json['heartbeatAt']),
        'outputs': !exists(json, 'outputs') ? undefined : json['outputs'],
        'error': !exists(json, 'error') ? undefined : json['error'],
        'errorType': !exists(json, 'errorType') ? undefined : json['errorType'],
        'retryReadyAt': !exists(json, 'retryReadyAt') ? undefined : new Date(json['retryReadyAt']),
        'durationMs': !exists(json, 'durationMs') ? undefined : json['durationMs'],
        'costTokens': !exists(json, 'costTokens') ? undefined : json['costTokens'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'keyHash': !exists(json, 'keyHash') ? undefined : json['keyHash'],
        'lastAccessedById': !exists(json, 'lastAccessedById') ? undefined : json['lastAccessedById'],
        'lastAccessedDate': !exists(json, 'lastAccessedDate') ? undefined : new Date(json['lastAccessedDate']),
        'lastModifiedById': !exists(json, 'lastModifiedById') ? undefined : json['lastModifiedById'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : new Date(json['lastModifiedDate']),
    };
}

export function RunToJSON(value?: Run): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'executionId': value.executionId,
        'taskId': value.taskId,
        'execModuleId': value.execModuleId,
        'attempt': value.attempt,
        'state': value.state,
        'leaseUntil': value.leaseUntil === undefined ? undefined : value.leaseUntil.toISOString(),
        'leasedBy': value.leasedBy,
        'runnerId': value.runnerId,
        'idempotencyKey': value.idempotencyKey,
        'inputsHash': value.inputsHash,
        'configHash': value.configHash,
        'startedAt': value.startedAt === undefined ? undefined : value.startedAt.toISOString(),
        'finishedAt': value.finishedAt === undefined ? undefined : value.finishedAt.toISOString(),
        'heartbeatAt': value.heartbeatAt === undefined ? undefined : value.heartbeatAt.toISOString(),
        'outputs': value.outputs,
        'error': value.error,
        'errorType': value.errorType,
        'retryReadyAt': value.retryReadyAt === undefined ? undefined : value.retryReadyAt.toISOString(),
        'durationMs': value.durationMs,
        'costTokens': value.costTokens,
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'keyHash': value.keyHash,
        'lastAccessedById': value.lastAccessedById,
        'lastAccessedDate': value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
        'lastModifiedById': value.lastModifiedById,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
    };
}

/**
* @export
* @enum {string}
*/
export enum RunStateEnum {
    PENDING = 'pending',
    LEASED = 'leased',
    RUNNING = 'running',
    SUCCESS = 'success',
    FAILED = 'failed',
    DLQ = 'dlq',
    CANCELLED = 'cancelled'
}
/**
* @export
* @enum {string}
*/
export enum RunErrorTypeEnum {
    TRANSIENT = 'transient',
    PERMANENT = 'permanent',
    TIMEOUT = 'timeout',
    CIRCUITOPEN = 'circuit_open'
}


