// tslint:disable
/**
 * ValkyrAI CORE API
 * The API for accessing ValkyrAI services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// tslint:disable
/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelGeneric.ts.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/
import { exists, mapValues } from '../src/runtime';
import {


    FileRecord,
    FileRecordFromJSON,
    FileRecordToJSON,
} from './';


// thorapi

/**
 * Background job that operates on one or more files.
 * @export
 * @interface FileProcessingJob
 */
export type FileProcessingJob  = {
    /**
     * Type of job being executed.
     * @type {string}
     * @memberof FileProcessingJob
     */
    type: FileProcessingJobTypeEnum;
    /**
     * Current job status.
     * @type {string}
     * @memberof FileProcessingJob
     */
    status: FileProcessingJobStatusEnum;
    /**
     * Job progress percentage.
     * @type {number}
     * @memberof FileProcessingJob
     */
    progress?: number;
    /**
     * Job-specific metadata such as driver configuration.
     * @type {string}
     * @memberof FileProcessingJob
     */
    metadata?: string;
    /**
     * Job execution result payload.
     * @type {string}
     * @memberof FileProcessingJob
     */
    result?: string;
    /**
     * Error message if the job failed.
     * @type {string}
     * @memberof FileProcessingJob
     */
    error?: string;
    /**
     * Files associated with this job.
     * @type {Array<FileRecord>}
     * @memberof FileProcessingJob
     */
    relatedFiles?: Array<FileRecord>;
    /**
     * When the job started.
     * @type {Date}
     * @memberof FileProcessingJob
     */
    startedAt?: Date;
    /**
     * When the job completed.
     * @type {Date}
     * @memberof FileProcessingJob
     */
    completedAt?: Date;
    /**
     * Unique identifier for object in the system
     * @type {string}
     * @memberof FileProcessingJob
     */
    id?: string;
    /**
     * UUID of owner of the object in the system
     * @type {string}
     * @memberof FileProcessingJob
     */
    ownerId?: string;
    /**
     * Date of object creation
     * @type {Date}
     * @memberof FileProcessingJob
     */
    createdDate?: Date;
    /**
     * Data, including hash of the key(s) used to encrypt this record.
     * @type {string}
     * @memberof FileProcessingJob
     */
    keyHash?: string;
    /**
     * Last user to access object
     * @type {string}
     * @memberof FileProcessingJob
     */
    lastAccessedById?: string;
    /**
     * Timestamp of last access of object
     * @type {Date}
     * @memberof FileProcessingJob
     */
    lastAccessedDate?: Date;
    /**
     * Unique identifier for user who last modifed the object in the system
     * @type {string}
     * @memberof FileProcessingJob
     */
    lastModifiedById?: string;
    /**
     * Date of last object modification
     * @type {Date}
     * @memberof FileProcessingJob
     */
    lastModifiedDate?: Date;
}

export function FileProcessingJobFromJSON(json: any): FileProcessingJob {
    return {
        'type': json['type'],
        'status': json['status'],
        'progress': !exists(json, 'progress') ? undefined : json['progress'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'result': !exists(json, 'result') ? undefined : json['result'],
        'error': !exists(json, 'error') ? undefined : json['error'],
        'relatedFiles': !exists(json, 'relatedFiles') ? undefined : (json['relatedFiles'] as Array<any>).map(FileRecordFromJSON),
        'startedAt': !exists(json, 'startedAt') ? undefined : new Date(json['startedAt']),
        'completedAt': !exists(json, 'completedAt') ? undefined : new Date(json['completedAt']),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'keyHash': !exists(json, 'keyHash') ? undefined : json['keyHash'],
        'lastAccessedById': !exists(json, 'lastAccessedById') ? undefined : json['lastAccessedById'],
        'lastAccessedDate': !exists(json, 'lastAccessedDate') ? undefined : new Date(json['lastAccessedDate']),
        'lastModifiedById': !exists(json, 'lastModifiedById') ? undefined : json['lastModifiedById'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : new Date(json['lastModifiedDate']),
    };
}

export function FileProcessingJobToJSON(value?: FileProcessingJob): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'type': value.type,
        'status': value.status,
        'progress': value.progress,
        'metadata': value.metadata,
        'result': value.result,
        'error': value.error,
        'relatedFiles': value.relatedFiles === undefined ? undefined : (value.relatedFiles as Array<any>).map(FileRecordToJSON),
        'startedAt': value.startedAt === undefined ? undefined : value.startedAt.toISOString(),
        'completedAt': value.completedAt === undefined ? undefined : value.completedAt.toISOString(),
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'keyHash': value.keyHash,
        'lastAccessedById': value.lastAccessedById,
        'lastAccessedDate': value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
        'lastModifiedById': value.lastModifiedById,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
    };
}

/**
* @export
* @enum {string}
*/
export enum FileProcessingJobTypeEnum {
    FILEPROCESSING = 'file_processing',
    BULKUPLOAD = 'bulk_upload',
    EXPORT = 'export',
    VIRUSSCAN = 'virus_scan',
    THUMBNAILGENERATION = 'thumbnail_generation'
}
/**
* @export
* @enum {string}
*/
export enum FileProcessingJobStatusEnum {
    PENDING = 'pending',
    RUNNING = 'running',
    COMPLETED = 'completed',
    FAILED = 'failed',
    CANCELLED = 'cancelled'
}


