// tslint:disable
/**
 * ValkyrAI CORE API
 * The API for accessing ValkyrAI services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../src/runtime';
import {


    AclClass,
    AclClassFromJSON,
    AclClassToJSON,
    AclEntry,
    AclEntryFromJSON,
    AclEntryToJSON,
} from './';


// thorapi

/**
 * ACL_OBJECT_IDENTITY stores information for each unique domain object instance in the system. Columns include the ID, a foreign key to the ACL_CLASS table, a unique identifier so we know the ACL_CLASS instance for which we provide information, the parent, a foreign key to the ACL_SID table to represent the owner of the domain object instance, and whether we allow ACL entries to inherit from any parent ACL. We have a single row for every domain object instance for which we store ACL permissions.
 * @export
 * @interface AclObjectIdentity
 */
export type AclObjectIdentity  = {
    /**
     * fully qualified class name of the secured object
     * @type {string}
     * @memberof AclObjectIdentity
     */
    objectIdClass?: string;
    /**
     * UUID of the specific secured object instance
     * @type {string}
     * @memberof AclObjectIdentity
     */
    objectIdIdentity?: string;
    /**
     * UUID reference to parent AclObjectIdentity for hierarchical permissions
     * @type {string}
     * @memberof AclObjectIdentity
     */
    parentObjectId?: string;
    /**
     * 
     * @type {AclObjectIdentity}
     * @memberof AclObjectIdentity
     */
    parentObject?: AclObjectIdentity;
    /**
     * UUID reference to the AclSid that owns this object
     * @type {string}
     * @memberof AclObjectIdentity
     */
    ownerSid?: string;
    /**
     * flag indicating whether ACL entries should inherit from parent (1=true, 0=false)
     * @type {number}
     * @memberof AclObjectIdentity
     */
    entriesInheriting?: number;
    /**
     * 
     * @type {AclClass}
     * @memberof AclObjectIdentity
     */
    aclClass?: AclClass;
    /**
     * UUID reference to the AclClass
     * @type {string}
     * @memberof AclObjectIdentity
     */
    aclClassId?: string;
    /**
     * the ACL entries that define permissions for this object
     * @type {Array<AclEntry>}
     * @memberof AclObjectIdentity
     */
    aclEntries?: Array<AclEntry>;
    /**
     * Unique identifier for object in the system
     * @type {string}
     * @memberof AclObjectIdentity
     */
    id?: string;
    /**
     * UUID of owner of the object in the system
     * @type {string}
     * @memberof AclObjectIdentity
     */
    ownerId?: string;
    /**
     * Date of object creation
     * @type {Date}
     * @memberof AclObjectIdentity
     */
    createdDate?: Date;
    /**
     * Data, including hash of the key(s) used to encrypt this record.
     * @type {string}
     * @memberof AclObjectIdentity
     */
    keyHash?: string;
    /**
     * Last user to access object
     * @type {string}
     * @memberof AclObjectIdentity
     */
    lastAccessedById?: string;
    /**
     * Timestamp of last access of object
     * @type {Date}
     * @memberof AclObjectIdentity
     */
    lastAccessedDate?: Date;
    /**
     * Unique identifier for user who last modifed the object in the system
     * @type {string}
     * @memberof AclObjectIdentity
     */
    lastModifiedById?: string;
    /**
     * Date of last object modification
     * @type {Date}
     * @memberof AclObjectIdentity
     */
    lastModifiedDate?: Date;
}

export function AclObjectIdentityFromJSON(json: any): AclObjectIdentity {
    return {
        'objectIdClass': !exists(json, 'objectIdClass') ? undefined : json['objectIdClass'],
        'objectIdIdentity': !exists(json, 'objectIdIdentity') ? undefined : json['objectIdIdentity'],
        'parentObjectId': !exists(json, 'parentObjectId') ? undefined : json['parentObjectId'],
        'parentObject': !exists(json, 'parentObject') ? undefined : AclObjectIdentityFromJSON(json['parentObject']),
        'ownerSid': !exists(json, 'ownerSid') ? undefined : json['ownerSid'],
        'entriesInheriting': !exists(json, 'entriesInheriting') ? undefined : json['entriesInheriting'],
        'aclClass': !exists(json, 'aclClass') ? undefined : AclClassFromJSON(json['aclClass']),
        'aclClassId': !exists(json, 'aclClassId') ? undefined : json['aclClassId'],
        'aclEntries': !exists(json, 'aclEntries') ? undefined : (json['aclEntries'] as Array<any>).map(AclEntryFromJSON),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'keyHash': !exists(json, 'keyHash') ? undefined : json['keyHash'],
        'lastAccessedById': !exists(json, 'lastAccessedById') ? undefined : json['lastAccessedById'],
        'lastAccessedDate': !exists(json, 'lastAccessedDate') ? undefined : new Date(json['lastAccessedDate']),
        'lastModifiedById': !exists(json, 'lastModifiedById') ? undefined : json['lastModifiedById'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : new Date(json['lastModifiedDate']),
    };
}

export function AclObjectIdentityToJSON(value?: AclObjectIdentity): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'objectIdClass': value.objectIdClass,
        'objectIdIdentity': value.objectIdIdentity,
        'parentObjectId': value.parentObjectId,
        'parentObject': AclObjectIdentityToJSON(value.parentObject),
        'ownerSid': value.ownerSid,
        'entriesInheriting': value.entriesInheriting,
        'aclClass': AclClassToJSON(value.aclClass),
        'aclClassId': value.aclClassId,
        'aclEntries': value.aclEntries === undefined ? undefined : (value.aclEntries as Array<any>).map(AclEntryToJSON),
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'keyHash': value.keyHash,
        'lastAccessedById': value.lastAccessedById,
        'lastAccessedDate': value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
        'lastModifiedById': value.lastModifiedById,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
    };
}


