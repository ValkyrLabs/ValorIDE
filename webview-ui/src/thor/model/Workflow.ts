// tslint:disable
/**
 * ValkyrAI CORE API
 * The API for accessing ValkyrAI services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// tslint:disable
/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelGeneric.ts.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/
import { exists, mapValues } from '../src/runtime';
import {


    Task,
    TaskFromJSON,
    TaskToJSON,
    WorkflowState,
    WorkflowStateFromJSON,
    WorkflowStateToJSON,
} from './';


// thorapi

/**
 * ValkyrAI Workflow object manages execution and state of automation workflows
 * @export
 * @interface Workflow
 */
export type Workflow  = {
    /**
     * an array of Tasks to be performed
     * @type {Array<Task>}
     * @memberof Workflow
     */
    tasks: Array<Task>;
    /**
     * short description of this workflow
     * @type {string}
     * @memberof Workflow
     */
    name?: string;
    /**
     * detailed description of this workflow
     * @type {string}
     * @memberof Workflow
     */
    description?: string;
    /**
     * the role with permissions to execute the workfow as
     * @type {string}
     * @memberof Workflow
     */
    role?: WorkflowRoleEnum;
    /**
     * cron string to determine when this runs
     * @type {string}
     * @memberof Workflow
     */
    schedule?: string;
    /**
     * metadata in any text format to be used in client code
     * @type {string}
     * @memberof Workflow
     */
    meta?: string;
    /**
     * version number for optimistic locking (auto-incremented on each update)
     * @type {number}
     * @memberof Workflow
     */
    readonly version?: number;
    /**
     * an array stateful objects to be used in the workflow
     * @type {Array<WorkflowState>}
     * @memberof Workflow
     */
    workflowState?: Array<WorkflowState>;
    /**
     * last known status of the workflow
     * @type {string}
     * @memberof Workflow
     */
    status?: WorkflowStatusEnum;
    /**
     * Unique identifier for object in the system
     * @type {string}
     * @memberof Workflow
     */
    id?: string;
    /**
     * UUID of owner of the object in the system
     * @type {string}
     * @memberof Workflow
     */
    ownerId?: string;
    /**
     * Date of object creation
     * @type {Date}
     * @memberof Workflow
     */
    createdDate?: Date;
    /**
     * Data, including hash of the key(s) used to encrypt this record.
     * @type {string}
     * @memberof Workflow
     */
    keyHash?: string;
    /**
     * Last user to access object
     * @type {string}
     * @memberof Workflow
     */
    lastAccessedById?: string;
    /**
     * Timestamp of last access of object
     * @type {Date}
     * @memberof Workflow
     */
    lastAccessedDate?: Date;
    /**
     * Unique identifier for user who last modifed the object in the system
     * @type {string}
     * @memberof Workflow
     */
    lastModifiedById?: string;
    /**
     * Date of last object modification
     * @type {Date}
     * @memberof Workflow
     */
    lastModifiedDate?: Date;
}

export function WorkflowFromJSON(json: any): Workflow {
    return {
        'tasks': (json['tasks'] as Array<any>).map(TaskFromJSON),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'role': !exists(json, 'role') ? undefined : json['role'],
        'schedule': !exists(json, 'schedule') ? undefined : json['schedule'],
        'meta': !exists(json, 'meta') ? undefined : json['meta'],
        'version': !exists(json, 'version') ? undefined : json['version'],
        'workflowState': !exists(json, 'workflow_state') ? undefined : (json['workflow_state'] as Array<any>).map(WorkflowStateFromJSON),
        'status': !exists(json, 'status') ? undefined : json['status'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'keyHash': !exists(json, 'keyHash') ? undefined : json['keyHash'],
        'lastAccessedById': !exists(json, 'lastAccessedById') ? undefined : json['lastAccessedById'],
        'lastAccessedDate': !exists(json, 'lastAccessedDate') ? undefined : new Date(json['lastAccessedDate']),
        'lastModifiedById': !exists(json, 'lastModifiedById') ? undefined : json['lastModifiedById'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : new Date(json['lastModifiedDate']),
    };
}

export function WorkflowToJSON(value?: Workflow): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'tasks': (value.tasks as Array<any>).map(TaskToJSON),
        'name': value.name,
        'description': value.description,
        'role': value.role,
        'schedule': value.schedule,
        'meta': value.meta,
        'workflow_state': value.workflowState === undefined ? undefined : (value.workflowState as Array<any>).map(WorkflowStateToJSON),
        'status': value.status,
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'keyHash': value.keyHash,
        'lastAccessedById': value.lastAccessedById,
        'lastAccessedDate': value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
        'lastModifiedById': value.lastModifiedById,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
    };
}

/**
* @export
* @enum {string}
*/
export enum WorkflowRoleEnum {
    USER = 'user',
    ASSISTANT = 'assistant',
    SYSTEM = 'system'
}
/**
* @export
* @enum {string}
*/
export enum WorkflowStatusEnum {
    RUNNING = 'running',
    STOPPED = 'stopped',
    PAUSED = 'paused',
    READY = 'ready',
    WARNING = 'warning',
    ERROR = 'error',
    DISABLED = 'disabled'
}


