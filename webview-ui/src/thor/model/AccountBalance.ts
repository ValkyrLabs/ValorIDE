// tslint:disable
/**
 * ValkyrAI CORE API
 * The API for accessing ValkyrAI services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// tslint:disable
/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelGeneric.ts.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/
import { exists, mapValues } from '../src/runtime';
import {


    PaymentTransaction,
    PaymentTransactionFromJSON,
    PaymentTransactionToJSON,
    UsageTransaction,
    UsageTransactionFromJSON,
    UsageTransactionToJSON,
} from './';


// thorapi

/**
 * Current account balance (calculated)
 * @export
 * @interface AccountBalance
 */
export type AccountBalance  = {
    /**
     * Owning customer account
     * @type {string}
     * @memberof AccountBalance
     */
    customerId: string;
    /**
     * 
     * @type {Array<UsageTransaction>}
     * @memberof AccountBalance
     */
    usageTransactions: Array<UsageTransaction>;
    /**
     * 
     * @type {Array<PaymentTransaction>}
     * @memberof AccountBalance
     */
    paymentTransactions: Array<PaymentTransaction>;
    /**
     * The calculated balance amount
     * @type {number}
     * @memberof AccountBalance
     */
    currentBalance?: number;
    /**
     * Unique identifier for object in the system
     * @type {string}
     * @memberof AccountBalance
     */
    id?: string;
    /**
     * UUID of owner of the object in the system
     * @type {string}
     * @memberof AccountBalance
     */
    ownerId?: string;
    /**
     * Date of object creation
     * @type {Date}
     * @memberof AccountBalance
     */
    createdDate?: Date;
    /**
     * Data, including hash of the key(s) used to encrypt this record.
     * @type {string}
     * @memberof AccountBalance
     */
    keyHash?: string;
    /**
     * Last user to access object
     * @type {string}
     * @memberof AccountBalance
     */
    lastAccessedById?: string;
    /**
     * Timestamp of last access of object
     * @type {Date}
     * @memberof AccountBalance
     */
    lastAccessedDate?: Date;
    /**
     * Unique identifier for user who last modifed the object in the system
     * @type {string}
     * @memberof AccountBalance
     */
    lastModifiedById?: string;
    /**
     * Date of last object modification
     * @type {Date}
     * @memberof AccountBalance
     */
    lastModifiedDate?: Date;
}

export function AccountBalanceFromJSON(json: any): AccountBalance {
    return {
        'customerId': json['customerId'],
        'usageTransactions': (json['usageTransactions'] as Array<any>).map(UsageTransactionFromJSON),
        'paymentTransactions': (json['paymentTransactions'] as Array<any>).map(PaymentTransactionFromJSON),
        'currentBalance': !exists(json, 'currentBalance') ? undefined : json['currentBalance'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'keyHash': !exists(json, 'keyHash') ? undefined : json['keyHash'],
        'lastAccessedById': !exists(json, 'lastAccessedById') ? undefined : json['lastAccessedById'],
        'lastAccessedDate': !exists(json, 'lastAccessedDate') ? undefined : new Date(json['lastAccessedDate']),
        'lastModifiedById': !exists(json, 'lastModifiedById') ? undefined : json['lastModifiedById'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : new Date(json['lastModifiedDate']),
    };
}

export function AccountBalanceToJSON(value?: AccountBalance): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'customerId': value.customerId,
        'usageTransactions': (value.usageTransactions as Array<any>).map(UsageTransactionToJSON),
        'paymentTransactions': (value.paymentTransactions as Array<any>).map(PaymentTransactionToJSON),
        'currentBalance': value.currentBalance,
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'keyHash': value.keyHash,
        'lastAccessedById': value.lastAccessedById,
        'lastAccessedDate': value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
        'lastModifiedById': value.lastModifiedById,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
    };
}


