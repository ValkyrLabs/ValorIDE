// tslint:disable
/**
 * ValkyrAI CORE API
 * The API for accessing ValkyrAI services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// tslint:disable
/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelGeneric.ts.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/
import { exists, mapValues } from '../src/runtime';

// thorapi

/**
 * Details about a Language Learning Model (LLM) including capabilities and configuration.
 * @export
 * @interface LlmDetails
 */
export type LlmDetails  = {
    /**
     * The name of the LLM.
     * @type {string}
     * @memberof LlmDetails
     */
    name: string;
    /**
     * Upstream model provider.
     * @type {string}
     * @memberof LlmDetails
     */
    provider: LlmDetailsProviderEnum;
    /**
     * API style used to call the model.
     * @type {string}
     * @memberof LlmDetails
     */
    apiType: LlmDetailsApiTypeEnum;
    /**
     * The vendor-specific version of the LLM.
     * @type {string}
     * @memberof LlmDetails
     */
    version?: string;
    /**
     * Notes on the LLM implementation.
     * @type {string}
     * @memberof LlmDetails
     */
    notes?: string;
    /**
     * The default user-space role (not Auth) to set for the target LLM.
     * @type {string}
     * @memberof LlmDetails
     */
    role?: LlmDetailsRoleEnum;
    /**
     * The initial system prompt to instruct the LLM how to behave.
     * @type {string}
     * @memberof LlmDetails
     */
    initialPrompt?: string;
    /**
     * API key to access the LLM.
     * @type {string}
     * @memberof LlmDetails
     */
    apiKey?: string;
    /**
     * User name / credential to access the LLM.
     * @type {string}
     * @memberof LlmDetails
     */
    credential?: string;
    /**
     * Password to access the LLM.
     * @type {string}
     * @memberof LlmDetails
     */
    credentialPassword?: string;
    /**
     * Amount of variance / non-determinism in the result. Typical range [0, 2].
     * @type {number}
     * @memberof LlmDetails
     */
    temperature?: number;
    /**
     * Maximum tokens the model can process per request (prompt + response).
     * @type {number}
     * @memberof LlmDetails
     */
    contextWindow?: number;
    /**
     * Maximum tokens the model may generate in a response (should be <= contextWindow).
     * @type {number}
     * @memberof LlmDetails
     */
    maxTokens?: number;
    /**
     * Whether the model can process and understand images in prompts.
     * @type {boolean}
     * @memberof LlmDetails
     */
    supportsImages?: boolean;
    /**
     * Whether the model supports caching of prompts for optimization.
     * @type {boolean}
     * @memberof LlmDetails
     */
    supportsPromptCache?: boolean;
    /**
     * Price per 1,000 input (prompt) tokens in the default billing currency.
     * @type {number}
     * @memberof LlmDetails
     */
    inputPrice?: number;
    /**
     * Price per 1,000 output (completion) tokens in the default billing currency.
     * @type {number}
     * @memberof LlmDetails
     */
    outputPrice?: number;
    /**
     * Detailed description of the model\'s capabilities and use cases.
     * @type {string}
     * @memberof LlmDetails
     */
    description?: string;
    /**
     * Base URL to connect to the LLM API.
     * @type {string}
     * @memberof LlmDetails
     */
    url?: string;
    /**
     * Extra request parameters to send to the service.
     * @type {string}
     * @memberof LlmDetails
     */
    requestParameters?: string;
    /**
     * Free-form metadata to be used in client code.
     * @type {string}
     * @memberof LlmDetails
     */
    metaData?: string;
    /**
     * Unique identifier for object in the system
     * @type {string}
     * @memberof LlmDetails
     */
    id?: string;
    /**
     * UUID of owner of the object in the system
     * @type {string}
     * @memberof LlmDetails
     */
    ownerId?: string;
    /**
     * Date of object creation
     * @type {Date}
     * @memberof LlmDetails
     */
    createdDate?: Date;
    /**
     * Data, including hash of the key(s) used to encrypt this record.
     * @type {string}
     * @memberof LlmDetails
     */
    keyHash?: string;
    /**
     * Last user to access object
     * @type {string}
     * @memberof LlmDetails
     */
    lastAccessedById?: string;
    /**
     * Timestamp of last access of object
     * @type {Date}
     * @memberof LlmDetails
     */
    lastAccessedDate?: Date;
    /**
     * Unique identifier for user who last modifed the object in the system
     * @type {string}
     * @memberof LlmDetails
     */
    lastModifiedById?: string;
    /**
     * Date of last object modification
     * @type {Date}
     * @memberof LlmDetails
     */
    lastModifiedDate?: Date;
}

export function LlmDetailsFromJSON(json: any): LlmDetails {
    return {
        'name': json['name'],
        'provider': json['provider'],
        'apiType': json['apiType'],
        'version': !exists(json, 'version') ? undefined : json['version'],
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
        'role': !exists(json, 'role') ? undefined : json['role'],
        'initialPrompt': !exists(json, 'initialPrompt') ? undefined : json['initialPrompt'],
        'apiKey': !exists(json, 'apiKey') ? undefined : json['apiKey'],
        'credential': !exists(json, 'credential') ? undefined : json['credential'],
        'credentialPassword': !exists(json, 'credentialPassword') ? undefined : json['credentialPassword'],
        'temperature': !exists(json, 'temperature') ? undefined : json['temperature'],
        'contextWindow': !exists(json, 'contextWindow') ? undefined : json['contextWindow'],
        'maxTokens': !exists(json, 'maxTokens') ? undefined : json['maxTokens'],
        'supportsImages': !exists(json, 'supportsImages') ? undefined : json['supportsImages'],
        'supportsPromptCache': !exists(json, 'supportsPromptCache') ? undefined : json['supportsPromptCache'],
        'inputPrice': !exists(json, 'inputPrice') ? undefined : json['inputPrice'],
        'outputPrice': !exists(json, 'outputPrice') ? undefined : json['outputPrice'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'requestParameters': !exists(json, 'requestParameters') ? undefined : json['requestParameters'],
        'metaData': !exists(json, 'metaData') ? undefined : json['metaData'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'keyHash': !exists(json, 'keyHash') ? undefined : json['keyHash'],
        'lastAccessedById': !exists(json, 'lastAccessedById') ? undefined : json['lastAccessedById'],
        'lastAccessedDate': !exists(json, 'lastAccessedDate') ? undefined : new Date(json['lastAccessedDate']),
        'lastModifiedById': !exists(json, 'lastModifiedById') ? undefined : json['lastModifiedById'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : new Date(json['lastModifiedDate']),
    };
}

export function LlmDetailsToJSON(value?: LlmDetails): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'name': value.name,
        'provider': value.provider,
        'apiType': value.apiType,
        'version': value.version,
        'notes': value.notes,
        'role': value.role,
        'initialPrompt': value.initialPrompt,
        'apiKey': value.apiKey,
        'credential': value.credential,
        'credentialPassword': value.credentialPassword,
        'temperature': value.temperature,
        'contextWindow': value.contextWindow,
        'maxTokens': value.maxTokens,
        'supportsImages': value.supportsImages,
        'supportsPromptCache': value.supportsPromptCache,
        'inputPrice': value.inputPrice,
        'outputPrice': value.outputPrice,
        'description': value.description,
        'url': value.url,
        'requestParameters': value.requestParameters,
        'metaData': value.metaData,
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'keyHash': value.keyHash,
        'lastAccessedById': value.lastAccessedById,
        'lastAccessedDate': value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
        'lastModifiedById': value.lastModifiedById,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
    };
}

/**
* @export
* @enum {string}
*/
export enum LlmDetailsProviderEnum {
    VALKYRAI = 'valkyrai',
    OPENAI = 'openai',
    LLAMA = 'llama',
    PHI = 'phi',
    GEMMA = 'gemma',
    MISTRAL = 'mistral',
    CLAUDE = 'claude',
    GEMINI = 'gemini',
    OTHER = 'other',
    CHATGPTPASSTHROUGH = 'chatgpt_pass_through'
}
/**
* @export
* @enum {string}
*/
export enum LlmDetailsApiTypeEnum {
    OPENAI = 'openai',
    OLLAMA = 'ollama',
    OTHER = 'other'
}
/**
* @export
* @enum {string}
*/
export enum LlmDetailsRoleEnum {
    USER = 'user',
    ASSISTANT = 'assistant'
}


