// tslint:disable
/**
 * ValkyrAI CORE API
 * The API for accessing ValkyrAI services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// tslint:disable
/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelGeneric.ts.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/
import { exists, mapValues } from '../src/runtime';
import {


    McpMarketplaceItemTag,
    McpMarketplaceItemTagFromJSON,
    McpMarketplaceItemTagToJSON,
    McpTool,
    McpToolFromJSON,
    McpToolToJSON,
} from './';


// thorapi

/**
 * Opinionated MCP tool definition bundled with ValkyrAI for rapid enablement.
 * @export
 * @interface McpToolPreset
 */
export type McpToolPreset  = {
    /**
     * Stable identifier used to reference the preset (e.g., apomod-get-plan).
     * @type {string}
     * @memberof McpToolPreset
     */
    slug: string;
    /**
     * Human friendly name shown in UIs.
     * @type {string}
     * @memberof McpToolPreset
     */
    displayName: string;
    /**
     * 
     * @type {McpTool}
     * @memberof McpToolPreset
     */
    tool: McpTool;
    /**
     * One-line explanation of what the preset does.
     * @type {string}
     * @memberof McpToolPreset
     */
    summary?: string;
    /**
     * Classification for MCP tools to mirror Copilot-like experiences.
     * @type {string}
     * @memberof McpToolPreset
     */
    category?: McpToolPresetCategoryEnum;
    /**
     * 
     * @type {Array<McpMarketplaceItemTag>}
     * @memberof McpToolPreset
     */
    tags?: Array<McpMarketplaceItemTag>;
    /**
     * Suggested personas, workflows, or environments that benefit from the preset.
     * @type {string}
     * @memberof McpToolPreset
     */
    recommendedFor?: string;
    /**
     * Deep link to extended guidance or quick-start instructions.
     * @type {string}
     * @memberof McpToolPreset
     */
    documentationUrl?: string;
    /**
     * Preset default for auto approval when the tool is triggered.
     * @type {boolean}
     * @memberof McpToolPreset
     */
    autoApprove?: boolean;
    /**
     * Unique identifier for object in the system
     * @type {string}
     * @memberof McpToolPreset
     */
    id?: string;
    /**
     * UUID of owner of the object in the system
     * @type {string}
     * @memberof McpToolPreset
     */
    ownerId?: string;
    /**
     * Date of object creation
     * @type {Date}
     * @memberof McpToolPreset
     */
    createdDate?: Date;
    /**
     * Data, including hash of the key(s) used to encrypt this record.
     * @type {string}
     * @memberof McpToolPreset
     */
    keyHash?: string;
    /**
     * Last user to access object
     * @type {string}
     * @memberof McpToolPreset
     */
    lastAccessedById?: string;
    /**
     * Timestamp of last access of object
     * @type {Date}
     * @memberof McpToolPreset
     */
    lastAccessedDate?: Date;
    /**
     * Unique identifier for user who last modifed the object in the system
     * @type {string}
     * @memberof McpToolPreset
     */
    lastModifiedById?: string;
    /**
     * Date of last object modification
     * @type {Date}
     * @memberof McpToolPreset
     */
    lastModifiedDate?: Date;
}

export function McpToolPresetFromJSON(json: any): McpToolPreset {
    return {
        'slug': json['slug'],
        'displayName': json['displayName'],
        'tool': McpToolFromJSON(json['tool']),
        'summary': !exists(json, 'summary') ? undefined : json['summary'],
        'category': !exists(json, 'category') ? undefined : json['category'],
        'tags': !exists(json, 'tags') ? undefined : (json['tags'] as Array<any>).map(McpMarketplaceItemTagFromJSON),
        'recommendedFor': !exists(json, 'recommendedFor') ? undefined : json['recommendedFor'],
        'documentationUrl': !exists(json, 'documentationUrl') ? undefined : json['documentationUrl'],
        'autoApprove': !exists(json, 'autoApprove') ? undefined : json['autoApprove'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'keyHash': !exists(json, 'keyHash') ? undefined : json['keyHash'],
        'lastAccessedById': !exists(json, 'lastAccessedById') ? undefined : json['lastAccessedById'],
        'lastAccessedDate': !exists(json, 'lastAccessedDate') ? undefined : new Date(json['lastAccessedDate']),
        'lastModifiedById': !exists(json, 'lastModifiedById') ? undefined : json['lastModifiedById'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : new Date(json['lastModifiedDate']),
    };
}

export function McpToolPresetToJSON(value?: McpToolPreset): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'slug': value.slug,
        'displayName': value.displayName,
        'tool': McpToolToJSON(value.tool),
        'summary': value.summary,
        'category': value.category,
        'tags': value.tags === undefined ? undefined : (value.tags as Array<any>).map(McpMarketplaceItemTagToJSON),
        'recommendedFor': value.recommendedFor,
        'documentationUrl': value.documentationUrl,
        'autoApprove': value.autoApprove,
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'keyHash': value.keyHash,
        'lastAccessedById': value.lastAccessedById,
        'lastAccessedDate': value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
        'lastModifiedById': value.lastModifiedById,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
    };
}

/**
* @export
* @enum {string}
*/
export enum McpToolPresetCategoryEnum {
    CLOUDPLATFORM = 'cloud_platform',
    DEVOPS = 'devops',
    SECURITY = 'security',
    OBSERVABILITY = 'observability',
    DATAENGINEERING = 'data_engineering',
    AIASSISTANT = 'ai_assistant',
    PRODUCTIVITY = 'productivity',
    CUSTOMIZATION = 'customization'
}


