// tslint:disable
/**
 * ValkyrAI CORE API
 * The API for accessing ValkyrAI services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// tslint:disable
/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelGeneric.ts.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/
import { exists, mapValues } from '../src/runtime';

// thorapi

/**
 * Failed runs quarantined for manual intervention and replay
 * @export
 * @interface DeadLetterQueue
 */
export type DeadLetterQueue  = {
    /**
     * Reference to the failed Run
     * @type {string}
     * @memberof DeadLetterQueue
     */
    runId?: string;
    /**
     * Reference to the WorkflowExecution
     * @type {string}
     * @memberof DeadLetterQueue
     */
    executionId?: string;
    /**
     * Reference to the Task
     * @type {string}
     * @memberof DeadLetterQueue
     */
    taskId?: string;
    /**
     * Detailed failure reason message
     * @type {string}
     * @memberof DeadLetterQueue
     */
    failureReason?: string;
    /**
     * Classification of why the run was quarantined
     * @type {string}
     * @memberof DeadLetterQueue
     */
    failureType?: DeadLetterQueueFailureTypeEnum;
    /**
     * JSON snapshot of inputs for replay
     * @type {string}
     * @memberof DeadLetterQueue
     */
    originalInputs?: string;
    /**
     * JSON snapshot of module config at time of failure
     * @type {string}
     * @memberof DeadLetterQueue
     */
    originalConfig?: string;
    /**
     * When the run was moved to DLQ
     * @type {Date}
     * @memberof DeadLetterQueue
     */
    quarantinedAt?: Date;
    /**
     * Principal ID who reviewed this entry
     * @type {string}
     * @memberof DeadLetterQueue
     */
    reviewedBy?: string;
    /**
     * Resolution status
     * @type {string}
     * @memberof DeadLetterQueue
     */
    resolution?: DeadLetterQueueResolutionEnum;
    /**
     * When the DLQ entry was resolved
     * @type {Date}
     * @memberof DeadLetterQueue
     */
    resolvedAt?: Date;
    /**
     * Operator notes about resolution
     * @type {string}
     * @memberof DeadLetterQueue
     */
    notes?: string;
    /**
     * ID of the new run created when this entry was requeued
     * @type {string}
     * @memberof DeadLetterQueue
     */
    requeuedAsRunId?: string;
    /**
     * Unique identifier for object in the system
     * @type {string}
     * @memberof DeadLetterQueue
     */
    id?: string;
    /**
     * UUID of owner of the object in the system
     * @type {string}
     * @memberof DeadLetterQueue
     */
    ownerId?: string;
    /**
     * Date of object creation
     * @type {Date}
     * @memberof DeadLetterQueue
     */
    createdDate?: Date;
    /**
     * Data, including hash of the key(s) used to encrypt this record.
     * @type {string}
     * @memberof DeadLetterQueue
     */
    keyHash?: string;
    /**
     * Last user to access object
     * @type {string}
     * @memberof DeadLetterQueue
     */
    lastAccessedById?: string;
    /**
     * Timestamp of last access of object
     * @type {Date}
     * @memberof DeadLetterQueue
     */
    lastAccessedDate?: Date;
    /**
     * Unique identifier for user who last modifed the object in the system
     * @type {string}
     * @memberof DeadLetterQueue
     */
    lastModifiedById?: string;
    /**
     * Date of last object modification
     * @type {Date}
     * @memberof DeadLetterQueue
     */
    lastModifiedDate?: Date;
}

export function DeadLetterQueueFromJSON(json: any): DeadLetterQueue {
    return {
        'runId': !exists(json, 'runId') ? undefined : json['runId'],
        'executionId': !exists(json, 'executionId') ? undefined : json['executionId'],
        'taskId': !exists(json, 'taskId') ? undefined : json['taskId'],
        'failureReason': !exists(json, 'failureReason') ? undefined : json['failureReason'],
        'failureType': !exists(json, 'failureType') ? undefined : json['failureType'],
        'originalInputs': !exists(json, 'originalInputs') ? undefined : json['originalInputs'],
        'originalConfig': !exists(json, 'originalConfig') ? undefined : json['originalConfig'],
        'quarantinedAt': !exists(json, 'quarantinedAt') ? undefined : new Date(json['quarantinedAt']),
        'reviewedBy': !exists(json, 'reviewedBy') ? undefined : json['reviewedBy'],
        'resolution': !exists(json, 'resolution') ? undefined : json['resolution'],
        'resolvedAt': !exists(json, 'resolvedAt') ? undefined : new Date(json['resolvedAt']),
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
        'requeuedAsRunId': !exists(json, 'requeuedAsRunId') ? undefined : json['requeuedAsRunId'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'keyHash': !exists(json, 'keyHash') ? undefined : json['keyHash'],
        'lastAccessedById': !exists(json, 'lastAccessedById') ? undefined : json['lastAccessedById'],
        'lastAccessedDate': !exists(json, 'lastAccessedDate') ? undefined : new Date(json['lastAccessedDate']),
        'lastModifiedById': !exists(json, 'lastModifiedById') ? undefined : json['lastModifiedById'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : new Date(json['lastModifiedDate']),
    };
}

export function DeadLetterQueueToJSON(value?: DeadLetterQueue): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'runId': value.runId,
        'executionId': value.executionId,
        'taskId': value.taskId,
        'failureReason': value.failureReason,
        'failureType': value.failureType,
        'originalInputs': value.originalInputs,
        'originalConfig': value.originalConfig,
        'quarantinedAt': value.quarantinedAt === undefined ? undefined : value.quarantinedAt.toISOString(),
        'reviewedBy': value.reviewedBy,
        'resolution': value.resolution,
        'resolvedAt': value.resolvedAt === undefined ? undefined : value.resolvedAt.toISOString(),
        'notes': value.notes,
        'requeuedAsRunId': value.requeuedAsRunId,
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'keyHash': value.keyHash,
        'lastAccessedById': value.lastAccessedById,
        'lastAccessedDate': value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
        'lastModifiedById': value.lastModifiedById,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
    };
}

/**
* @export
* @enum {string}
*/
export enum DeadLetterQueueFailureTypeEnum {
    MAXRETRIES = 'max_retries',
    PERMANENTERROR = 'permanent_error',
    CIRCUITBREAKER = 'circuit_breaker',
    MANUAL = 'manual'
}
/**
* @export
* @enum {string}
*/
export enum DeadLetterQueueResolutionEnum {
    PENDING = 'pending',
    REQUEUED = 'requeued',
    FIXED = 'fixed',
    DISCARDED = 'discarded'
}


