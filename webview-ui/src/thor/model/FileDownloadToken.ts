// tslint:disable
/**
 * ValkyrAI CORE API
 * The API for accessing ValkyrAI services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// tslint:disable
/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelGeneric.ts.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/
import { exists, mapValues } from '../src/runtime';
import {


    FileRecord,
    FileRecordFromJSON,
    FileRecordToJSON,
    Principal,
    PrincipalFromJSON,
    PrincipalToJSON,
} from './';


// thorapi

/**
 * Time-bound access token for authorized file downloads.
 * @export
 * @interface FileDownloadToken
 */
export type FileDownloadToken  = {
    /**
     * Secure download token presented by a client.
     * @type {string}
     * @memberof FileDownloadToken
     */
    token: string;
    /**
     * File authorized for download.
     * @type {string}
     * @memberof FileDownloadToken
     */
    fileId: string;
    /**
     * Token expiration timestamp.
     * @type {Date}
     * @memberof FileDownloadToken
     */
    expiresAt: Date;
    /**
     * 
     * @type {FileRecord}
     * @memberof FileDownloadToken
     */
    file?: FileRecord;
    /**
     * Number of times the token has been used.
     * @type {number}
     * @memberof FileDownloadToken
     */
    downloadCount?: number;
    /**
     * Maximum allowed downloads (-1 for unlimited).
     * @type {number}
     * @memberof FileDownloadToken
     */
    maxDownloads?: number;
    /**
     * Principal the token was issued to, if scoped.
     * @type {string}
     * @memberof FileDownloadToken
     */
    issuedToId?: string;
    /**
     * 
     * @type {Principal}
     * @memberof FileDownloadToken
     */
    issuedTo?: Principal;
    /**
     * Optional IP address constraint for token usage.
     * @type {string}
     * @memberof FileDownloadToken
     */
    ipAddress?: string;
    /**
     * Unique identifier for object in the system
     * @type {string}
     * @memberof FileDownloadToken
     */
    id?: string;
    /**
     * UUID of owner of the object in the system
     * @type {string}
     * @memberof FileDownloadToken
     */
    ownerId?: string;
    /**
     * Date of object creation
     * @type {Date}
     * @memberof FileDownloadToken
     */
    createdDate?: Date;
    /**
     * Data, including hash of the key(s) used to encrypt this record.
     * @type {string}
     * @memberof FileDownloadToken
     */
    keyHash?: string;
    /**
     * Last user to access object
     * @type {string}
     * @memberof FileDownloadToken
     */
    lastAccessedById?: string;
    /**
     * Timestamp of last access of object
     * @type {Date}
     * @memberof FileDownloadToken
     */
    lastAccessedDate?: Date;
    /**
     * Unique identifier for user who last modifed the object in the system
     * @type {string}
     * @memberof FileDownloadToken
     */
    lastModifiedById?: string;
    /**
     * Date of last object modification
     * @type {Date}
     * @memberof FileDownloadToken
     */
    lastModifiedDate?: Date;
}

export function FileDownloadTokenFromJSON(json: any): FileDownloadToken {
    return {
        'token': json['token'],
        'fileId': json['fileId'],
        'expiresAt': new Date(json['expiresAt']),
        'file': !exists(json, 'file') ? undefined : FileRecordFromJSON(json['file']),
        'downloadCount': !exists(json, 'downloadCount') ? undefined : json['downloadCount'],
        'maxDownloads': !exists(json, 'maxDownloads') ? undefined : json['maxDownloads'],
        'issuedToId': !exists(json, 'issuedToId') ? undefined : json['issuedToId'],
        'issuedTo': !exists(json, 'issuedTo') ? undefined : PrincipalFromJSON(json['issuedTo']),
        'ipAddress': !exists(json, 'ipAddress') ? undefined : json['ipAddress'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'keyHash': !exists(json, 'keyHash') ? undefined : json['keyHash'],
        'lastAccessedById': !exists(json, 'lastAccessedById') ? undefined : json['lastAccessedById'],
        'lastAccessedDate': !exists(json, 'lastAccessedDate') ? undefined : new Date(json['lastAccessedDate']),
        'lastModifiedById': !exists(json, 'lastModifiedById') ? undefined : json['lastModifiedById'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : new Date(json['lastModifiedDate']),
    };
}

export function FileDownloadTokenToJSON(value?: FileDownloadToken): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'token': value.token,
        'fileId': value.fileId,
        'expiresAt': value.expiresAt.toISOString(),
        'file': FileRecordToJSON(value.file),
        'downloadCount': value.downloadCount,
        'maxDownloads': value.maxDownloads,
        'issuedToId': value.issuedToId,
        'issuedTo': PrincipalToJSON(value.issuedTo),
        'ipAddress': value.ipAddress,
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'keyHash': value.keyHash,
        'lastAccessedById': value.lastAccessedById,
        'lastAccessedDate': value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
        'lastModifiedById': value.lastModifiedById,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
    };
}


