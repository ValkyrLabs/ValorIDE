// tslint:disable
/**
 * ValkyrAI CORE API
 * The API for accessing ValkyrAI services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../src/runtime';
import {


    Customer,
    CustomerFromJSON,
    CustomerToJSON,
    Discount,
    DiscountFromJSON,
    DiscountToJSON,
    LineItem,
    LineItemFromJSON,
    LineItemToJSON,
} from './';


// thorapi

/**
 * Represents a cart, an estimate, or an order placed in the system
 * @export
 * @interface SalesOrder
 */
export type SalesOrder  = {
    /**
     * 
     * @type {Customer}
     * @memberof SalesOrder
     */
    customer: Customer;
    /**
     * 
     * @type {number}
     * @memberof SalesOrder
     */
    totalAmount: number;
    /**
     * the date this order was place
     * @type {Date}
     * @memberof SalesOrder
     */
    orderDate: Date;
    /**
     * 
     * @type {string}
     * @memberof SalesOrder
     */
    status: SalesOrderStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof SalesOrder
     */
    customerId?: string;
    /**
     * 
     * @type {Array<LineItem>}
     * @memberof SalesOrder
     */
    orderItems?: Array<LineItem>;
    /**
     * 
     * @type {Array<Discount>}
     * @memberof SalesOrder
     */
    orderDiscounts?: Array<Discount>;
    /**
     * 
     * @type {number}
     * @memberof SalesOrder
     */
    taxAmount?: number;
    /**
     * the customs fee for the product if any
     * @type {number}
     * @memberof SalesOrder
     */
    tariffAmount?: number;
    /**
     * 
     * @type {number}
     * @memberof SalesOrder
     */
    subtotalAmount?: number;
    /**
     * the date this estimate or prices expire
     * @type {Date}
     * @memberof SalesOrder
     */
    expirationDate?: Date;
    /**
     * Unique identifier for object in the system
     * @type {string}
     * @memberof SalesOrder
     */
    id?: string;
    /**
     * UUID of owner of the object in the system
     * @type {string}
     * @memberof SalesOrder
     */
    ownerId?: string;
    /**
     * Date of object creation
     * @type {Date}
     * @memberof SalesOrder
     */
    createdDate?: Date;
    /**
     * Data, including hash of the key(s) used to encrypt this record.
     * @type {string}
     * @memberof SalesOrder
     */
    keyHash?: string;
    /**
     * Last user to access object
     * @type {string}
     * @memberof SalesOrder
     */
    lastAccessedById?: string;
    /**
     * Timestamp of last access of object
     * @type {Date}
     * @memberof SalesOrder
     */
    lastAccessedDate?: Date;
    /**
     * Unique identifier for user who last modifed the object in the system
     * @type {string}
     * @memberof SalesOrder
     */
    lastModifiedById?: string;
    /**
     * Date of last object modification
     * @type {Date}
     * @memberof SalesOrder
     */
    lastModifiedDate?: Date;
}

export function SalesOrderFromJSON(json: any): SalesOrder {
    return {
        'customer': CustomerFromJSON(json['customer']),
        'totalAmount': json['totalAmount'],
        'orderDate': new Date(json['orderDate']),
        'status': json['status'],
        'customerId': !exists(json, 'customerId') ? undefined : json['customerId'],
        'orderItems': !exists(json, 'orderItems') ? undefined : (json['orderItems'] as Array<any>).map(LineItemFromJSON),
        'orderDiscounts': !exists(json, 'orderDiscounts') ? undefined : (json['orderDiscounts'] as Array<any>).map(DiscountFromJSON),
        'taxAmount': !exists(json, 'taxAmount') ? undefined : json['taxAmount'],
        'tariffAmount': !exists(json, 'tariffAmount') ? undefined : json['tariffAmount'],
        'subtotalAmount': !exists(json, 'subtotalAmount') ? undefined : json['subtotalAmount'],
        'expirationDate': !exists(json, 'expirationDate') ? undefined : new Date(json['expirationDate']),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'keyHash': !exists(json, 'keyHash') ? undefined : json['keyHash'],
        'lastAccessedById': !exists(json, 'lastAccessedById') ? undefined : json['lastAccessedById'],
        'lastAccessedDate': !exists(json, 'lastAccessedDate') ? undefined : new Date(json['lastAccessedDate']),
        'lastModifiedById': !exists(json, 'lastModifiedById') ? undefined : json['lastModifiedById'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : new Date(json['lastModifiedDate']),
    };
}

export function SalesOrderToJSON(value?: SalesOrder): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'customer': CustomerToJSON(value.customer),
        'totalAmount': value.totalAmount,
        'orderDate': value.orderDate.toISOString(),
        'status': value.status,
        'customerId': value.customerId,
        'orderItems': value.orderItems === undefined ? undefined : (value.orderItems as Array<any>).map(LineItemToJSON),
        'orderDiscounts': value.orderDiscounts === undefined ? undefined : (value.orderDiscounts as Array<any>).map(DiscountToJSON),
        'taxAmount': value.taxAmount,
        'tariffAmount': value.tariffAmount,
        'subtotalAmount': value.subtotalAmount,
        'expirationDate': value.expirationDate === undefined ? undefined : value.expirationDate.toISOString(),
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'keyHash': value.keyHash,
        'lastAccessedById': value.lastAccessedById,
        'lastAccessedDate': value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
        'lastModifiedById': value.lastModifiedById,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
    };
}

/**
* @export
* @enum {string}
*/
export enum SalesOrderStatusEnum {
    SHOPPING = 'shopping',
    PENDING = 'pending',
    SHIPPED = 'shipped',
    DELIVERED = 'delivered',
    CANCELED = 'canceled'
}


