// tslint:disable
/**
 * ValkyrAI CORE API
 * The API for accessing ValkyrAI services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// tslint:disable
/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelGeneric.ts.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/
import { exists, mapValues } from '../src/runtime';
import {


    FileRecord,
    FileRecordFromJSON,
    FileRecordToJSON,
    Principal,
    PrincipalFromJSON,
    PrincipalToJSON,
} from './';


// thorapi

/**
 * Tracks multipart upload state until completion.
 * @export
 * @interface FileUploadSession
 */
export type FileUploadSession  = {
    /**
     * Unique upload identifier provided by the storage backend.
     * @type {string}
     * @memberof FileUploadSession
     */
    uploadId: string;
    /**
     * Storage driver identifier used for this upload session.
     * @type {string}
     * @memberof FileUploadSession
     */
    storageDriverId: string;
    /**
     * Storage key that will store the uploaded object.
     * @type {string}
     * @memberof FileUploadSession
     */
    storageKey: string;
    /**
     * File that will receive the uploaded contents.
     * @type {string}
     * @memberof FileUploadSession
     */
    fileId: string;
    /**
     * Principal who initiated the upload session.
     * @type {string}
     * @memberof FileUploadSession
     */
    initiatedById: string;
    /**
     * When the upload session expires.
     * @type {Date}
     * @memberof FileUploadSession
     */
    expiresAt: Date;
    /**
     * 
     * @type {FileRecord}
     * @memberof FileUploadSession
     */
    file?: FileRecord;
    /**
     * 
     * @type {Principal}
     * @memberof FileUploadSession
     */
    initiatedBy?: Principal;
    /**
     * When the upload completed successfully.
     * @type {Date}
     * @memberof FileUploadSession
     */
    completedAt?: Date;
    /**
     * Multipart chunk size in bytes.
     * @type {number}
     * @memberof FileUploadSession
     */
    partSizeBytes?: number;
    /**
     * Additional metadata persisted with the session.
     * @type {string}
     * @memberof FileUploadSession
     */
    metadata?: string;
    /**
     * Unique identifier for object in the system
     * @type {string}
     * @memberof FileUploadSession
     */
    id?: string;
    /**
     * UUID of owner of the object in the system
     * @type {string}
     * @memberof FileUploadSession
     */
    ownerId?: string;
    /**
     * Date of object creation
     * @type {Date}
     * @memberof FileUploadSession
     */
    createdDate?: Date;
    /**
     * Data, including hash of the key(s) used to encrypt this record.
     * @type {string}
     * @memberof FileUploadSession
     */
    keyHash?: string;
    /**
     * Last user to access object
     * @type {string}
     * @memberof FileUploadSession
     */
    lastAccessedById?: string;
    /**
     * Timestamp of last access of object
     * @type {Date}
     * @memberof FileUploadSession
     */
    lastAccessedDate?: Date;
    /**
     * Unique identifier for user who last modifed the object in the system
     * @type {string}
     * @memberof FileUploadSession
     */
    lastModifiedById?: string;
    /**
     * Date of last object modification
     * @type {Date}
     * @memberof FileUploadSession
     */
    lastModifiedDate?: Date;
}

export function FileUploadSessionFromJSON(json: any): FileUploadSession {
    return {
        'uploadId': json['uploadId'],
        'storageDriverId': json['storageDriverId'],
        'storageKey': json['storageKey'],
        'fileId': json['fileId'],
        'initiatedById': json['initiatedById'],
        'expiresAt': new Date(json['expiresAt']),
        'file': !exists(json, 'file') ? undefined : FileRecordFromJSON(json['file']),
        'initiatedBy': !exists(json, 'initiatedBy') ? undefined : PrincipalFromJSON(json['initiatedBy']),
        'completedAt': !exists(json, 'completedAt') ? undefined : new Date(json['completedAt']),
        'partSizeBytes': !exists(json, 'partSizeBytes') ? undefined : json['partSizeBytes'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'keyHash': !exists(json, 'keyHash') ? undefined : json['keyHash'],
        'lastAccessedById': !exists(json, 'lastAccessedById') ? undefined : json['lastAccessedById'],
        'lastAccessedDate': !exists(json, 'lastAccessedDate') ? undefined : new Date(json['lastAccessedDate']),
        'lastModifiedById': !exists(json, 'lastModifiedById') ? undefined : json['lastModifiedById'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : new Date(json['lastModifiedDate']),
    };
}

export function FileUploadSessionToJSON(value?: FileUploadSession): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'uploadId': value.uploadId,
        'storageDriverId': value.storageDriverId,
        'storageKey': value.storageKey,
        'fileId': value.fileId,
        'initiatedById': value.initiatedById,
        'expiresAt': value.expiresAt.toISOString(),
        'file': FileRecordToJSON(value.file),
        'initiatedBy': PrincipalToJSON(value.initiatedBy),
        'completedAt': value.completedAt === undefined ? undefined : value.completedAt.toISOString(),
        'partSizeBytes': value.partSizeBytes,
        'metadata': value.metadata,
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'keyHash': value.keyHash,
        'lastAccessedById': value.lastAccessedById,
        'lastAccessedDate': value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
        'lastModifiedById': value.lastModifiedById,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
    };
}


