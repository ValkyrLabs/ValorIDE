// tslint:disable
/**
 * ValkyrAI CORE API
 * The API for accessing ValkyrAI services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// tslint:disable
/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelGeneric.ts.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/
import { exists, mapValues } from '../src/runtime';
import {


    FileRecord,
    FileRecordFromJSON,
    FileRecordToJSON,
    Product,
    ProductFromJSON,
    ProductToJSON,
} from './';


// thorapi

/**
 * Immutable record linking a FileRecord (physical payload) to a Product for digital delivery. Supports e-books, media, software downloads, and subscription content. Primary key for object-level ACL control. 
 * @export
 * @interface DigitalAsset
 */
export type DigitalAsset  = {
    /**
     * Product this asset delivers (required link to canonical Product).
     * @type {string}
     * @memberof DigitalAsset
     */
    productId: string;
    /**
     * FileRecord containing the actual payload (e-book, PDF, binary, etc.).
     * @type {string}
     * @memberof DigitalAsset
     */
    fileId: string;
    /**
     * How the asset is made available to the customer.
     * @type {string}
     * @memberof DigitalAsset
     */
    deliveryMethod: DigitalAssetDeliveryMethodEnum;
    /**
     * 
     * @type {Product}
     * @memberof DigitalAsset
     */
    product?: Product;
    /**
     * 
     * @type {FileRecord}
     * @memberof DigitalAsset
     */
    file?: FileRecord;
    /**
     * Licensing model for this digital asset.
     * @type {string}
     * @memberof DigitalAsset
     */
    accessModel?: DigitalAssetAccessModelEnum;
    /**
     * Maximum number of downloads allowed per purchase (-1 = unlimited). Enforced by DownloadAccess entity. 
     * @type {number}
     * @memberof DigitalAsset
     */
    maxDownloads?: number;
    /**
     * Days after purchase before download link expires (-1 = never). Applied when DownloadAccess is created. 
     * @type {number}
     * @memberof DigitalAsset
     */
    expiresAfterDays?: number;
    /**
     * Send reminder email when download access is about to expire.
     * @type {boolean}
     * @memberof DigitalAsset
     */
    notifyCustomerOnExpiry?: boolean;
    /**
     * Unique identifier for object in the system
     * @type {string}
     * @memberof DigitalAsset
     */
    id?: string;
    /**
     * UUID of owner of the object in the system
     * @type {string}
     * @memberof DigitalAsset
     */
    ownerId?: string;
    /**
     * Date of object creation
     * @type {Date}
     * @memberof DigitalAsset
     */
    createdDate?: Date;
    /**
     * Data, including hash of the key(s) used to encrypt this record.
     * @type {string}
     * @memberof DigitalAsset
     */
    keyHash?: string;
    /**
     * Last user to access object
     * @type {string}
     * @memberof DigitalAsset
     */
    lastAccessedById?: string;
    /**
     * Timestamp of last access of object
     * @type {Date}
     * @memberof DigitalAsset
     */
    lastAccessedDate?: Date;
    /**
     * Unique identifier for user who last modifed the object in the system
     * @type {string}
     * @memberof DigitalAsset
     */
    lastModifiedById?: string;
    /**
     * Date of last object modification
     * @type {Date}
     * @memberof DigitalAsset
     */
    lastModifiedDate?: Date;
}

export function DigitalAssetFromJSON(json: any): DigitalAsset {
    return {
        'productId': json['productId'],
        'fileId': json['fileId'],
        'deliveryMethod': json['deliveryMethod'],
        'product': !exists(json, 'product') ? undefined : ProductFromJSON(json['product']),
        'file': !exists(json, 'file') ? undefined : FileRecordFromJSON(json['file']),
        'accessModel': !exists(json, 'accessModel') ? undefined : json['accessModel'],
        'maxDownloads': !exists(json, 'maxDownloads') ? undefined : json['maxDownloads'],
        'expiresAfterDays': !exists(json, 'expiresAfterDays') ? undefined : json['expiresAfterDays'],
        'notifyCustomerOnExpiry': !exists(json, 'notifyCustomerOnExpiry') ? undefined : json['notifyCustomerOnExpiry'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'keyHash': !exists(json, 'keyHash') ? undefined : json['keyHash'],
        'lastAccessedById': !exists(json, 'lastAccessedById') ? undefined : json['lastAccessedById'],
        'lastAccessedDate': !exists(json, 'lastAccessedDate') ? undefined : new Date(json['lastAccessedDate']),
        'lastModifiedById': !exists(json, 'lastModifiedById') ? undefined : json['lastModifiedById'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : new Date(json['lastModifiedDate']),
    };
}

export function DigitalAssetToJSON(value?: DigitalAsset): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'productId': value.productId,
        'fileId': value.fileId,
        'deliveryMethod': value.deliveryMethod,
        'product': ProductToJSON(value.product),
        'file': FileRecordToJSON(value.file),
        'accessModel': value.accessModel,
        'maxDownloads': value.maxDownloads,
        'expiresAfterDays': value.expiresAfterDays,
        'notifyCustomerOnExpiry': value.notifyCustomerOnExpiry,
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'keyHash': value.keyHash,
        'lastAccessedById': value.lastAccessedById,
        'lastAccessedDate': value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
        'lastModifiedById': value.lastModifiedById,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
    };
}

/**
* @export
* @enum {string}
*/
export enum DigitalAssetDeliveryMethodEnum {
    DIRECTDOWNLOAD = 'direct_download',
    EMAILDELIVERY = 'email_delivery',
    PORTALACCESS = 'portal_access',
    STREAMING = 'streaming',
    APIKEY = 'api_key'
}
/**
* @export
* @enum {string}
*/
export enum DigitalAssetAccessModelEnum {
    PERPETUAL = 'perpetual',
    SUBSCRIPTION = 'subscription',
    TRIAL = 'trial',
    LICENSEKEY = 'license_key',
    ONETIME = 'one_time'
}


