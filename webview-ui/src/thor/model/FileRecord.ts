// tslint:disable
/**
 * ValkyrAI CORE API
 * The API for accessing ValkyrAI services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// tslint:disable
/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelGeneric.ts.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/
import { exists, mapValues } from '../src/runtime';
import {


    Organization,
    OrganizationFromJSON,
    OrganizationToJSON,
    Principal,
    PrincipalFromJSON,
    PrincipalToJSON,
} from './';


// thorapi

/**
 * Primary metadata for a stored file, including lifecycle and ownership context.
 * @export
 * @interface FileRecord
 */
export type FileRecord  = {
    /**
     * Identifier of the configured storage driver handling the payload.
     * @type {string}
     * @memberof FileRecord
     */
    storageDriverId: string;
    /**
     * Provider-specific object key or path.
     * @type {string}
     * @memberof FileRecord
     */
    storageKey: string;
    /**
     * Original filename supplied by the uploader.
     * @type {string}
     * @memberof FileRecord
     */
    filename: string;
    /**
     * File size in bytes for the latest version.
     * @type {number}
     * @memberof FileRecord
     */
    sizeBytes: number;
    /**
     * Lifecycle state of the stored file.
     * @type {string}
     * @memberof FileRecord
     */
    status: FileRecordStatusEnum;
    /**
     * Owning organization for ACL enforcement and billing.
     * @type {string}
     * @memberof FileRecord
     */
    organizationId?: string;
    /**
     * 
     * @type {Organization}
     * @memberof FileRecord
     */
    organization?: Organization;
    /**
     * Principal who initiated the upload.
     * @type {string}
     * @memberof FileRecord
     */
    uploaderId?: string;
    /**
     * 
     * @type {Principal}
     * @memberof FileRecord
     */
    uploader?: Principal;
    /**
     * Optional collaboration space containing this file.
     * @type {string}
     * @memberof FileRecord
     */
    spaceId?: string;
    /**
     * MIME type captured at upload.
     * @type {string}
     * @memberof FileRecord
     */
    mimeType?: string;
    /**
     * SHA-256 checksum to validate download integrity.
     * @type {string}
     * @memberof FileRecord
     */
    checksumSha256?: string;
    /**
     * Provider-issued entity tag for conditional requests.
     * @type {string}
     * @memberof FileRecord
     */
    providerEtag?: string;
    /**
     * Optional human readable description.
     * @type {string}
     * @memberof FileRecord
     */
    description?: string;
    /**
     * Logical folder path within the owning space.
     * @type {string}
     * @memberof FileRecord
     */
    directoryPath?: string;
    /**
     * Searchable tags applied to the file.
     * @type {string}
     * @memberof FileRecord
     */
    tags?: string;
    /**
     * Arbitrary metadata captured alongside the upload.
     * @type {string}
     * @memberof FileRecord
     */
    metadata?: string;
    /**
     * Virus or DLP scan status for the stored file.
     * @type {string}
     * @memberof FileRecord
     */
    virusScanStatus?: FileRecordVirusScanStatusEnum;
    /**
     * Optional retention expiration timestamp for policy enforcement.
     * @type {Date}
     * @memberof FileRecord
     */
    retentionExpiresAt?: Date;
    /**
     * Soft delete timestamp if the file has been logically removed.
     * @type {Date}
     * @memberof FileRecord
     */
    deletedAt?: Date;
    /**
     * Highest version number recorded for this file.
     * @type {number}
     * @memberof FileRecord
     */
    latestVersionNumber?: number;
    /**
     * Identifier of the FileVersion that represents the latest content.
     * @type {string}
     * @memberof FileRecord
     */
    currentVersionId?: string;
    /**
     * Unique identifier for object in the system
     * @type {string}
     * @memberof FileRecord
     */
    id?: string;
    /**
     * UUID of owner of the object in the system
     * @type {string}
     * @memberof FileRecord
     */
    ownerId?: string;
    /**
     * Date of object creation
     * @type {Date}
     * @memberof FileRecord
     */
    createdDate?: Date;
    /**
     * Data, including hash of the key(s) used to encrypt this record.
     * @type {string}
     * @memberof FileRecord
     */
    keyHash?: string;
    /**
     * Last user to access object
     * @type {string}
     * @memberof FileRecord
     */
    lastAccessedById?: string;
    /**
     * Timestamp of last access of object
     * @type {Date}
     * @memberof FileRecord
     */
    lastAccessedDate?: Date;
    /**
     * Unique identifier for user who last modifed the object in the system
     * @type {string}
     * @memberof FileRecord
     */
    lastModifiedById?: string;
    /**
     * Date of last object modification
     * @type {Date}
     * @memberof FileRecord
     */
    lastModifiedDate?: Date;
}

export function FileRecordFromJSON(json: any): FileRecord {
    return {
        'storageDriverId': json['storageDriverId'],
        'storageKey': json['storageKey'],
        'filename': json['filename'],
        'sizeBytes': json['sizeBytes'],
        'status': json['status'],
        'organizationId': !exists(json, 'organizationId') ? undefined : json['organizationId'],
        'organization': !exists(json, 'organization') ? undefined : OrganizationFromJSON(json['organization']),
        'uploaderId': !exists(json, 'uploaderId') ? undefined : json['uploaderId'],
        'uploader': !exists(json, 'uploader') ? undefined : PrincipalFromJSON(json['uploader']),
        'spaceId': !exists(json, 'spaceId') ? undefined : json['spaceId'],
        'mimeType': !exists(json, 'mimeType') ? undefined : json['mimeType'],
        'checksumSha256': !exists(json, 'checksumSha256') ? undefined : json['checksumSha256'],
        'providerEtag': !exists(json, 'providerEtag') ? undefined : json['providerEtag'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'directoryPath': !exists(json, 'directoryPath') ? undefined : json['directoryPath'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'virusScanStatus': !exists(json, 'virusScanStatus') ? undefined : json['virusScanStatus'],
        'retentionExpiresAt': !exists(json, 'retentionExpiresAt') ? undefined : new Date(json['retentionExpiresAt']),
        'deletedAt': !exists(json, 'deletedAt') ? undefined : new Date(json['deletedAt']),
        'latestVersionNumber': !exists(json, 'latestVersionNumber') ? undefined : json['latestVersionNumber'],
        'currentVersionId': !exists(json, 'currentVersionId') ? undefined : json['currentVersionId'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'keyHash': !exists(json, 'keyHash') ? undefined : json['keyHash'],
        'lastAccessedById': !exists(json, 'lastAccessedById') ? undefined : json['lastAccessedById'],
        'lastAccessedDate': !exists(json, 'lastAccessedDate') ? undefined : new Date(json['lastAccessedDate']),
        'lastModifiedById': !exists(json, 'lastModifiedById') ? undefined : json['lastModifiedById'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : new Date(json['lastModifiedDate']),
    };
}

export function FileRecordToJSON(value?: FileRecord): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'storageDriverId': value.storageDriverId,
        'storageKey': value.storageKey,
        'filename': value.filename,
        'sizeBytes': value.sizeBytes,
        'status': value.status,
        'organizationId': value.organizationId,
        'organization': OrganizationToJSON(value.organization),
        'uploaderId': value.uploaderId,
        'uploader': PrincipalToJSON(value.uploader),
        'spaceId': value.spaceId,
        'mimeType': value.mimeType,
        'checksumSha256': value.checksumSha256,
        'providerEtag': value.providerEtag,
        'description': value.description,
        'directoryPath': value.directoryPath,
        'tags': value.tags,
        'metadata': value.metadata,
        'virusScanStatus': value.virusScanStatus,
        'retentionExpiresAt': value.retentionExpiresAt === undefined ? undefined : value.retentionExpiresAt.toISOString(),
        'deletedAt': value.deletedAt === undefined ? undefined : value.deletedAt.toISOString(),
        'latestVersionNumber': value.latestVersionNumber,
        'currentVersionId': value.currentVersionId,
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'keyHash': value.keyHash,
        'lastAccessedById': value.lastAccessedById,
        'lastAccessedDate': value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
        'lastModifiedById': value.lastModifiedById,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
    };
}

/**
* @export
* @enum {string}
*/
export enum FileRecordStatusEnum {
    UPLOADING = 'uploading',
    SCANNING = 'scanning',
    AVAILABLE = 'available',
    BLOCKED = 'blocked',
    DELETED = 'deleted',
    FAILED = 'failed'
}
/**
* @export
* @enum {string}
*/
export enum FileRecordVirusScanStatusEnum {
    PENDING = 'pending',
    INPROGRESS = 'in_progress',
    CLEAN = 'clean',
    INFECTED = 'infected',
    SKIPPED = 'skipped'
}


