// tslint:disable
/**
 * ValkyrAI CORE API
 * The API for accessing ValkyrAI services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// tslint:disable
/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelGeneric.ts.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/
import { exists, mapValues } from '../src/runtime';
import {


    OasObjectSchema,
    OasObjectSchemaFromJSON,
    OasObjectSchemaToJSON,
} from './';


// thorapi

/**
 * 
 * @export
 * @interface McpTool
 */
export type McpTool  = {
    /**
     * Human readable tool name exposed to MCP clients.
     * @type {string}
     * @memberof McpTool
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof McpTool
     */
    mcpServerId?: string;
    /**
     * Stable machine readable identifier for this tool.
     * @type {string}
     * @memberof McpTool
     */
    slug?: string;
    /**
     * Detailed explanation of what the tool does and when to use it.
     * @type {string}
     * @memberof McpTool
     */
    description?: string;
    /**
     * Classification for MCP tools to mirror Copilot-like experiences.
     * @type {string}
     * @memberof McpTool
     */
    category?: McpToolCategoryEnum;
    /**
     * Optional capability tags that aid discovery.
     * @type {string}
     * @memberof McpTool
     */
    capabilities?: string;
    /**
     * 
     * @type {OasObjectSchema}
     * @memberof McpTool
     */
    inputSchemaRef?: OasObjectSchema;
    /**
     * 
     * @type {OasObjectSchema}
     * @memberof McpTool
     */
    outputSchemaRef?: OasObjectSchema;
    /**
     * Preferred invocation style for the tool.
     * @type {string}
     * @memberof McpTool
     */
    invocationStyle?: McpToolInvocationStyleEnum;
    /**
     * Indicates if the tool can stream responses incrementally.
     * @type {boolean}
     * @memberof McpTool
     */
    streamingSupported?: boolean;
    /**
     * Whether the tool should auto-execute without human approval.
     * @type {boolean}
     * @memberof McpTool
     */
    autoApprove?: boolean;
    /**
     * Default auto-approve recommendation for presets referencing this tool.
     * @type {boolean}
     * @memberof McpTool
     */
    defaultAutoApprove?: boolean;
    /**
     * Optional documentation URL for additional guidance.
     * @type {string}
     * @memberof McpTool
     */
    docsUrl?: string;
    /**
     * Legacy serialized schema representation. Use inputSchemaRef instead.
     * @type {string}
     * @memberof McpTool
     */
    inputSchema?: string;
    /**
     * Unique identifier for object in the system
     * @type {string}
     * @memberof McpTool
     */
    id?: string;
    /**
     * UUID of owner of the object in the system
     * @type {string}
     * @memberof McpTool
     */
    ownerId?: string;
    /**
     * Date of object creation
     * @type {Date}
     * @memberof McpTool
     */
    createdDate?: Date;
    /**
     * Data, including hash of the key(s) used to encrypt this record.
     * @type {string}
     * @memberof McpTool
     */
    keyHash?: string;
    /**
     * Last user to access object
     * @type {string}
     * @memberof McpTool
     */
    lastAccessedById?: string;
    /**
     * Timestamp of last access of object
     * @type {Date}
     * @memberof McpTool
     */
    lastAccessedDate?: Date;
    /**
     * Unique identifier for user who last modifed the object in the system
     * @type {string}
     * @memberof McpTool
     */
    lastModifiedById?: string;
    /**
     * Date of last object modification
     * @type {Date}
     * @memberof McpTool
     */
    lastModifiedDate?: Date;
}

export function McpToolFromJSON(json: any): McpTool {
    return {
        'name': json['name'],
        'mcpServerId': !exists(json, 'mcpServerId') ? undefined : json['mcpServerId'],
        'slug': !exists(json, 'slug') ? undefined : json['slug'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'category': !exists(json, 'category') ? undefined : json['category'],
        'capabilities': !exists(json, 'capabilities') ? undefined : json['capabilities'],
        'inputSchemaRef': !exists(json, 'inputSchemaRef') ? undefined : OasObjectSchemaFromJSON(json['inputSchemaRef']),
        'outputSchemaRef': !exists(json, 'outputSchemaRef') ? undefined : OasObjectSchemaFromJSON(json['outputSchemaRef']),
        'invocationStyle': !exists(json, 'invocationStyle') ? undefined : json['invocationStyle'],
        'streamingSupported': !exists(json, 'streamingSupported') ? undefined : json['streamingSupported'],
        'autoApprove': !exists(json, 'autoApprove') ? undefined : json['autoApprove'],
        'defaultAutoApprove': !exists(json, 'defaultAutoApprove') ? undefined : json['defaultAutoApprove'],
        'docsUrl': !exists(json, 'docsUrl') ? undefined : json['docsUrl'],
        'inputSchema': !exists(json, 'inputSchema') ? undefined : json['inputSchema'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'keyHash': !exists(json, 'keyHash') ? undefined : json['keyHash'],
        'lastAccessedById': !exists(json, 'lastAccessedById') ? undefined : json['lastAccessedById'],
        'lastAccessedDate': !exists(json, 'lastAccessedDate') ? undefined : new Date(json['lastAccessedDate']),
        'lastModifiedById': !exists(json, 'lastModifiedById') ? undefined : json['lastModifiedById'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : new Date(json['lastModifiedDate']),
    };
}

export function McpToolToJSON(value?: McpTool): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'name': value.name,
        'mcpServerId': value.mcpServerId,
        'slug': value.slug,
        'description': value.description,
        'category': value.category,
        'capabilities': value.capabilities,
        'inputSchemaRef': OasObjectSchemaToJSON(value.inputSchemaRef),
        'outputSchemaRef': OasObjectSchemaToJSON(value.outputSchemaRef),
        'invocationStyle': value.invocationStyle,
        'streamingSupported': value.streamingSupported,
        'autoApprove': value.autoApprove,
        'defaultAutoApprove': value.defaultAutoApprove,
        'docsUrl': value.docsUrl,
        'inputSchema': value.inputSchema,
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'keyHash': value.keyHash,
        'lastAccessedById': value.lastAccessedById,
        'lastAccessedDate': value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
        'lastModifiedById': value.lastModifiedById,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
    };
}

/**
* @export
* @enum {string}
*/
export enum McpToolCategoryEnum {
    CLOUDPLATFORM = 'cloud_platform',
    DEVOPS = 'devops',
    SECURITY = 'security',
    OBSERVABILITY = 'observability',
    DATAENGINEERING = 'data_engineering',
    AIASSISTANT = 'ai_assistant',
    PRODUCTIVITY = 'productivity',
    CUSTOMIZATION = 'customization'
}
/**
* @export
* @enum {string}
*/
export enum McpToolInvocationStyleEnum {
    SINGLECALL = 'single_call',
    CONVERSATIONAL = 'conversational',
    STREAMING = 'streaming',
    BACKGROUND = 'background'
}


