// tslint:disable
/**
 * ValkyrAI CORE API
 * The API for accessing ValkyrAI services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// tslint:disable
/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelGeneric.ts.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
*/
import { exists, mapValues } from '../src/runtime';

// thorapi

/**
 * Circuit breaker state for external dependencies and rate limiting
 * @export
 * @interface CircuitBreakerState
 */
export type CircuitBreakerState  = {
    /**
     * Module class + target endpoint identifier (e.g. StripeModule:api.stripe.com)
     * @type {string}
     * @memberof CircuitBreakerState
     */
    target?: string;
    /**
     * Current circuit breaker state
     * @type {string}
     * @memberof CircuitBreakerState
     */
    state?: CircuitBreakerStateStateEnum;
    /**
     * Number of consecutive failures in current window
     * @type {number}
     * @memberof CircuitBreakerState
     */
    failureCount?: number;
    /**
     * Number of consecutive successes in current window
     * @type {number}
     * @memberof CircuitBreakerState
     */
    successCount?: number;
    /**
     * Timestamp of most recent failure
     * @type {Date}
     * @memberof CircuitBreakerState
     */
    lastFailureAt?: Date;
    /**
     * When the circuit was opened
     * @type {Date}
     * @memberof CircuitBreakerState
     */
    openedAt?: Date;
    /**
     * Next allowed retry attempt timestamp
     * @type {Date}
     * @memberof CircuitBreakerState
     */
    nextRetryAt?: Date;
    /**
     * Start of current evaluation window
     * @type {Date}
     * @memberof CircuitBreakerState
     */
    windowStartAt?: Date;
    /**
     * Unique identifier for object in the system
     * @type {string}
     * @memberof CircuitBreakerState
     */
    id?: string;
    /**
     * UUID of owner of the object in the system
     * @type {string}
     * @memberof CircuitBreakerState
     */
    ownerId?: string;
    /**
     * Date of object creation
     * @type {Date}
     * @memberof CircuitBreakerState
     */
    createdDate?: Date;
    /**
     * Data, including hash of the key(s) used to encrypt this record.
     * @type {string}
     * @memberof CircuitBreakerState
     */
    keyHash?: string;
    /**
     * Last user to access object
     * @type {string}
     * @memberof CircuitBreakerState
     */
    lastAccessedById?: string;
    /**
     * Timestamp of last access of object
     * @type {Date}
     * @memberof CircuitBreakerState
     */
    lastAccessedDate?: Date;
    /**
     * Unique identifier for user who last modifed the object in the system
     * @type {string}
     * @memberof CircuitBreakerState
     */
    lastModifiedById?: string;
    /**
     * Date of last object modification
     * @type {Date}
     * @memberof CircuitBreakerState
     */
    lastModifiedDate?: Date;
}

export function CircuitBreakerStateFromJSON(json: any): CircuitBreakerState {
    return {
        'target': !exists(json, 'target') ? undefined : json['target'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'failureCount': !exists(json, 'failureCount') ? undefined : json['failureCount'],
        'successCount': !exists(json, 'successCount') ? undefined : json['successCount'],
        'lastFailureAt': !exists(json, 'lastFailureAt') ? undefined : new Date(json['lastFailureAt']),
        'openedAt': !exists(json, 'openedAt') ? undefined : new Date(json['openedAt']),
        'nextRetryAt': !exists(json, 'nextRetryAt') ? undefined : new Date(json['nextRetryAt']),
        'windowStartAt': !exists(json, 'windowStartAt') ? undefined : new Date(json['windowStartAt']),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'keyHash': !exists(json, 'keyHash') ? undefined : json['keyHash'],
        'lastAccessedById': !exists(json, 'lastAccessedById') ? undefined : json['lastAccessedById'],
        'lastAccessedDate': !exists(json, 'lastAccessedDate') ? undefined : new Date(json['lastAccessedDate']),
        'lastModifiedById': !exists(json, 'lastModifiedById') ? undefined : json['lastModifiedById'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : new Date(json['lastModifiedDate']),
    };
}

export function CircuitBreakerStateToJSON(value?: CircuitBreakerState): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'target': value.target,
        'state': value.state,
        'failureCount': value.failureCount,
        'successCount': value.successCount,
        'lastFailureAt': value.lastFailureAt === undefined ? undefined : value.lastFailureAt.toISOString(),
        'openedAt': value.openedAt === undefined ? undefined : value.openedAt.toISOString(),
        'nextRetryAt': value.nextRetryAt === undefined ? undefined : value.nextRetryAt.toISOString(),
        'windowStartAt': value.windowStartAt === undefined ? undefined : value.windowStartAt.toISOString(),
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'keyHash': value.keyHash,
        'lastAccessedById': value.lastAccessedById,
        'lastAccessedDate': value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
        'lastModifiedById': value.lastModifiedById,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
    };
}

/**
* @export
* @enum {string}
*/
export enum CircuitBreakerStateStateEnum {
    CLOSED = 'closed',
    OPEN = 'open',
    HALFOPEN = 'half_open'
}


