// tslint:disable
/**
 * ValkyrAI CORE API
 * The API for accessing ValkyrAI services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../src/runtime"
import { ChatMessage, ChatMessageFromJSON, ChatMessageToJSON } from "./"

// thorapi

/**
 *
 * @export
 * @interface ChatCompletionRequest
 */
export type ChatCompletionRequest = {
	/**
	 * The model to use for generating chat completions (e.g. \'gpt-4\').
	 * @type {string}
	 * @memberof ChatCompletionRequest
	 */
	model: string
	/**
	 * Array of role-based messages to control the conversation.
	 * @type {Array<ChatMessage>}
	 * @memberof ChatCompletionRequest
	 */
	messages: Array<ChatMessage>
	/**
	 * Optional field, historically used in non-chat contexts; often omitted.
	 * @type {string}
	 * @memberof ChatCompletionRequest
	 */
	prompt?: string
	/**
	 * the amount of desired variance or non-determinism in the result
	 * @type {number}
	 * @memberof ChatCompletionRequest
	 */
	temperature?: number
	/**
	 * Whether to stream partial results (OpenAI streaming). Usually false.
	 * @type {boolean}
	 * @memberof ChatCompletionRequest
	 */
	stream?: boolean
	/**
	 * Unique identifier for object in the system
	 * @type {string}
	 * @memberof ChatCompletionRequest
	 */
	id?: string
	/**
	 * UUID of owner of the object in the system
	 * @type {string}
	 * @memberof ChatCompletionRequest
	 */
	ownerId?: string
	/**
	 * Date of object creation
	 * @type {Date}
	 * @memberof ChatCompletionRequest
	 */
	createdDate?: Date
	/**
	 * Data, including hash of the key(s) used to encrypt this record.
	 * @type {string}
	 * @memberof ChatCompletionRequest
	 */
	keyHash?: string
	/**
	 * Last user to access object
	 * @type {string}
	 * @memberof ChatCompletionRequest
	 */
	lastAccessedById?: string
	/**
	 * Timestamp of last access of object
	 * @type {Date}
	 * @memberof ChatCompletionRequest
	 */
	lastAccessedDate?: Date
	/**
	 * Unique identifier for user who last modifed the object in the system
	 * @type {string}
	 * @memberof ChatCompletionRequest
	 */
	lastModifiedById?: string
	/**
	 * Date of last object modification
	 * @type {Date}
	 * @memberof ChatCompletionRequest
	 */
	lastModifiedDate?: Date
}

export function ChatCompletionRequestFromJSON(json: any): ChatCompletionRequest {
	return {
		model: json["model"],
		messages: (json["messages"] as Array<any>).map(ChatMessageFromJSON),
		prompt: !exists(json, "prompt") ? undefined : json["prompt"],
		temperature: !exists(json, "temperature") ? undefined : json["temperature"],
		stream: !exists(json, "stream") ? undefined : json["stream"],
		id: !exists(json, "id") ? undefined : json["id"],
		ownerId: !exists(json, "ownerId") ? undefined : json["ownerId"],
		createdDate: !exists(json, "createdDate") ? undefined : new Date(json["createdDate"]),
		keyHash: !exists(json, "keyHash") ? undefined : json["keyHash"],
		lastAccessedById: !exists(json, "lastAccessedById") ? undefined : json["lastAccessedById"],
		lastAccessedDate: !exists(json, "lastAccessedDate") ? undefined : new Date(json["lastAccessedDate"]),
		lastModifiedById: !exists(json, "lastModifiedById") ? undefined : json["lastModifiedById"],
		lastModifiedDate: !exists(json, "lastModifiedDate") ? undefined : new Date(json["lastModifiedDate"]),
	}
}

export function ChatCompletionRequestToJSON(value?: ChatCompletionRequest): any {
	if (value === undefined) {
		return undefined
	}
	return {
		model: value.model,
		messages: (value.messages as Array<any>).map(ChatMessageToJSON),
		prompt: value.prompt,
		temperature: value.temperature,
		stream: value.stream,
		id: value.id,
		ownerId: value.ownerId,
		createdDate: value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
		keyHash: value.keyHash,
		lastAccessedById: value.lastAccessedById,
		lastAccessedDate: value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
		lastModifiedById: value.lastModifiedById,
		lastModifiedDate: value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
	}
}
