// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: ChartApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    Chart,
    ChartFromJSON,
    ChartToJSON,
} from '../model';

export interface DeleteChartApiRequest {
    id: string;
}

export interface GetChartApiRequest {
    id: string;
}

export interface GetChartListApiRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostChartApiRequest {
    chart: Chart;
}

export interface UpdateChartApiRequest {
    id: string;
    chart: Chart;
}


/**
 * Deletes a specific Chart.
 * Delete a Chart.
 */
function deleteChartRaw<T>(requestParameters: DeleteChartApiRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteChart.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Chart/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific Chart.
* Delete a Chart.
*/
export function deleteChart<T>(requestParameters: DeleteChartApiRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteChartRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single Chart for a specific uid.
 * Retrieve a single Chart
 */
function getChartRaw<T>(requestParameters: GetChartApiRequest, requestConfig: runtime.TypedQueryConfig<T, Chart> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getChart.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Chart/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ChartFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single Chart for a specific uid.
* Retrieve a single Chart
*/
export function getChart<T>(requestParameters: GetChartApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Chart>): QueryConfig<T> {
    return getChartRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of Charts.
 * Retrieve a list of Charts
 */
function getChartListRaw<T>(requestParameters: GetChartListApiRequest, requestConfig: runtime.TypedQueryConfig<T, Array<Chart>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Chart`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ChartFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of Charts.
* Retrieve a list of Charts
*/
export function getChartList<T>(requestParameters: GetChartListApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<Chart>>): QueryConfig<T> {
    return getChartListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new Chart.
 * Create a new Chart
 */
function postChartRaw<T>(requestParameters: PostChartApiRequest, requestConfig: runtime.TypedQueryConfig<T, Chart> = {}): QueryConfig<T> {
    if (requestParameters.chart === null || requestParameters.chart === undefined) {
        throw new runtime.RequiredError('chart','Required parameter requestParameters.chart was null or undefined when calling postChart.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Chart`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ChartToJSON(requestParameters.chart),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ChartFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new Chart.
* Create a new Chart
*/
export function postChart<T>(requestParameters: PostChartApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Chart>): QueryConfig<T> {
    return postChartRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing Chart.
 * Update an existing Chart
 */
function updateChartRaw<T>(requestParameters: UpdateChartApiRequest, requestConfig: runtime.TypedQueryConfig<T, Chart> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateChart.');
    }

    if (requestParameters.chart === null || requestParameters.chart === undefined) {
        throw new runtime.RequiredError('chart','Required parameter requestParameters.chart was null or undefined when calling updateChart.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Chart/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || ChartToJSON(requestParameters.chart),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ChartFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing Chart.
* Update an existing Chart
*/
export function updateChart<T>(requestParameters: UpdateChartApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Chart>): QueryConfig<T> {
    return updateChartRaw(requestParameters, requestConfig);
}

