// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: ChatCompletionRequestApi
*/

import {
  HttpMethods,
  QueryConfig,
  ResponseBody,
  ResponseText,
} from "redux-query";
import * as runtime from "../src/runtime";
import {
  ChatCompletionRequest,
  ChatCompletionRequestFromJSON,
  ChatCompletionRequestToJSON,
} from "../model";

export interface DeleteChatCompletionRequestRequest {
  id: string;
}

export interface GetChatCompletionRequestRequest {
  id: string;
}

export interface PostChatCompletionRequestRequest {
  chatCompletionRequest: ChatCompletionRequest;
}

export interface UpdateChatCompletionRequestRequest {
  id: string;
  chatCompletionRequest: ChatCompletionRequest;
}

/**
 * Deletes a specific ChatCompletionRequest.
 * Delete a ChatCompletionRequest.
 */
function deleteChatCompletionRequestRaw<T>(
  requestParameters: DeleteChatCompletionRequestRequest,
  requestConfig: runtime.TypedQueryConfig<T, void> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      "id",
      "Required parameter requestParameters.id was null or undefined when calling deleteChatCompletionRequest.",
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/ChatCompletionRequest/{id}`.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: "DELETE",
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
  }

  return config;
}

/**
 * Deletes a specific ChatCompletionRequest.
 * Delete a ChatCompletionRequest.
 */
export function deleteChatCompletionRequest<T>(
  requestParameters: DeleteChatCompletionRequestRequest,
  requestConfig?: runtime.TypedQueryConfig<T, void>,
): QueryConfig<T> {
  return deleteChatCompletionRequestRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single ChatCompletionRequest for a specific uid.
 * Retrieve a single ChatCompletionRequest
 */
function getChatCompletionRequestRaw<T>(
  requestParameters: GetChatCompletionRequestRequest,
  requestConfig: runtime.TypedQueryConfig<T, ChatCompletionRequest> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      "id",
      "Required parameter requestParameters.id was null or undefined when calling getChatCompletionRequest.",
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/ChatCompletionRequest/{id}`.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: "GET",
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(ChatCompletionRequestFromJSON(body), text);
  }

  return config;
}

/**
 * Retrieves a single ChatCompletionRequest for a specific uid.
 * Retrieve a single ChatCompletionRequest
 */
export function getChatCompletionRequest<T>(
  requestParameters: GetChatCompletionRequestRequest,
  requestConfig?: runtime.TypedQueryConfig<T, ChatCompletionRequest>,
): QueryConfig<T> {
  return getChatCompletionRequestRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of ChatCompletionRequests.
 * Retrieve a list of ChatCompletionRequests
 */
function getChatCompletionRequestListRaw<T>(
  requestConfig: runtime.TypedQueryConfig<T, Array<ChatCompletionRequest>> = {},
): QueryConfig<T> {
  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/ChatCompletionRequest`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: "GET",
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(body.map(ChatCompletionRequestFromJSON), text);
  }

  return config;
}

/**
 * Retrieves a list of ChatCompletionRequests.
 * Retrieve a list of ChatCompletionRequests
 */
export function getChatCompletionRequestList<T>(
  requestConfig?: runtime.TypedQueryConfig<T, Array<ChatCompletionRequest>>,
): QueryConfig<T> {
  return getChatCompletionRequestListRaw(requestConfig);
}

/**
 * Creates a new ChatCompletionRequest.
 * Create a new ChatCompletionRequest
 */
function postChatCompletionRequestRaw<T>(
  requestParameters: PostChatCompletionRequestRequest,
  requestConfig: runtime.TypedQueryConfig<T, ChatCompletionRequest> = {},
): QueryConfig<T> {
  if (
    requestParameters.chatCompletionRequest === null ||
    requestParameters.chatCompletionRequest === undefined
  ) {
    throw new runtime.RequiredError(
      "chatCompletionRequest",
      "Required parameter requestParameters.chatCompletionRequest was null or undefined when calling postChatCompletionRequest.",
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  headerParameters["Content-Type"] = "application/json";

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/ChatCompletionRequest`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: "POST",
      headers: headerParameters,
    },
    body:
      queryParameters ||
      ChatCompletionRequestToJSON(requestParameters.chatCompletionRequest),
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(ChatCompletionRequestFromJSON(body), text);
  }

  return config;
}

/**
 * Creates a new ChatCompletionRequest.
 * Create a new ChatCompletionRequest
 */
export function postChatCompletionRequest<T>(
  requestParameters: PostChatCompletionRequestRequest,
  requestConfig?: runtime.TypedQueryConfig<T, ChatCompletionRequest>,
): QueryConfig<T> {
  return postChatCompletionRequestRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing ChatCompletionRequest.
 * Update an existing ChatCompletionRequest
 */
function updateChatCompletionRequestRaw<T>(
  requestParameters: UpdateChatCompletionRequestRequest,
  requestConfig: runtime.TypedQueryConfig<T, ChatCompletionRequest> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      "id",
      "Required parameter requestParameters.id was null or undefined when calling updateChatCompletionRequest.",
    );
  }

  if (
    requestParameters.chatCompletionRequest === null ||
    requestParameters.chatCompletionRequest === undefined
  ) {
    throw new runtime.RequiredError(
      "chatCompletionRequest",
      "Required parameter requestParameters.chatCompletionRequest was null or undefined when calling updateChatCompletionRequest.",
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  headerParameters["Content-Type"] = "application/json";

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/ChatCompletionRequest/{id}`.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: "PUT",
      headers: headerParameters,
    },
    body:
      queryParameters ||
      ChatCompletionRequestToJSON(requestParameters.chatCompletionRequest),
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(ChatCompletionRequestFromJSON(body), text);
  }

  return config;
}

/**
 * Updates an existing ChatCompletionRequest.
 * Update an existing ChatCompletionRequest
 */
export function updateChatCompletionRequest<T>(
  requestParameters: UpdateChatCompletionRequestRequest,
  requestConfig?: runtime.TypedQueryConfig<T, ChatCompletionRequest>,
): QueryConfig<T> {
  return updateChatCompletionRequestRaw(requestParameters, requestConfig);
}
