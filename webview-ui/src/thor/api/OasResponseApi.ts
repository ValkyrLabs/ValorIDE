// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: OasResponseApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    OasResponse,
    OasResponseFromJSON,
    OasResponseToJSON,
} from '../model';

export interface DeleteOasResponseApiRequest {
    id: string;
}

export interface GetOasResponseApiRequest {
    id: string;
}

export interface GetOasResponseListApiRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostOasResponseApiRequest {
    oasResponse: OasResponse;
}

export interface UpdateOasResponseApiRequest {
    id: string;
    oasResponse: OasResponse;
}


/**
 * Deletes a specific OasResponse.
 * Delete a OasResponse.
 */
function deleteOasResponseRaw<T>(requestParameters: DeleteOasResponseApiRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOasResponse.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasResponse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific OasResponse.
* Delete a OasResponse.
*/
export function deleteOasResponse<T>(requestParameters: DeleteOasResponseApiRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteOasResponseRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single OasResponse for a specific uid.
 * Retrieve a single OasResponse
 */
function getOasResponseRaw<T>(requestParameters: GetOasResponseApiRequest, requestConfig: runtime.TypedQueryConfig<T, OasResponse> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOasResponse.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasResponse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasResponseFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single OasResponse for a specific uid.
* Retrieve a single OasResponse
*/
export function getOasResponse<T>(requestParameters: GetOasResponseApiRequest, requestConfig?: runtime.TypedQueryConfig<T, OasResponse>): QueryConfig<T> {
    return getOasResponseRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of OasResponses.
 * Retrieve a list of OasResponses
 */
function getOasResponseListRaw<T>(requestParameters: GetOasResponseListApiRequest, requestConfig: runtime.TypedQueryConfig<T, Array<OasResponse>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasResponse`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(OasResponseFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of OasResponses.
* Retrieve a list of OasResponses
*/
export function getOasResponseList<T>(requestParameters: GetOasResponseListApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<OasResponse>>): QueryConfig<T> {
    return getOasResponseListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new OasResponse.
 * Create a new OasResponse
 */
function postOasResponseRaw<T>(requestParameters: PostOasResponseApiRequest, requestConfig: runtime.TypedQueryConfig<T, OasResponse> = {}): QueryConfig<T> {
    if (requestParameters.oasResponse === null || requestParameters.oasResponse === undefined) {
        throw new runtime.RequiredError('oasResponse','Required parameter requestParameters.oasResponse was null or undefined when calling postOasResponse.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasResponse`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || OasResponseToJSON(requestParameters.oasResponse),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasResponseFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new OasResponse.
* Create a new OasResponse
*/
export function postOasResponse<T>(requestParameters: PostOasResponseApiRequest, requestConfig?: runtime.TypedQueryConfig<T, OasResponse>): QueryConfig<T> {
    return postOasResponseRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing OasResponse.
 * Update an existing OasResponse
 */
function updateOasResponseRaw<T>(requestParameters: UpdateOasResponseApiRequest, requestConfig: runtime.TypedQueryConfig<T, OasResponse> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOasResponse.');
    }

    if (requestParameters.oasResponse === null || requestParameters.oasResponse === undefined) {
        throw new runtime.RequiredError('oasResponse','Required parameter requestParameters.oasResponse was null or undefined when calling updateOasResponse.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasResponse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || OasResponseToJSON(requestParameters.oasResponse),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasResponseFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing OasResponse.
* Update an existing OasResponse
*/
export function updateOasResponse<T>(requestParameters: UpdateOasResponseApiRequest, requestConfig?: runtime.TypedQueryConfig<T, OasResponse>): QueryConfig<T> {
    return updateOasResponseRaw(requestParameters, requestConfig);
}

