// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: SpaceFileApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    SpaceFile,
    SpaceFileFromJSON,
    SpaceFileToJSON,
} from '../model';

export interface DeleteSpaceFileApiRequest {
    id: string;
}

export interface GetSpaceFileApiRequest {
    id: string;
}

export interface GetSpaceFileListApiRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostSpaceFileApiRequest {
    spaceFile: SpaceFile;
}

export interface UpdateSpaceFileApiRequest {
    id: string;
    spaceFile: SpaceFile;
}


/**
 * Deletes a specific SpaceFile.
 * Delete a SpaceFile.
 */
function deleteSpaceFileRaw<T>(requestParameters: DeleteSpaceFileApiRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSpaceFile.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SpaceFile/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific SpaceFile.
* Delete a SpaceFile.
*/
export function deleteSpaceFile<T>(requestParameters: DeleteSpaceFileApiRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteSpaceFileRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single SpaceFile for a specific uid.
 * Retrieve a single SpaceFile
 */
function getSpaceFileRaw<T>(requestParameters: GetSpaceFileApiRequest, requestConfig: runtime.TypedQueryConfig<T, SpaceFile> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSpaceFile.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SpaceFile/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SpaceFileFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single SpaceFile for a specific uid.
* Retrieve a single SpaceFile
*/
export function getSpaceFile<T>(requestParameters: GetSpaceFileApiRequest, requestConfig?: runtime.TypedQueryConfig<T, SpaceFile>): QueryConfig<T> {
    return getSpaceFileRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of SpaceFiles.
 * Retrieve a list of SpaceFiles
 */
function getSpaceFileListRaw<T>(requestParameters: GetSpaceFileListApiRequest, requestConfig: runtime.TypedQueryConfig<T, Array<SpaceFile>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SpaceFile`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(SpaceFileFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of SpaceFiles.
* Retrieve a list of SpaceFiles
*/
export function getSpaceFileList<T>(requestParameters: GetSpaceFileListApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<SpaceFile>>): QueryConfig<T> {
    return getSpaceFileListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new SpaceFile.
 * Create a new SpaceFile
 */
function postSpaceFileRaw<T>(requestParameters: PostSpaceFileApiRequest, requestConfig: runtime.TypedQueryConfig<T, SpaceFile> = {}): QueryConfig<T> {
    if (requestParameters.spaceFile === null || requestParameters.spaceFile === undefined) {
        throw new runtime.RequiredError('spaceFile','Required parameter requestParameters.spaceFile was null or undefined when calling postSpaceFile.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SpaceFile`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || SpaceFileToJSON(requestParameters.spaceFile),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SpaceFileFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new SpaceFile.
* Create a new SpaceFile
*/
export function postSpaceFile<T>(requestParameters: PostSpaceFileApiRequest, requestConfig?: runtime.TypedQueryConfig<T, SpaceFile>): QueryConfig<T> {
    return postSpaceFileRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing SpaceFile.
 * Update an existing SpaceFile
 */
function updateSpaceFileRaw<T>(requestParameters: UpdateSpaceFileApiRequest, requestConfig: runtime.TypedQueryConfig<T, SpaceFile> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSpaceFile.');
    }

    if (requestParameters.spaceFile === null || requestParameters.spaceFile === undefined) {
        throw new runtime.RequiredError('spaceFile','Required parameter requestParameters.spaceFile was null or undefined when calling updateSpaceFile.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SpaceFile/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || SpaceFileToJSON(requestParameters.spaceFile),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SpaceFileFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing SpaceFile.
* Update an existing SpaceFile
*/
export function updateSpaceFile<T>(requestParameters: UpdateSpaceFileApiRequest, requestConfig?: runtime.TypedQueryConfig<T, SpaceFile>): QueryConfig<T> {
    return updateSpaceFileRaw(requestParameters, requestConfig);
}

