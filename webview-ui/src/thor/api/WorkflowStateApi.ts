// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: WorkflowStateApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    WorkflowState,
    WorkflowStateFromJSON,
    WorkflowStateToJSON,
} from '../model';

export interface DeleteWorkflowStateApiRequest {
    id: string;
}

export interface GetWorkflowStateApiRequest {
    id: string;
}

export interface GetWorkflowStateListApiRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostWorkflowStateApiRequest {
    workflowState: WorkflowState;
}

export interface UpdateWorkflowStateApiRequest {
    id: string;
    workflowState: WorkflowState;
}


/**
 * Deletes a specific WorkflowState.
 * Delete a WorkflowState.
 */
function deleteWorkflowStateRaw<T>(requestParameters: DeleteWorkflowStateApiRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWorkflowState.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/WorkflowState/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific WorkflowState.
* Delete a WorkflowState.
*/
export function deleteWorkflowState<T>(requestParameters: DeleteWorkflowStateApiRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteWorkflowStateRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single WorkflowState for a specific uid.
 * Retrieve a single WorkflowState
 */
function getWorkflowStateRaw<T>(requestParameters: GetWorkflowStateApiRequest, requestConfig: runtime.TypedQueryConfig<T, WorkflowState> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWorkflowState.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/WorkflowState/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(WorkflowStateFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single WorkflowState for a specific uid.
* Retrieve a single WorkflowState
*/
export function getWorkflowState<T>(requestParameters: GetWorkflowStateApiRequest, requestConfig?: runtime.TypedQueryConfig<T, WorkflowState>): QueryConfig<T> {
    return getWorkflowStateRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of WorkflowStates.
 * Retrieve a list of WorkflowStates
 */
function getWorkflowStateListRaw<T>(requestParameters: GetWorkflowStateListApiRequest, requestConfig: runtime.TypedQueryConfig<T, Array<WorkflowState>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/WorkflowState`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(WorkflowStateFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of WorkflowStates.
* Retrieve a list of WorkflowStates
*/
export function getWorkflowStateList<T>(requestParameters: GetWorkflowStateListApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<WorkflowState>>): QueryConfig<T> {
    return getWorkflowStateListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new WorkflowState.
 * Create a new WorkflowState
 */
function postWorkflowStateRaw<T>(requestParameters: PostWorkflowStateApiRequest, requestConfig: runtime.TypedQueryConfig<T, WorkflowState> = {}): QueryConfig<T> {
    if (requestParameters.workflowState === null || requestParameters.workflowState === undefined) {
        throw new runtime.RequiredError('workflowState','Required parameter requestParameters.workflowState was null or undefined when calling postWorkflowState.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/WorkflowState`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || WorkflowStateToJSON(requestParameters.workflowState),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(WorkflowStateFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new WorkflowState.
* Create a new WorkflowState
*/
export function postWorkflowState<T>(requestParameters: PostWorkflowStateApiRequest, requestConfig?: runtime.TypedQueryConfig<T, WorkflowState>): QueryConfig<T> {
    return postWorkflowStateRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing WorkflowState.
 * Update an existing WorkflowState
 */
function updateWorkflowStateRaw<T>(requestParameters: UpdateWorkflowStateApiRequest, requestConfig: runtime.TypedQueryConfig<T, WorkflowState> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateWorkflowState.');
    }

    if (requestParameters.workflowState === null || requestParameters.workflowState === undefined) {
        throw new runtime.RequiredError('workflowState','Required parameter requestParameters.workflowState was null or undefined when calling updateWorkflowState.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/WorkflowState/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || WorkflowStateToJSON(requestParameters.workflowState),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(WorkflowStateFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing WorkflowState.
* Update an existing WorkflowState
*/
export function updateWorkflowState<T>(requestParameters: UpdateWorkflowStateApiRequest, requestConfig?: runtime.TypedQueryConfig<T, WorkflowState>): QueryConfig<T> {
    return updateWorkflowStateRaw(requestParameters, requestConfig);
}

