// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: FileVersionApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    FileVersion,
    FileVersionFromJSON,
    FileVersionToJSON,
} from '../model';

export interface DeleteFileVersionApiRequest {
    id: string;
}

export interface GetFileVersionApiRequest {
    id: string;
}

export interface GetFileVersionListApiRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostFileVersionApiRequest {
    fileVersion: FileVersion;
}

export interface UpdateFileVersionApiRequest {
    id: string;
    fileVersion: FileVersion;
}


/**
 * Deletes a specific FileVersion.
 * Delete a FileVersion.
 */
function deleteFileVersionRaw<T>(requestParameters: DeleteFileVersionApiRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFileVersion.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/FileVersion/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific FileVersion.
* Delete a FileVersion.
*/
export function deleteFileVersion<T>(requestParameters: DeleteFileVersionApiRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteFileVersionRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single FileVersion for a specific uid.
 * Retrieve a single FileVersion
 */
function getFileVersionRaw<T>(requestParameters: GetFileVersionApiRequest, requestConfig: runtime.TypedQueryConfig<T, FileVersion> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFileVersion.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/FileVersion/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FileVersionFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single FileVersion for a specific uid.
* Retrieve a single FileVersion
*/
export function getFileVersion<T>(requestParameters: GetFileVersionApiRequest, requestConfig?: runtime.TypedQueryConfig<T, FileVersion>): QueryConfig<T> {
    return getFileVersionRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of FileVersions.
 * Retrieve a list of FileVersions
 */
function getFileVersionListRaw<T>(requestParameters: GetFileVersionListApiRequest, requestConfig: runtime.TypedQueryConfig<T, Array<FileVersion>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/FileVersion`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(FileVersionFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of FileVersions.
* Retrieve a list of FileVersions
*/
export function getFileVersionList<T>(requestParameters: GetFileVersionListApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<FileVersion>>): QueryConfig<T> {
    return getFileVersionListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new FileVersion.
 * Create a new FileVersion
 */
function postFileVersionRaw<T>(requestParameters: PostFileVersionApiRequest, requestConfig: runtime.TypedQueryConfig<T, FileVersion> = {}): QueryConfig<T> {
    if (requestParameters.fileVersion === null || requestParameters.fileVersion === undefined) {
        throw new runtime.RequiredError('fileVersion','Required parameter requestParameters.fileVersion was null or undefined when calling postFileVersion.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/FileVersion`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || FileVersionToJSON(requestParameters.fileVersion),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FileVersionFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new FileVersion.
* Create a new FileVersion
*/
export function postFileVersion<T>(requestParameters: PostFileVersionApiRequest, requestConfig?: runtime.TypedQueryConfig<T, FileVersion>): QueryConfig<T> {
    return postFileVersionRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing FileVersion.
 * Update an existing FileVersion
 */
function updateFileVersionRaw<T>(requestParameters: UpdateFileVersionApiRequest, requestConfig: runtime.TypedQueryConfig<T, FileVersion> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateFileVersion.');
    }

    if (requestParameters.fileVersion === null || requestParameters.fileVersion === undefined) {
        throw new runtime.RequiredError('fileVersion','Required parameter requestParameters.fileVersion was null or undefined when calling updateFileVersion.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/FileVersion/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || FileVersionToJSON(requestParameters.fileVersion),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FileVersionFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing FileVersion.
* Update an existing FileVersion
*/
export function updateFileVersion<T>(requestParameters: UpdateFileVersionApiRequest, requestConfig?: runtime.TypedQueryConfig<T, FileVersion>): QueryConfig<T> {
    return updateFileVersionRaw(requestParameters, requestConfig);
}

