// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: ProductFeatureApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    ProductFeature,
    ProductFeatureFromJSON,
    ProductFeatureToJSON,
} from '../model';

export interface DeleteProductFeatureRequest {
    id: string;
}

export interface GetProductFeatureRequest {
    id: string;
}

export interface GetProductFeatureListRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostProductFeatureRequest {
    productFeature: ProductFeature;
}

export interface UpdateProductFeatureRequest {
    id: string;
    productFeature: ProductFeature;
}


/**
 * Deletes a specific ProductFeature.
 * Delete a ProductFeature.
 */
function deleteProductFeatureRaw<T>(requestParameters: DeleteProductFeatureRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProductFeature.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ProductFeature/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific ProductFeature.
* Delete a ProductFeature.
*/
export function deleteProductFeature<T>(requestParameters: DeleteProductFeatureRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteProductFeatureRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single ProductFeature for a specific uid.
 * Retrieve a single ProductFeature
 */
function getProductFeatureRaw<T>(requestParameters: GetProductFeatureRequest, requestConfig: runtime.TypedQueryConfig<T, ProductFeature> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProductFeature.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ProductFeature/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ProductFeatureFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single ProductFeature for a specific uid.
* Retrieve a single ProductFeature
*/
export function getProductFeature<T>(requestParameters: GetProductFeatureRequest, requestConfig?: runtime.TypedQueryConfig<T, ProductFeature>): QueryConfig<T> {
    return getProductFeatureRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of ProductFeatures.
 * Retrieve a list of ProductFeatures
 */
function getProductFeatureListRaw<T>(requestParameters: GetProductFeatureListRequest, requestConfig: runtime.TypedQueryConfig<T, Array<ProductFeature>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ProductFeature`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ProductFeatureFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of ProductFeatures.
* Retrieve a list of ProductFeatures
*/
export function getProductFeatureList<T>(requestParameters: GetProductFeatureListRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<ProductFeature>>): QueryConfig<T> {
    return getProductFeatureListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new ProductFeature.
 * Create a new ProductFeature
 */
function postProductFeatureRaw<T>(requestParameters: PostProductFeatureRequest, requestConfig: runtime.TypedQueryConfig<T, ProductFeature> = {}): QueryConfig<T> {
    if (requestParameters.productFeature === null || requestParameters.productFeature === undefined) {
        throw new runtime.RequiredError('productFeature','Required parameter requestParameters.productFeature was null or undefined when calling postProductFeature.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ProductFeature`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ProductFeatureToJSON(requestParameters.productFeature),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ProductFeatureFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new ProductFeature.
* Create a new ProductFeature
*/
export function postProductFeature<T>(requestParameters: PostProductFeatureRequest, requestConfig?: runtime.TypedQueryConfig<T, ProductFeature>): QueryConfig<T> {
    return postProductFeatureRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing ProductFeature.
 * Update an existing ProductFeature
 */
function updateProductFeatureRaw<T>(requestParameters: UpdateProductFeatureRequest, requestConfig: runtime.TypedQueryConfig<T, ProductFeature> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProductFeature.');
    }

    if (requestParameters.productFeature === null || requestParameters.productFeature === undefined) {
        throw new runtime.RequiredError('productFeature','Required parameter requestParameters.productFeature was null or undefined when calling updateProductFeature.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ProductFeature/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || ProductFeatureToJSON(requestParameters.productFeature),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ProductFeatureFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing ProductFeature.
* Update an existing ProductFeature
*/
export function updateProductFeature<T>(requestParameters: UpdateProductFeatureRequest, requestConfig?: runtime.TypedQueryConfig<T, ProductFeature>): QueryConfig<T> {
    return updateProductFeatureRaw(requestParameters, requestConfig);
}

