// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: FileAuditLogApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    FileAuditLog,
    FileAuditLogFromJSON,
    FileAuditLogToJSON,
} from '../model';

export interface DeleteFileAuditLogApiRequest {
    id: string;
}

export interface GetFileAuditLogApiRequest {
    id: string;
}

export interface GetFileAuditLogListApiRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostFileAuditLogApiRequest {
    fileAuditLog: FileAuditLog;
}

export interface UpdateFileAuditLogApiRequest {
    id: string;
    fileAuditLog: FileAuditLog;
}


/**
 * Deletes a specific FileAuditLog.
 * Delete a FileAuditLog.
 */
function deleteFileAuditLogRaw<T>(requestParameters: DeleteFileAuditLogApiRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFileAuditLog.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/FileAuditLog/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific FileAuditLog.
* Delete a FileAuditLog.
*/
export function deleteFileAuditLog<T>(requestParameters: DeleteFileAuditLogApiRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteFileAuditLogRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single FileAuditLog for a specific uid.
 * Retrieve a single FileAuditLog
 */
function getFileAuditLogRaw<T>(requestParameters: GetFileAuditLogApiRequest, requestConfig: runtime.TypedQueryConfig<T, FileAuditLog> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFileAuditLog.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/FileAuditLog/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FileAuditLogFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single FileAuditLog for a specific uid.
* Retrieve a single FileAuditLog
*/
export function getFileAuditLog<T>(requestParameters: GetFileAuditLogApiRequest, requestConfig?: runtime.TypedQueryConfig<T, FileAuditLog>): QueryConfig<T> {
    return getFileAuditLogRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of FileAuditLogs.
 * Retrieve a list of FileAuditLogs
 */
function getFileAuditLogListRaw<T>(requestParameters: GetFileAuditLogListApiRequest, requestConfig: runtime.TypedQueryConfig<T, Array<FileAuditLog>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/FileAuditLog`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(FileAuditLogFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of FileAuditLogs.
* Retrieve a list of FileAuditLogs
*/
export function getFileAuditLogList<T>(requestParameters: GetFileAuditLogListApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<FileAuditLog>>): QueryConfig<T> {
    return getFileAuditLogListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new FileAuditLog.
 * Create a new FileAuditLog
 */
function postFileAuditLogRaw<T>(requestParameters: PostFileAuditLogApiRequest, requestConfig: runtime.TypedQueryConfig<T, FileAuditLog> = {}): QueryConfig<T> {
    if (requestParameters.fileAuditLog === null || requestParameters.fileAuditLog === undefined) {
        throw new runtime.RequiredError('fileAuditLog','Required parameter requestParameters.fileAuditLog was null or undefined when calling postFileAuditLog.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/FileAuditLog`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || FileAuditLogToJSON(requestParameters.fileAuditLog),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FileAuditLogFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new FileAuditLog.
* Create a new FileAuditLog
*/
export function postFileAuditLog<T>(requestParameters: PostFileAuditLogApiRequest, requestConfig?: runtime.TypedQueryConfig<T, FileAuditLog>): QueryConfig<T> {
    return postFileAuditLogRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing FileAuditLog.
 * Update an existing FileAuditLog
 */
function updateFileAuditLogRaw<T>(requestParameters: UpdateFileAuditLogApiRequest, requestConfig: runtime.TypedQueryConfig<T, FileAuditLog> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateFileAuditLog.');
    }

    if (requestParameters.fileAuditLog === null || requestParameters.fileAuditLog === undefined) {
        throw new runtime.RequiredError('fileAuditLog','Required parameter requestParameters.fileAuditLog was null or undefined when calling updateFileAuditLog.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/FileAuditLog/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || FileAuditLogToJSON(requestParameters.fileAuditLog),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FileAuditLogFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing FileAuditLog.
* Update an existing FileAuditLog
*/
export function updateFileAuditLog<T>(requestParameters: UpdateFileAuditLogApiRequest, requestConfig?: runtime.TypedQueryConfig<T, FileAuditLog>): QueryConfig<T> {
    return updateFileAuditLogRaw(requestParameters, requestConfig);
}

