// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: TaskApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    Task,
    TaskFromJSON,
    TaskToJSON,
} from '../model';

export interface DeleteTaskApiRequest {
    id: string;
}

export interface GetTaskApiRequest {
    id: string;
}

export interface GetTaskListApiRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostTaskApiRequest {
    task: Task;
}

export interface UpdateTaskApiRequest {
    id: string;
    task: Task;
}


/**
 * Deletes a specific Task.
 * Delete a Task.
 */
function deleteTaskRaw<T>(requestParameters: DeleteTaskApiRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTask.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Task/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific Task.
* Delete a Task.
*/
export function deleteTask<T>(requestParameters: DeleteTaskApiRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteTaskRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single Task for a specific uid.
 * Retrieve a single Task
 */
function getTaskRaw<T>(requestParameters: GetTaskApiRequest, requestConfig: runtime.TypedQueryConfig<T, Task> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTask.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Task/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TaskFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single Task for a specific uid.
* Retrieve a single Task
*/
export function getTask<T>(requestParameters: GetTaskApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Task>): QueryConfig<T> {
    return getTaskRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of Tasks.
 * Retrieve a list of Tasks
 */
function getTaskListRaw<T>(requestParameters: GetTaskListApiRequest, requestConfig: runtime.TypedQueryConfig<T, Array<Task>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Task`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(TaskFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of Tasks.
* Retrieve a list of Tasks
*/
export function getTaskList<T>(requestParameters: GetTaskListApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<Task>>): QueryConfig<T> {
    return getTaskListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new Task.
 * Create a new Task
 */
function postTaskRaw<T>(requestParameters: PostTaskApiRequest, requestConfig: runtime.TypedQueryConfig<T, Task> = {}): QueryConfig<T> {
    if (requestParameters.task === null || requestParameters.task === undefined) {
        throw new runtime.RequiredError('task','Required parameter requestParameters.task was null or undefined when calling postTask.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Task`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || TaskToJSON(requestParameters.task),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TaskFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new Task.
* Create a new Task
*/
export function postTask<T>(requestParameters: PostTaskApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Task>): QueryConfig<T> {
    return postTaskRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing Task.
 * Update an existing Task
 */
function updateTaskRaw<T>(requestParameters: UpdateTaskApiRequest, requestConfig: runtime.TypedQueryConfig<T, Task> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTask.');
    }

    if (requestParameters.task === null || requestParameters.task === undefined) {
        throw new runtime.RequiredError('task','Required parameter requestParameters.task was null or undefined when calling updateTask.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Task/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || TaskToJSON(requestParameters.task),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TaskFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing Task.
* Update an existing Task
*/
export function updateTask<T>(requestParameters: UpdateTaskApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Task>): QueryConfig<T> {
    return updateTaskRaw(requestParameters, requestConfig);
}

