// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: ExecModuleApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    ExecModule,
    ExecModuleFromJSON,
    ExecModuleToJSON,
} from '../model';

export interface DeleteExecModuleApiRequest {
    id: string;
}

export interface GetExecModuleApiRequest {
    id: string;
}

export interface GetExecModuleListApiRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostExecModuleApiRequest {
    execModule: ExecModule;
}

export interface UpdateExecModuleApiRequest {
    id: string;
    execModule: ExecModule;
}


/**
 * Deletes a specific ExecModule.
 * Delete a ExecModule.
 */
function deleteExecModuleRaw<T>(requestParameters: DeleteExecModuleApiRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteExecModule.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ExecModule/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific ExecModule.
* Delete a ExecModule.
*/
export function deleteExecModule<T>(requestParameters: DeleteExecModuleApiRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteExecModuleRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single ExecModule for a specific uid.
 * Retrieve a single ExecModule
 */
function getExecModuleRaw<T>(requestParameters: GetExecModuleApiRequest, requestConfig: runtime.TypedQueryConfig<T, ExecModule> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getExecModule.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ExecModule/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ExecModuleFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single ExecModule for a specific uid.
* Retrieve a single ExecModule
*/
export function getExecModule<T>(requestParameters: GetExecModuleApiRequest, requestConfig?: runtime.TypedQueryConfig<T, ExecModule>): QueryConfig<T> {
    return getExecModuleRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of ExecModules.
 * Retrieve a list of ExecModules
 */
function getExecModuleListRaw<T>(requestParameters: GetExecModuleListApiRequest, requestConfig: runtime.TypedQueryConfig<T, Array<ExecModule>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ExecModule`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ExecModuleFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of ExecModules.
* Retrieve a list of ExecModules
*/
export function getExecModuleList<T>(requestParameters: GetExecModuleListApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<ExecModule>>): QueryConfig<T> {
    return getExecModuleListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new ExecModule.
 * Create a new ExecModule
 */
function postExecModuleRaw<T>(requestParameters: PostExecModuleApiRequest, requestConfig: runtime.TypedQueryConfig<T, ExecModule> = {}): QueryConfig<T> {
    if (requestParameters.execModule === null || requestParameters.execModule === undefined) {
        throw new runtime.RequiredError('execModule','Required parameter requestParameters.execModule was null or undefined when calling postExecModule.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ExecModule`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ExecModuleToJSON(requestParameters.execModule),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ExecModuleFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new ExecModule.
* Create a new ExecModule
*/
export function postExecModule<T>(requestParameters: PostExecModuleApiRequest, requestConfig?: runtime.TypedQueryConfig<T, ExecModule>): QueryConfig<T> {
    return postExecModuleRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing ExecModule.
 * Update an existing ExecModule
 */
function updateExecModuleRaw<T>(requestParameters: UpdateExecModuleApiRequest, requestConfig: runtime.TypedQueryConfig<T, ExecModule> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateExecModule.');
    }

    if (requestParameters.execModule === null || requestParameters.execModule === undefined) {
        throw new runtime.RequiredError('execModule','Required parameter requestParameters.execModule was null or undefined when calling updateExecModule.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ExecModule/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || ExecModuleToJSON(requestParameters.execModule),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ExecModuleFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing ExecModule.
* Update an existing ExecModule
*/
export function updateExecModule<T>(requestParameters: UpdateExecModuleApiRequest, requestConfig?: runtime.TypedQueryConfig<T, ExecModule>): QueryConfig<T> {
    return updateExecModuleRaw(requestParameters, requestConfig);
}

