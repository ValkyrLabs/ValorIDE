// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: McpToolApi
*/

import {
  HttpMethods,
  QueryConfig,
  ResponseBody,
  ResponseText,
} from "redux-query";
import * as runtime from "../src/runtime";
import { McpTool, McpToolFromJSON, McpToolToJSON } from "../model";

export interface DeleteMcpToolRequest {
  id: string;
}

export interface GetMcpToolRequest {
  id: string;
}

export interface PostMcpToolRequest {
  mcpTool: McpTool;
}

export interface UpdateMcpToolRequest {
  id: string;
  mcpTool: McpTool;
}

/**
 * Deletes a specific McpTool.
 * Delete a McpTool.
 */
function deleteMcpToolRaw<T>(
  requestParameters: DeleteMcpToolRequest,
  requestConfig: runtime.TypedQueryConfig<T, void> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      "id",
      "Required parameter requestParameters.id was null or undefined when calling deleteMcpTool.",
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/McpTool/{id}`.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: "DELETE",
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
  }

  return config;
}

/**
 * Deletes a specific McpTool.
 * Delete a McpTool.
 */
export function deleteMcpTool<T>(
  requestParameters: DeleteMcpToolRequest,
  requestConfig?: runtime.TypedQueryConfig<T, void>,
): QueryConfig<T> {
  return deleteMcpToolRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single McpTool for a specific uid.
 * Retrieve a single McpTool
 */
function getMcpToolRaw<T>(
  requestParameters: GetMcpToolRequest,
  requestConfig: runtime.TypedQueryConfig<T, McpTool> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      "id",
      "Required parameter requestParameters.id was null or undefined when calling getMcpTool.",
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/McpTool/{id}`.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: "GET",
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(McpToolFromJSON(body), text);
  }

  return config;
}

/**
 * Retrieves a single McpTool for a specific uid.
 * Retrieve a single McpTool
 */
export function getMcpTool<T>(
  requestParameters: GetMcpToolRequest,
  requestConfig?: runtime.TypedQueryConfig<T, McpTool>,
): QueryConfig<T> {
  return getMcpToolRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of McpTools.
 * Retrieve a list of McpTools
 */
function getMcpToolListRaw<T>(
  requestConfig: runtime.TypedQueryConfig<T, Array<McpTool>> = {},
): QueryConfig<T> {
  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/McpTool`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: "GET",
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(body.map(McpToolFromJSON), text);
  }

  return config;
}

/**
 * Retrieves a list of McpTools.
 * Retrieve a list of McpTools
 */
export function getMcpToolList<T>(
  requestConfig?: runtime.TypedQueryConfig<T, Array<McpTool>>,
): QueryConfig<T> {
  return getMcpToolListRaw(requestConfig);
}

/**
 * Creates a new McpTool.
 * Create a new McpTool
 */
function postMcpToolRaw<T>(
  requestParameters: PostMcpToolRequest,
  requestConfig: runtime.TypedQueryConfig<T, McpTool> = {},
): QueryConfig<T> {
  if (
    requestParameters.mcpTool === null ||
    requestParameters.mcpTool === undefined
  ) {
    throw new runtime.RequiredError(
      "mcpTool",
      "Required parameter requestParameters.mcpTool was null or undefined when calling postMcpTool.",
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  headerParameters["Content-Type"] = "application/json";

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/McpTool`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: "POST",
      headers: headerParameters,
    },
    body: queryParameters || McpToolToJSON(requestParameters.mcpTool),
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(McpToolFromJSON(body), text);
  }

  return config;
}

/**
 * Creates a new McpTool.
 * Create a new McpTool
 */
export function postMcpTool<T>(
  requestParameters: PostMcpToolRequest,
  requestConfig?: runtime.TypedQueryConfig<T, McpTool>,
): QueryConfig<T> {
  return postMcpToolRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing McpTool.
 * Update an existing McpTool
 */
function updateMcpToolRaw<T>(
  requestParameters: UpdateMcpToolRequest,
  requestConfig: runtime.TypedQueryConfig<T, McpTool> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      "id",
      "Required parameter requestParameters.id was null or undefined when calling updateMcpTool.",
    );
  }

  if (
    requestParameters.mcpTool === null ||
    requestParameters.mcpTool === undefined
  ) {
    throw new runtime.RequiredError(
      "mcpTool",
      "Required parameter requestParameters.mcpTool was null or undefined when calling updateMcpTool.",
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  headerParameters["Content-Type"] = "application/json";

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/McpTool/{id}`.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: "PUT",
      headers: headerParameters,
    },
    body: queryParameters || McpToolToJSON(requestParameters.mcpTool),
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(McpToolFromJSON(body), text);
  }

  return config;
}

/**
 * Updates an existing McpTool.
 * Update an existing McpTool
 */
export function updateMcpTool<T>(
  requestParameters: UpdateMcpToolRequest,
  requestConfig?: runtime.TypedQueryConfig<T, McpTool>,
): QueryConfig<T> {
  return updateMcpToolRaw(requestParameters, requestConfig);
}
