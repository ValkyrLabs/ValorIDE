// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: UserPreferenceApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from "redux-query"
import * as runtime from "../src/runtime"
import { UserPreference, UserPreferenceFromJSON, UserPreferenceToJSON } from "../model"

export interface DeleteUserPreferenceRequest {
	id: string
}

export interface GetUserPreferenceRequest {
	id: string
}

export interface PostUserPreferenceRequest {
	userPreference: UserPreference
}

export interface UpdateUserPreferenceRequest {
	id: string
	userPreference: UserPreference
}

/**
 * Deletes a specific UserPreference.
 * Delete a UserPreference.
 */
function deleteUserPreferenceRaw<T>(
	requestParameters: DeleteUserPreferenceRequest,
	requestConfig: runtime.TypedQueryConfig<T, void> = {},
): QueryConfig<T> {
	if (requestParameters.id === null || requestParameters.id === undefined) {
		throw new runtime.RequiredError(
			"id",
			"Required parameter requestParameters.id was null or undefined when calling deleteUserPreference.",
		)
	}

	let queryParameters = null

	const headerParameters: runtime.HttpHeaders = {}

	const { meta = {} } = requestConfig

	const config: QueryConfig<T> = {
		url: `${runtime.Configuration.basePath}/UserPreference/{id}`.replace(
			`{${"id"}}`,
			encodeURIComponent(String(requestParameters.id)),
		),
		meta,
		update: requestConfig.update,
		queryKey: requestConfig.queryKey,
		optimisticUpdate: requestConfig.optimisticUpdate,
		force: requestConfig.force,
		rollback: requestConfig.rollback,
		options: {
			method: "DELETE",
			headers: headerParameters,
		},
		body: queryParameters,
	}

	const { transform: requestTransform } = requestConfig
	if (requestTransform) {
	}

	return config
}

/**
 * Deletes a specific UserPreference.
 * Delete a UserPreference.
 */
export function deleteUserPreference<T>(
	requestParameters: DeleteUserPreferenceRequest,
	requestConfig?: runtime.TypedQueryConfig<T, void>,
): QueryConfig<T> {
	return deleteUserPreferenceRaw(requestParameters, requestConfig)
}

/**
 * Retrieves a single UserPreference for a specific uid.
 * Retrieve a single UserPreference
 */
function getUserPreferenceRaw<T>(
	requestParameters: GetUserPreferenceRequest,
	requestConfig: runtime.TypedQueryConfig<T, UserPreference> = {},
): QueryConfig<T> {
	if (requestParameters.id === null || requestParameters.id === undefined) {
		throw new runtime.RequiredError(
			"id",
			"Required parameter requestParameters.id was null or undefined when calling getUserPreference.",
		)
	}

	let queryParameters = null

	const headerParameters: runtime.HttpHeaders = {}

	const { meta = {} } = requestConfig

	const config: QueryConfig<T> = {
		url: `${runtime.Configuration.basePath}/UserPreference/{id}`.replace(
			`{${"id"}}`,
			encodeURIComponent(String(requestParameters.id)),
		),
		meta,
		update: requestConfig.update,
		queryKey: requestConfig.queryKey,
		optimisticUpdate: requestConfig.optimisticUpdate,
		force: requestConfig.force,
		rollback: requestConfig.rollback,
		options: {
			method: "GET",
			headers: headerParameters,
		},
		body: queryParameters,
	}

	const { transform: requestTransform } = requestConfig
	if (requestTransform) {
		config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UserPreferenceFromJSON(body), text)
	}

	return config
}

/**
 * Retrieves a single UserPreference for a specific uid.
 * Retrieve a single UserPreference
 */
export function getUserPreference<T>(
	requestParameters: GetUserPreferenceRequest,
	requestConfig?: runtime.TypedQueryConfig<T, UserPreference>,
): QueryConfig<T> {
	return getUserPreferenceRaw(requestParameters, requestConfig)
}

/**
 * Retrieves a list of UserPreferences.
 * Retrieve a list of UserPreferences
 */
function getUserPreferenceListRaw<T>(requestConfig: runtime.TypedQueryConfig<T, Array<UserPreference>> = {}): QueryConfig<T> {
	let queryParameters = null

	const headerParameters: runtime.HttpHeaders = {}

	const { meta = {} } = requestConfig

	const config: QueryConfig<T> = {
		url: `${runtime.Configuration.basePath}/UserPreference`,
		meta,
		update: requestConfig.update,
		queryKey: requestConfig.queryKey,
		optimisticUpdate: requestConfig.optimisticUpdate,
		force: requestConfig.force,
		rollback: requestConfig.rollback,
		options: {
			method: "GET",
			headers: headerParameters,
		},
		body: queryParameters,
	}

	const { transform: requestTransform } = requestConfig
	if (requestTransform) {
		config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(UserPreferenceFromJSON), text)
	}

	return config
}

/**
 * Retrieves a list of UserPreferences.
 * Retrieve a list of UserPreferences
 */
export function getUserPreferenceList<T>(requestConfig?: runtime.TypedQueryConfig<T, Array<UserPreference>>): QueryConfig<T> {
	return getUserPreferenceListRaw(requestConfig)
}

/**
 * Creates a new UserPreference.
 * Create a new UserPreference
 */
function postUserPreferenceRaw<T>(
	requestParameters: PostUserPreferenceRequest,
	requestConfig: runtime.TypedQueryConfig<T, UserPreference> = {},
): QueryConfig<T> {
	if (requestParameters.userPreference === null || requestParameters.userPreference === undefined) {
		throw new runtime.RequiredError(
			"userPreference",
			"Required parameter requestParameters.userPreference was null or undefined when calling postUserPreference.",
		)
	}

	let queryParameters = null

	const headerParameters: runtime.HttpHeaders = {}

	headerParameters["Content-Type"] = "application/json"

	const { meta = {} } = requestConfig

	const config: QueryConfig<T> = {
		url: `${runtime.Configuration.basePath}/UserPreference`,
		meta,
		update: requestConfig.update,
		queryKey: requestConfig.queryKey,
		optimisticUpdate: requestConfig.optimisticUpdate,
		force: requestConfig.force,
		rollback: requestConfig.rollback,
		options: {
			method: "POST",
			headers: headerParameters,
		},
		body: queryParameters || UserPreferenceToJSON(requestParameters.userPreference),
	}

	const { transform: requestTransform } = requestConfig
	if (requestTransform) {
		config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UserPreferenceFromJSON(body), text)
	}

	return config
}

/**
 * Creates a new UserPreference.
 * Create a new UserPreference
 */
export function postUserPreference<T>(
	requestParameters: PostUserPreferenceRequest,
	requestConfig?: runtime.TypedQueryConfig<T, UserPreference>,
): QueryConfig<T> {
	return postUserPreferenceRaw(requestParameters, requestConfig)
}

/**
 * Updates an existing UserPreference.
 * Update an existing UserPreference
 */
function updateUserPreferenceRaw<T>(
	requestParameters: UpdateUserPreferenceRequest,
	requestConfig: runtime.TypedQueryConfig<T, UserPreference> = {},
): QueryConfig<T> {
	if (requestParameters.id === null || requestParameters.id === undefined) {
		throw new runtime.RequiredError(
			"id",
			"Required parameter requestParameters.id was null or undefined when calling updateUserPreference.",
		)
	}

	if (requestParameters.userPreference === null || requestParameters.userPreference === undefined) {
		throw new runtime.RequiredError(
			"userPreference",
			"Required parameter requestParameters.userPreference was null or undefined when calling updateUserPreference.",
		)
	}

	let queryParameters = null

	const headerParameters: runtime.HttpHeaders = {}

	headerParameters["Content-Type"] = "application/json"

	const { meta = {} } = requestConfig

	const config: QueryConfig<T> = {
		url: `${runtime.Configuration.basePath}/UserPreference/{id}`.replace(
			`{${"id"}}`,
			encodeURIComponent(String(requestParameters.id)),
		),
		meta,
		update: requestConfig.update,
		queryKey: requestConfig.queryKey,
		optimisticUpdate: requestConfig.optimisticUpdate,
		force: requestConfig.force,
		rollback: requestConfig.rollback,
		options: {
			method: "PUT",
			headers: headerParameters,
		},
		body: queryParameters || UserPreferenceToJSON(requestParameters.userPreference),
	}

	const { transform: requestTransform } = requestConfig
	if (requestTransform) {
		config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UserPreferenceFromJSON(body), text)
	}

	return config
}

/**
 * Updates an existing UserPreference.
 * Update an existing UserPreference
 */
export function updateUserPreference<T>(
	requestParameters: UpdateUserPreferenceRequest,
	requestConfig?: runtime.TypedQueryConfig<T, UserPreference>,
): QueryConfig<T> {
	return updateUserPreferenceRaw(requestParameters, requestConfig)
}
