// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: DefaultApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    SwarmCommandRequest,
    SwarmCommandRequestFromJSON,
    SwarmCommandRequestToJSON,
    SwarmCommandResponse,
    SwarmCommandResponseFromJSON,
    SwarmCommandResponseToJSON,
    SwarmRegisterRequest,
    SwarmRegisterRequestFromJSON,
    SwarmRegisterRequestToJSON,
    SwarmRegisterResponse,
    SwarmRegisterResponseFromJSON,
    SwarmRegisterResponseToJSON,
    SwarmUnregisterRequest,
    SwarmUnregisterRequestFromJSON,
    SwarmUnregisterRequestToJSON,
    SwarmUnregisterResponse,
    SwarmUnregisterResponseFromJSON,
    SwarmUnregisterResponseToJSON,
} from '../model';

export interface ForwardSwarmCommandApiRequest {
    swarmCommandRequest: SwarmCommandRequest;
}

export interface RegisterSwarmAgentApiRequest {
    swarmRegisterRequest: SwarmRegisterRequest;
}

export interface UnregisterSwarmAgentApiRequest {
    swarmUnregisterRequest: SwarmUnregisterRequest;
}


/**
 * Forwards a command message to a specific agent instance or broadcasts to all agents.
 * Forward a swarm command
 */
function forwardSwarmCommandRaw<T>(requestParameters: ForwardSwarmCommandApiRequest, requestConfig: runtime.TypedQueryConfig<T, SwarmCommandResponse> = {}): QueryConfig<T> {
    if (requestParameters.swarmCommandRequest === null || requestParameters.swarmCommandRequest === undefined) {
        throw new runtime.RequiredError('swarmCommandRequest','Required parameter requestParameters.swarmCommandRequest was null or undefined when calling forwardSwarmCommand.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SwarmOps/command`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || SwarmCommandRequestToJSON(requestParameters.swarmCommandRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SwarmCommandResponseFromJSON(body), text);
    }

    return config;
}

/**
* Forwards a command message to a specific agent instance or broadcasts to all agents.
* Forward a swarm command
*/
export function forwardSwarmCommand<T>(requestParameters: ForwardSwarmCommandApiRequest, requestConfig?: runtime.TypedQueryConfig<T, SwarmCommandResponse>): QueryConfig<T> {
    return forwardSwarmCommandRaw(requestParameters, requestConfig);
}

/**
 * Registers an agent instance with the swarm registry and updates its metadata.
 * Register or refresh a swarm agent
 */
function registerSwarmAgentRaw<T>(requestParameters: RegisterSwarmAgentApiRequest, requestConfig: runtime.TypedQueryConfig<T, SwarmRegisterResponse> = {}): QueryConfig<T> {
    if (requestParameters.swarmRegisterRequest === null || requestParameters.swarmRegisterRequest === undefined) {
        throw new runtime.RequiredError('swarmRegisterRequest','Required parameter requestParameters.swarmRegisterRequest was null or undefined when calling registerSwarmAgent.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SwarmOps/register`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || SwarmRegisterRequestToJSON(requestParameters.swarmRegisterRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SwarmRegisterResponseFromJSON(body), text);
    }

    return config;
}

/**
* Registers an agent instance with the swarm registry and updates its metadata.
* Register or refresh a swarm agent
*/
export function registerSwarmAgent<T>(requestParameters: RegisterSwarmAgentApiRequest, requestConfig?: runtime.TypedQueryConfig<T, SwarmRegisterResponse>): QueryConfig<T> {
    return registerSwarmAgentRaw(requestParameters, requestConfig);
}

/**
 * Removes an agent instance from the swarm registry.
 * Unregister a swarm agent
 */
function unregisterSwarmAgentRaw<T>(requestParameters: UnregisterSwarmAgentApiRequest, requestConfig: runtime.TypedQueryConfig<T, SwarmUnregisterResponse> = {}): QueryConfig<T> {
    if (requestParameters.swarmUnregisterRequest === null || requestParameters.swarmUnregisterRequest === undefined) {
        throw new runtime.RequiredError('swarmUnregisterRequest','Required parameter requestParameters.swarmUnregisterRequest was null or undefined when calling unregisterSwarmAgent.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SwarmOps/unregister`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || SwarmUnregisterRequestToJSON(requestParameters.swarmUnregisterRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SwarmUnregisterResponseFromJSON(body), text);
    }

    return config;
}

/**
* Removes an agent instance from the swarm registry.
* Unregister a swarm agent
*/
export function unregisterSwarmAgent<T>(requestParameters: UnregisterSwarmAgentApiRequest, requestConfig?: runtime.TypedQueryConfig<T, SwarmUnregisterResponse>): QueryConfig<T> {
    return unregisterSwarmAgentRaw(requestParameters, requestConfig);
}

