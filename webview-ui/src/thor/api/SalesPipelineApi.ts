// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: SalesPipelineApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    SalesPipeline,
    SalesPipelineFromJSON,
    SalesPipelineToJSON,
} from '../model';

export interface DeleteSalesPipelineApiRequest {
    id: string;
}

export interface GetSalesPipelineApiRequest {
    id: string;
}

export interface GetSalesPipelineListApiRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostSalesPipelineApiRequest {
    salesPipeline: SalesPipeline;
}

export interface UpdateSalesPipelineApiRequest {
    id: string;
    salesPipeline: SalesPipeline;
}


/**
 * Deletes a specific SalesPipeline.
 * Delete a SalesPipeline.
 */
function deleteSalesPipelineRaw<T>(requestParameters: DeleteSalesPipelineApiRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSalesPipeline.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SalesPipeline/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific SalesPipeline.
* Delete a SalesPipeline.
*/
export function deleteSalesPipeline<T>(requestParameters: DeleteSalesPipelineApiRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteSalesPipelineRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single SalesPipeline for a specific uid.
 * Retrieve a single SalesPipeline
 */
function getSalesPipelineRaw<T>(requestParameters: GetSalesPipelineApiRequest, requestConfig: runtime.TypedQueryConfig<T, SalesPipeline> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSalesPipeline.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SalesPipeline/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SalesPipelineFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single SalesPipeline for a specific uid.
* Retrieve a single SalesPipeline
*/
export function getSalesPipeline<T>(requestParameters: GetSalesPipelineApiRequest, requestConfig?: runtime.TypedQueryConfig<T, SalesPipeline>): QueryConfig<T> {
    return getSalesPipelineRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of SalesPipelines.
 * Retrieve a list of SalesPipelines
 */
function getSalesPipelineListRaw<T>(requestParameters: GetSalesPipelineListApiRequest, requestConfig: runtime.TypedQueryConfig<T, Array<SalesPipeline>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SalesPipeline`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(SalesPipelineFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of SalesPipelines.
* Retrieve a list of SalesPipelines
*/
export function getSalesPipelineList<T>(requestParameters: GetSalesPipelineListApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<SalesPipeline>>): QueryConfig<T> {
    return getSalesPipelineListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new SalesPipeline.
 * Create a new SalesPipeline
 */
function postSalesPipelineRaw<T>(requestParameters: PostSalesPipelineApiRequest, requestConfig: runtime.TypedQueryConfig<T, SalesPipeline> = {}): QueryConfig<T> {
    if (requestParameters.salesPipeline === null || requestParameters.salesPipeline === undefined) {
        throw new runtime.RequiredError('salesPipeline','Required parameter requestParameters.salesPipeline was null or undefined when calling postSalesPipeline.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SalesPipeline`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || SalesPipelineToJSON(requestParameters.salesPipeline),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SalesPipelineFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new SalesPipeline.
* Create a new SalesPipeline
*/
export function postSalesPipeline<T>(requestParameters: PostSalesPipelineApiRequest, requestConfig?: runtime.TypedQueryConfig<T, SalesPipeline>): QueryConfig<T> {
    return postSalesPipelineRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing SalesPipeline.
 * Update an existing SalesPipeline
 */
function updateSalesPipelineRaw<T>(requestParameters: UpdateSalesPipelineApiRequest, requestConfig: runtime.TypedQueryConfig<T, SalesPipeline> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSalesPipeline.');
    }

    if (requestParameters.salesPipeline === null || requestParameters.salesPipeline === undefined) {
        throw new runtime.RequiredError('salesPipeline','Required parameter requestParameters.salesPipeline was null or undefined when calling updateSalesPipeline.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SalesPipeline/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || SalesPipelineToJSON(requestParameters.salesPipeline),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SalesPipelineFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing SalesPipeline.
* Update an existing SalesPipeline
*/
export function updateSalesPipeline<T>(requestParameters: UpdateSalesPipelineApiRequest, requestConfig?: runtime.TypedQueryConfig<T, SalesPipeline>): QueryConfig<T> {
    return updateSalesPipelineRaw(requestParameters, requestConfig);
}

