// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: McpResourceResponseApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    McpResourceResponse,
    McpResourceResponseFromJSON,
    McpResourceResponseToJSON,
} from '../model';

export interface DeleteMcpResourceResponseApiRequest {
    id: string;
}

export interface GetMcpResourceResponseApiRequest {
    id: string;
}

export interface GetMcpResourceResponseListApiRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostMcpResourceResponseApiRequest {
    mcpResourceResponse: McpResourceResponse;
}

export interface UpdateMcpResourceResponseApiRequest {
    id: string;
    mcpResourceResponse: McpResourceResponse;
}


/**
 * Deletes a specific McpResourceResponse.
 * Delete a McpResourceResponse.
 */
function deleteMcpResourceResponseRaw<T>(requestParameters: DeleteMcpResourceResponseApiRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMcpResourceResponse.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/McpResourceResponse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific McpResourceResponse.
* Delete a McpResourceResponse.
*/
export function deleteMcpResourceResponse<T>(requestParameters: DeleteMcpResourceResponseApiRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteMcpResourceResponseRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single McpResourceResponse for a specific uid.
 * Retrieve a single McpResourceResponse
 */
function getMcpResourceResponseRaw<T>(requestParameters: GetMcpResourceResponseApiRequest, requestConfig: runtime.TypedQueryConfig<T, McpResourceResponse> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMcpResourceResponse.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/McpResourceResponse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(McpResourceResponseFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single McpResourceResponse for a specific uid.
* Retrieve a single McpResourceResponse
*/
export function getMcpResourceResponse<T>(requestParameters: GetMcpResourceResponseApiRequest, requestConfig?: runtime.TypedQueryConfig<T, McpResourceResponse>): QueryConfig<T> {
    return getMcpResourceResponseRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of McpResourceResponses.
 * Retrieve a list of McpResourceResponses
 */
function getMcpResourceResponseListRaw<T>(requestParameters: GetMcpResourceResponseListApiRequest, requestConfig: runtime.TypedQueryConfig<T, Array<McpResourceResponse>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/McpResourceResponse`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(McpResourceResponseFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of McpResourceResponses.
* Retrieve a list of McpResourceResponses
*/
export function getMcpResourceResponseList<T>(requestParameters: GetMcpResourceResponseListApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<McpResourceResponse>>): QueryConfig<T> {
    return getMcpResourceResponseListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new McpResourceResponse.
 * Create a new McpResourceResponse
 */
function postMcpResourceResponseRaw<T>(requestParameters: PostMcpResourceResponseApiRequest, requestConfig: runtime.TypedQueryConfig<T, McpResourceResponse> = {}): QueryConfig<T> {
    if (requestParameters.mcpResourceResponse === null || requestParameters.mcpResourceResponse === undefined) {
        throw new runtime.RequiredError('mcpResourceResponse','Required parameter requestParameters.mcpResourceResponse was null or undefined when calling postMcpResourceResponse.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/McpResourceResponse`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || McpResourceResponseToJSON(requestParameters.mcpResourceResponse),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(McpResourceResponseFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new McpResourceResponse.
* Create a new McpResourceResponse
*/
export function postMcpResourceResponse<T>(requestParameters: PostMcpResourceResponseApiRequest, requestConfig?: runtime.TypedQueryConfig<T, McpResourceResponse>): QueryConfig<T> {
    return postMcpResourceResponseRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing McpResourceResponse.
 * Update an existing McpResourceResponse
 */
function updateMcpResourceResponseRaw<T>(requestParameters: UpdateMcpResourceResponseApiRequest, requestConfig: runtime.TypedQueryConfig<T, McpResourceResponse> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMcpResourceResponse.');
    }

    if (requestParameters.mcpResourceResponse === null || requestParameters.mcpResourceResponse === undefined) {
        throw new runtime.RequiredError('mcpResourceResponse','Required parameter requestParameters.mcpResourceResponse was null or undefined when calling updateMcpResourceResponse.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/McpResourceResponse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || McpResourceResponseToJSON(requestParameters.mcpResourceResponse),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(McpResourceResponseFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing McpResourceResponse.
* Update an existing McpResourceResponse
*/
export function updateMcpResourceResponse<T>(requestParameters: UpdateMcpResourceResponseApiRequest, requestConfig?: runtime.TypedQueryConfig<T, McpResourceResponse>): QueryConfig<T> {
    return updateMcpResourceResponseRaw(requestParameters, requestConfig);
}

