// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: McpResourceApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from "redux-query"
import * as runtime from "../src/runtime"
import { McpResource, McpResourceFromJSON, McpResourceToJSON } from "../model"

export interface DeleteMcpResourceRequest {
	id: string
}

export interface GetMcpResourceRequest {
	id: string
}

export interface PostMcpResourceRequest {
	mcpResource: McpResource
}

export interface UpdateMcpResourceRequest {
	id: string
	mcpResource: McpResource
}

/**
 * Deletes a specific McpResource.
 * Delete a McpResource.
 */
function deleteMcpResourceRaw<T>(
	requestParameters: DeleteMcpResourceRequest,
	requestConfig: runtime.TypedQueryConfig<T, void> = {},
): QueryConfig<T> {
	if (requestParameters.id === null || requestParameters.id === undefined) {
		throw new runtime.RequiredError(
			"id",
			"Required parameter requestParameters.id was null or undefined when calling deleteMcpResource.",
		)
	}

	let queryParameters = null

	const headerParameters: runtime.HttpHeaders = {}

	const { meta = {} } = requestConfig

	const config: QueryConfig<T> = {
		url: `${runtime.Configuration.basePath}/McpResource/{id}`.replace(
			`{${"id"}}`,
			encodeURIComponent(String(requestParameters.id)),
		),
		meta,
		update: requestConfig.update,
		queryKey: requestConfig.queryKey,
		optimisticUpdate: requestConfig.optimisticUpdate,
		force: requestConfig.force,
		rollback: requestConfig.rollback,
		options: {
			method: "DELETE",
			headers: headerParameters,
		},
		body: queryParameters,
	}

	const { transform: requestTransform } = requestConfig
	if (requestTransform) {
	}

	return config
}

/**
 * Deletes a specific McpResource.
 * Delete a McpResource.
 */
export function deleteMcpResource<T>(
	requestParameters: DeleteMcpResourceRequest,
	requestConfig?: runtime.TypedQueryConfig<T, void>,
): QueryConfig<T> {
	return deleteMcpResourceRaw(requestParameters, requestConfig)
}

/**
 * Retrieves a single McpResource for a specific uid.
 * Retrieve a single McpResource
 */
function getMcpResourceRaw<T>(
	requestParameters: GetMcpResourceRequest,
	requestConfig: runtime.TypedQueryConfig<T, McpResource> = {},
): QueryConfig<T> {
	if (requestParameters.id === null || requestParameters.id === undefined) {
		throw new runtime.RequiredError(
			"id",
			"Required parameter requestParameters.id was null or undefined when calling getMcpResource.",
		)
	}

	let queryParameters = null

	const headerParameters: runtime.HttpHeaders = {}

	const { meta = {} } = requestConfig

	const config: QueryConfig<T> = {
		url: `${runtime.Configuration.basePath}/McpResource/{id}`.replace(
			`{${"id"}}`,
			encodeURIComponent(String(requestParameters.id)),
		),
		meta,
		update: requestConfig.update,
		queryKey: requestConfig.queryKey,
		optimisticUpdate: requestConfig.optimisticUpdate,
		force: requestConfig.force,
		rollback: requestConfig.rollback,
		options: {
			method: "GET",
			headers: headerParameters,
		},
		body: queryParameters,
	}

	const { transform: requestTransform } = requestConfig
	if (requestTransform) {
		config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(McpResourceFromJSON(body), text)
	}

	return config
}

/**
 * Retrieves a single McpResource for a specific uid.
 * Retrieve a single McpResource
 */
export function getMcpResource<T>(
	requestParameters: GetMcpResourceRequest,
	requestConfig?: runtime.TypedQueryConfig<T, McpResource>,
): QueryConfig<T> {
	return getMcpResourceRaw(requestParameters, requestConfig)
}

/**
 * Retrieves a list of McpResources.
 * Retrieve a list of McpResources
 */
function getMcpResourceListRaw<T>(requestConfig: runtime.TypedQueryConfig<T, Array<McpResource>> = {}): QueryConfig<T> {
	let queryParameters = null

	const headerParameters: runtime.HttpHeaders = {}

	const { meta = {} } = requestConfig

	const config: QueryConfig<T> = {
		url: `${runtime.Configuration.basePath}/McpResource`,
		meta,
		update: requestConfig.update,
		queryKey: requestConfig.queryKey,
		optimisticUpdate: requestConfig.optimisticUpdate,
		force: requestConfig.force,
		rollback: requestConfig.rollback,
		options: {
			method: "GET",
			headers: headerParameters,
		},
		body: queryParameters,
	}

	const { transform: requestTransform } = requestConfig
	if (requestTransform) {
		config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(McpResourceFromJSON), text)
	}

	return config
}

/**
 * Retrieves a list of McpResources.
 * Retrieve a list of McpResources
 */
export function getMcpResourceList<T>(requestConfig?: runtime.TypedQueryConfig<T, Array<McpResource>>): QueryConfig<T> {
	return getMcpResourceListRaw(requestConfig)
}

/**
 * Creates a new McpResource.
 * Create a new McpResource
 */
function postMcpResourceRaw<T>(
	requestParameters: PostMcpResourceRequest,
	requestConfig: runtime.TypedQueryConfig<T, McpResource> = {},
): QueryConfig<T> {
	if (requestParameters.mcpResource === null || requestParameters.mcpResource === undefined) {
		throw new runtime.RequiredError(
			"mcpResource",
			"Required parameter requestParameters.mcpResource was null or undefined when calling postMcpResource.",
		)
	}

	let queryParameters = null

	const headerParameters: runtime.HttpHeaders = {}

	headerParameters["Content-Type"] = "application/json"

	const { meta = {} } = requestConfig

	const config: QueryConfig<T> = {
		url: `${runtime.Configuration.basePath}/McpResource`,
		meta,
		update: requestConfig.update,
		queryKey: requestConfig.queryKey,
		optimisticUpdate: requestConfig.optimisticUpdate,
		force: requestConfig.force,
		rollback: requestConfig.rollback,
		options: {
			method: "POST",
			headers: headerParameters,
		},
		body: queryParameters || McpResourceToJSON(requestParameters.mcpResource),
	}

	const { transform: requestTransform } = requestConfig
	if (requestTransform) {
		config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(McpResourceFromJSON(body), text)
	}

	return config
}

/**
 * Creates a new McpResource.
 * Create a new McpResource
 */
export function postMcpResource<T>(
	requestParameters: PostMcpResourceRequest,
	requestConfig?: runtime.TypedQueryConfig<T, McpResource>,
): QueryConfig<T> {
	return postMcpResourceRaw(requestParameters, requestConfig)
}

/**
 * Updates an existing McpResource.
 * Update an existing McpResource
 */
function updateMcpResourceRaw<T>(
	requestParameters: UpdateMcpResourceRequest,
	requestConfig: runtime.TypedQueryConfig<T, McpResource> = {},
): QueryConfig<T> {
	if (requestParameters.id === null || requestParameters.id === undefined) {
		throw new runtime.RequiredError(
			"id",
			"Required parameter requestParameters.id was null or undefined when calling updateMcpResource.",
		)
	}

	if (requestParameters.mcpResource === null || requestParameters.mcpResource === undefined) {
		throw new runtime.RequiredError(
			"mcpResource",
			"Required parameter requestParameters.mcpResource was null or undefined when calling updateMcpResource.",
		)
	}

	let queryParameters = null

	const headerParameters: runtime.HttpHeaders = {}

	headerParameters["Content-Type"] = "application/json"

	const { meta = {} } = requestConfig

	const config: QueryConfig<T> = {
		url: `${runtime.Configuration.basePath}/McpResource/{id}`.replace(
			`{${"id"}}`,
			encodeURIComponent(String(requestParameters.id)),
		),
		meta,
		update: requestConfig.update,
		queryKey: requestConfig.queryKey,
		optimisticUpdate: requestConfig.optimisticUpdate,
		force: requestConfig.force,
		rollback: requestConfig.rollback,
		options: {
			method: "PUT",
			headers: headerParameters,
		},
		body: queryParameters || McpResourceToJSON(requestParameters.mcpResource),
	}

	const { transform: requestTransform } = requestConfig
	if (requestTransform) {
		config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(McpResourceFromJSON(body), text)
	}

	return config
}

/**
 * Updates an existing McpResource.
 * Update an existing McpResource
 */
export function updateMcpResource<T>(
	requestParameters: UpdateMcpResourceRequest,
	requestConfig?: runtime.TypedQueryConfig<T, McpResource>,
): QueryConfig<T> {
	return updateMcpResourceRaw(requestParameters, requestConfig)
}
