// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: McpResourceApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    McpResource,
    McpResourceFromJSON,
    McpResourceToJSON,
} from '../model';

export interface DeleteMcpResourceApiRequest {
    id: string;
}

export interface GetMcpResourceApiRequest {
    id: string;
}

export interface GetMcpResourceListApiRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostMcpResourceApiRequest {
    mcpResource: McpResource;
}

export interface UpdateMcpResourceApiRequest {
    id: string;
    mcpResource: McpResource;
}


/**
 * Deletes a specific McpResource.
 * Delete a McpResource.
 */
function deleteMcpResourceRaw<T>(requestParameters: DeleteMcpResourceApiRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMcpResource.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/McpResource/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific McpResource.
* Delete a McpResource.
*/
export function deleteMcpResource<T>(requestParameters: DeleteMcpResourceApiRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteMcpResourceRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single McpResource for a specific uid.
 * Retrieve a single McpResource
 */
function getMcpResourceRaw<T>(requestParameters: GetMcpResourceApiRequest, requestConfig: runtime.TypedQueryConfig<T, McpResource> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMcpResource.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/McpResource/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(McpResourceFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single McpResource for a specific uid.
* Retrieve a single McpResource
*/
export function getMcpResource<T>(requestParameters: GetMcpResourceApiRequest, requestConfig?: runtime.TypedQueryConfig<T, McpResource>): QueryConfig<T> {
    return getMcpResourceRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of McpResources.
 * Retrieve a list of McpResources
 */
function getMcpResourceListRaw<T>(requestParameters: GetMcpResourceListApiRequest, requestConfig: runtime.TypedQueryConfig<T, Array<McpResource>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/McpResource`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(McpResourceFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of McpResources.
* Retrieve a list of McpResources
*/
export function getMcpResourceList<T>(requestParameters: GetMcpResourceListApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<McpResource>>): QueryConfig<T> {
    return getMcpResourceListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new McpResource.
 * Create a new McpResource
 */
function postMcpResourceRaw<T>(requestParameters: PostMcpResourceApiRequest, requestConfig: runtime.TypedQueryConfig<T, McpResource> = {}): QueryConfig<T> {
    if (requestParameters.mcpResource === null || requestParameters.mcpResource === undefined) {
        throw new runtime.RequiredError('mcpResource','Required parameter requestParameters.mcpResource was null or undefined when calling postMcpResource.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/McpResource`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || McpResourceToJSON(requestParameters.mcpResource),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(McpResourceFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new McpResource.
* Create a new McpResource
*/
export function postMcpResource<T>(requestParameters: PostMcpResourceApiRequest, requestConfig?: runtime.TypedQueryConfig<T, McpResource>): QueryConfig<T> {
    return postMcpResourceRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing McpResource.
 * Update an existing McpResource
 */
function updateMcpResourceRaw<T>(requestParameters: UpdateMcpResourceApiRequest, requestConfig: runtime.TypedQueryConfig<T, McpResource> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMcpResource.');
    }

    if (requestParameters.mcpResource === null || requestParameters.mcpResource === undefined) {
        throw new runtime.RequiredError('mcpResource','Required parameter requestParameters.mcpResource was null or undefined when calling updateMcpResource.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/McpResource/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || McpResourceToJSON(requestParameters.mcpResource),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(McpResourceFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing McpResource.
* Update an existing McpResource
*/
export function updateMcpResource<T>(requestParameters: UpdateMcpResourceApiRequest, requestConfig?: runtime.TypedQueryConfig<T, McpResource>): QueryConfig<T> {
    return updateMcpResourceRaw(requestParameters, requestConfig);
}

