// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: SpaceApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    Space,
    SpaceFromJSON,
    SpaceToJSON,
} from '../model';

export interface DeleteSpaceApiRequest {
    id: string;
}

export interface GetSpaceApiRequest {
    id: string;
}

export interface GetSpaceListApiRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostSpaceApiRequest {
    space: Space;
}

export interface UpdateSpaceApiRequest {
    id: string;
    space: Space;
}


/**
 * Deletes a specific Space.
 * Delete a Space.
 */
function deleteSpaceRaw<T>(requestParameters: DeleteSpaceApiRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSpace.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Space/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific Space.
* Delete a Space.
*/
export function deleteSpace<T>(requestParameters: DeleteSpaceApiRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteSpaceRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single Space for a specific uid.
 * Retrieve a single Space
 */
function getSpaceRaw<T>(requestParameters: GetSpaceApiRequest, requestConfig: runtime.TypedQueryConfig<T, Space> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSpace.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Space/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SpaceFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single Space for a specific uid.
* Retrieve a single Space
*/
export function getSpace<T>(requestParameters: GetSpaceApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Space>): QueryConfig<T> {
    return getSpaceRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of Spaces.
 * Retrieve a list of Spaces
 */
function getSpaceListRaw<T>(requestParameters: GetSpaceListApiRequest, requestConfig: runtime.TypedQueryConfig<T, Array<Space>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Space`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(SpaceFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of Spaces.
* Retrieve a list of Spaces
*/
export function getSpaceList<T>(requestParameters: GetSpaceListApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<Space>>): QueryConfig<T> {
    return getSpaceListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new Space.
 * Create a new Space
 */
function postSpaceRaw<T>(requestParameters: PostSpaceApiRequest, requestConfig: runtime.TypedQueryConfig<T, Space> = {}): QueryConfig<T> {
    if (requestParameters.space === null || requestParameters.space === undefined) {
        throw new runtime.RequiredError('space','Required parameter requestParameters.space was null or undefined when calling postSpace.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Space`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || SpaceToJSON(requestParameters.space),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SpaceFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new Space.
* Create a new Space
*/
export function postSpace<T>(requestParameters: PostSpaceApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Space>): QueryConfig<T> {
    return postSpaceRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing Space.
 * Update an existing Space
 */
function updateSpaceRaw<T>(requestParameters: UpdateSpaceApiRequest, requestConfig: runtime.TypedQueryConfig<T, Space> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSpace.');
    }

    if (requestParameters.space === null || requestParameters.space === undefined) {
        throw new runtime.RequiredError('space','Required parameter requestParameters.space was null or undefined when calling updateSpace.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Space/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || SpaceToJSON(requestParameters.space),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SpaceFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing Space.
* Update an existing Space
*/
export function updateSpace<T>(requestParameters: UpdateSpaceApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Space>): QueryConfig<T> {
    return updateSpaceRaw(requestParameters, requestConfig);
}

