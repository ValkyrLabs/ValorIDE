// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: FileUploadSessionApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    FileUploadSession,
    FileUploadSessionFromJSON,
    FileUploadSessionToJSON,
} from '../model';

export interface DeleteFileUploadSessionApiRequest {
    id: string;
}

export interface GetFileUploadSessionApiRequest {
    id: string;
}

export interface GetFileUploadSessionListApiRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostFileUploadSessionApiRequest {
    fileUploadSession: FileUploadSession;
}

export interface UpdateFileUploadSessionApiRequest {
    id: string;
    fileUploadSession: FileUploadSession;
}


/**
 * Deletes a specific FileUploadSession.
 * Delete a FileUploadSession.
 */
function deleteFileUploadSessionRaw<T>(requestParameters: DeleteFileUploadSessionApiRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFileUploadSession.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/FileUploadSession/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific FileUploadSession.
* Delete a FileUploadSession.
*/
export function deleteFileUploadSession<T>(requestParameters: DeleteFileUploadSessionApiRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteFileUploadSessionRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single FileUploadSession for a specific uid.
 * Retrieve a single FileUploadSession
 */
function getFileUploadSessionRaw<T>(requestParameters: GetFileUploadSessionApiRequest, requestConfig: runtime.TypedQueryConfig<T, FileUploadSession> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFileUploadSession.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/FileUploadSession/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FileUploadSessionFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single FileUploadSession for a specific uid.
* Retrieve a single FileUploadSession
*/
export function getFileUploadSession<T>(requestParameters: GetFileUploadSessionApiRequest, requestConfig?: runtime.TypedQueryConfig<T, FileUploadSession>): QueryConfig<T> {
    return getFileUploadSessionRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of FileUploadSessions.
 * Retrieve a list of FileUploadSessions
 */
function getFileUploadSessionListRaw<T>(requestParameters: GetFileUploadSessionListApiRequest, requestConfig: runtime.TypedQueryConfig<T, Array<FileUploadSession>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/FileUploadSession`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(FileUploadSessionFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of FileUploadSessions.
* Retrieve a list of FileUploadSessions
*/
export function getFileUploadSessionList<T>(requestParameters: GetFileUploadSessionListApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<FileUploadSession>>): QueryConfig<T> {
    return getFileUploadSessionListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new FileUploadSession.
 * Create a new FileUploadSession
 */
function postFileUploadSessionRaw<T>(requestParameters: PostFileUploadSessionApiRequest, requestConfig: runtime.TypedQueryConfig<T, FileUploadSession> = {}): QueryConfig<T> {
    if (requestParameters.fileUploadSession === null || requestParameters.fileUploadSession === undefined) {
        throw new runtime.RequiredError('fileUploadSession','Required parameter requestParameters.fileUploadSession was null or undefined when calling postFileUploadSession.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/FileUploadSession`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || FileUploadSessionToJSON(requestParameters.fileUploadSession),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FileUploadSessionFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new FileUploadSession.
* Create a new FileUploadSession
*/
export function postFileUploadSession<T>(requestParameters: PostFileUploadSessionApiRequest, requestConfig?: runtime.TypedQueryConfig<T, FileUploadSession>): QueryConfig<T> {
    return postFileUploadSessionRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing FileUploadSession.
 * Update an existing FileUploadSession
 */
function updateFileUploadSessionRaw<T>(requestParameters: UpdateFileUploadSessionApiRequest, requestConfig: runtime.TypedQueryConfig<T, FileUploadSession> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateFileUploadSession.');
    }

    if (requestParameters.fileUploadSession === null || requestParameters.fileUploadSession === undefined) {
        throw new runtime.RequiredError('fileUploadSession','Required parameter requestParameters.fileUploadSession was null or undefined when calling updateFileUploadSession.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/FileUploadSession/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || FileUploadSessionToJSON(requestParameters.fileUploadSession),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FileUploadSessionFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing FileUploadSession.
* Update an existing FileUploadSession
*/
export function updateFileUploadSession<T>(requestParameters: UpdateFileUploadSessionApiRequest, requestConfig?: runtime.TypedQueryConfig<T, FileUploadSession>): QueryConfig<T> {
    return updateFileUploadSessionRaw(requestParameters, requestConfig);
}

