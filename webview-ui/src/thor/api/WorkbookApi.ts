// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: WorkbookApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    Workbook,
    WorkbookFromJSON,
    WorkbookToJSON,
} from '../model';

export interface DeleteWorkbookApiRequest {
    id: string;
}

export interface GetWorkbookApiRequest {
    id: string;
}

export interface GetWorkbookListApiRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostWorkbookApiRequest {
    workbook: Workbook;
}

export interface UpdateWorkbookApiRequest {
    id: string;
    workbook: Workbook;
}


/**
 * Deletes a specific Workbook.
 * Delete a Workbook.
 */
function deleteWorkbookRaw<T>(requestParameters: DeleteWorkbookApiRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWorkbook.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Workbook/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific Workbook.
* Delete a Workbook.
*/
export function deleteWorkbook<T>(requestParameters: DeleteWorkbookApiRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteWorkbookRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single Workbook for a specific uid.
 * Retrieve a single Workbook
 */
function getWorkbookRaw<T>(requestParameters: GetWorkbookApiRequest, requestConfig: runtime.TypedQueryConfig<T, Workbook> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWorkbook.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Workbook/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(WorkbookFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single Workbook for a specific uid.
* Retrieve a single Workbook
*/
export function getWorkbook<T>(requestParameters: GetWorkbookApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Workbook>): QueryConfig<T> {
    return getWorkbookRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of Workbooks.
 * Retrieve a list of Workbooks
 */
function getWorkbookListRaw<T>(requestParameters: GetWorkbookListApiRequest, requestConfig: runtime.TypedQueryConfig<T, Array<Workbook>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Workbook`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(WorkbookFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of Workbooks.
* Retrieve a list of Workbooks
*/
export function getWorkbookList<T>(requestParameters: GetWorkbookListApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<Workbook>>): QueryConfig<T> {
    return getWorkbookListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new Workbook.
 * Create a new Workbook
 */
function postWorkbookRaw<T>(requestParameters: PostWorkbookApiRequest, requestConfig: runtime.TypedQueryConfig<T, Workbook> = {}): QueryConfig<T> {
    if (requestParameters.workbook === null || requestParameters.workbook === undefined) {
        throw new runtime.RequiredError('workbook','Required parameter requestParameters.workbook was null or undefined when calling postWorkbook.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Workbook`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || WorkbookToJSON(requestParameters.workbook),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(WorkbookFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new Workbook.
* Create a new Workbook
*/
export function postWorkbook<T>(requestParameters: PostWorkbookApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Workbook>): QueryConfig<T> {
    return postWorkbookRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing Workbook.
 * Update an existing Workbook
 */
function updateWorkbookRaw<T>(requestParameters: UpdateWorkbookApiRequest, requestConfig: runtime.TypedQueryConfig<T, Workbook> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateWorkbook.');
    }

    if (requestParameters.workbook === null || requestParameters.workbook === undefined) {
        throw new runtime.RequiredError('workbook','Required parameter requestParameters.workbook was null or undefined when calling updateWorkbook.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Workbook/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || WorkbookToJSON(requestParameters.workbook),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(WorkbookFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing Workbook.
* Update an existing Workbook
*/
export function updateWorkbook<T>(requestParameters: UpdateWorkbookApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Workbook>): QueryConfig<T> {
    return updateWorkbookRaw(requestParameters, requestConfig);
}

