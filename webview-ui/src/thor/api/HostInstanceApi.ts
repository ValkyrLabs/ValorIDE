// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: HostInstanceApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    HostInstance,
    HostInstanceFromJSON,
    HostInstanceToJSON,
} from '../model';

export interface DeleteHostInstanceApiRequest {
    id: string;
}

export interface GetHostInstanceApiRequest {
    id: string;
}

export interface GetHostInstanceListApiRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostHostInstanceApiRequest {
    hostInstance: HostInstance;
}

export interface UpdateHostInstanceApiRequest {
    id: string;
    hostInstance: HostInstance;
}


/**
 * Deletes a specific HostInstance.
 * Delete a HostInstance.
 */
function deleteHostInstanceRaw<T>(requestParameters: DeleteHostInstanceApiRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteHostInstance.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/HostInstance/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific HostInstance.
* Delete a HostInstance.
*/
export function deleteHostInstance<T>(requestParameters: DeleteHostInstanceApiRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteHostInstanceRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single HostInstance for a specific uid.
 * Retrieve a single HostInstance
 */
function getHostInstanceRaw<T>(requestParameters: GetHostInstanceApiRequest, requestConfig: runtime.TypedQueryConfig<T, HostInstance> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getHostInstance.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/HostInstance/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(HostInstanceFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single HostInstance for a specific uid.
* Retrieve a single HostInstance
*/
export function getHostInstance<T>(requestParameters: GetHostInstanceApiRequest, requestConfig?: runtime.TypedQueryConfig<T, HostInstance>): QueryConfig<T> {
    return getHostInstanceRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of HostInstances.
 * Retrieve a list of HostInstances
 */
function getHostInstanceListRaw<T>(requestParameters: GetHostInstanceListApiRequest, requestConfig: runtime.TypedQueryConfig<T, Array<HostInstance>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/HostInstance`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(HostInstanceFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of HostInstances.
* Retrieve a list of HostInstances
*/
export function getHostInstanceList<T>(requestParameters: GetHostInstanceListApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<HostInstance>>): QueryConfig<T> {
    return getHostInstanceListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new HostInstance.
 * Create a new HostInstance
 */
function postHostInstanceRaw<T>(requestParameters: PostHostInstanceApiRequest, requestConfig: runtime.TypedQueryConfig<T, HostInstance> = {}): QueryConfig<T> {
    if (requestParameters.hostInstance === null || requestParameters.hostInstance === undefined) {
        throw new runtime.RequiredError('hostInstance','Required parameter requestParameters.hostInstance was null or undefined when calling postHostInstance.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/HostInstance`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || HostInstanceToJSON(requestParameters.hostInstance),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(HostInstanceFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new HostInstance.
* Create a new HostInstance
*/
export function postHostInstance<T>(requestParameters: PostHostInstanceApiRequest, requestConfig?: runtime.TypedQueryConfig<T, HostInstance>): QueryConfig<T> {
    return postHostInstanceRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing HostInstance.
 * Update an existing HostInstance
 */
function updateHostInstanceRaw<T>(requestParameters: UpdateHostInstanceApiRequest, requestConfig: runtime.TypedQueryConfig<T, HostInstance> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateHostInstance.');
    }

    if (requestParameters.hostInstance === null || requestParameters.hostInstance === undefined) {
        throw new runtime.RequiredError('hostInstance','Required parameter requestParameters.hostInstance was null or undefined when calling updateHostInstance.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/HostInstance/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || HostInstanceToJSON(requestParameters.hostInstance),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(HostInstanceFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing HostInstance.
* Update an existing HostInstance
*/
export function updateHostInstance<T>(requestParameters: UpdateHostInstanceApiRequest, requestConfig?: runtime.TypedQueryConfig<T, HostInstance>): QueryConfig<T> {
    return updateHostInstanceRaw(requestParameters, requestConfig);
}

