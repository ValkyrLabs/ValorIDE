// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: ChatCompletionResponseApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    ChatCompletionResponse,
    ChatCompletionResponseFromJSON,
    ChatCompletionResponseToJSON,
} from '../model';

export interface DeleteChatCompletionResponseApiRequest {
    id: string;
}

export interface GetChatCompletionResponseApiRequest {
    id: string;
}

export interface GetChatCompletionResponseListApiRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostChatCompletionResponseApiRequest {
    chatCompletionResponse: ChatCompletionResponse;
}

export interface UpdateChatCompletionResponseApiRequest {
    id: string;
    chatCompletionResponse: ChatCompletionResponse;
}


/**
 * Deletes a specific ChatCompletionResponse.
 * Delete a ChatCompletionResponse.
 */
function deleteChatCompletionResponseRaw<T>(requestParameters: DeleteChatCompletionResponseApiRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteChatCompletionResponse.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ChatCompletionResponse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific ChatCompletionResponse.
* Delete a ChatCompletionResponse.
*/
export function deleteChatCompletionResponse<T>(requestParameters: DeleteChatCompletionResponseApiRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteChatCompletionResponseRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single ChatCompletionResponse for a specific uid.
 * Retrieve a single ChatCompletionResponse
 */
function getChatCompletionResponseRaw<T>(requestParameters: GetChatCompletionResponseApiRequest, requestConfig: runtime.TypedQueryConfig<T, ChatCompletionResponse> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getChatCompletionResponse.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ChatCompletionResponse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ChatCompletionResponseFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single ChatCompletionResponse for a specific uid.
* Retrieve a single ChatCompletionResponse
*/
export function getChatCompletionResponse<T>(requestParameters: GetChatCompletionResponseApiRequest, requestConfig?: runtime.TypedQueryConfig<T, ChatCompletionResponse>): QueryConfig<T> {
    return getChatCompletionResponseRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of ChatCompletionResponses.
 * Retrieve a list of ChatCompletionResponses
 */
function getChatCompletionResponseListRaw<T>(requestParameters: GetChatCompletionResponseListApiRequest, requestConfig: runtime.TypedQueryConfig<T, Array<ChatCompletionResponse>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ChatCompletionResponse`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ChatCompletionResponseFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of ChatCompletionResponses.
* Retrieve a list of ChatCompletionResponses
*/
export function getChatCompletionResponseList<T>(requestParameters: GetChatCompletionResponseListApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<ChatCompletionResponse>>): QueryConfig<T> {
    return getChatCompletionResponseListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new ChatCompletionResponse.
 * Create a new ChatCompletionResponse
 */
function postChatCompletionResponseRaw<T>(requestParameters: PostChatCompletionResponseApiRequest, requestConfig: runtime.TypedQueryConfig<T, ChatCompletionResponse> = {}): QueryConfig<T> {
    if (requestParameters.chatCompletionResponse === null || requestParameters.chatCompletionResponse === undefined) {
        throw new runtime.RequiredError('chatCompletionResponse','Required parameter requestParameters.chatCompletionResponse was null or undefined when calling postChatCompletionResponse.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ChatCompletionResponse`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ChatCompletionResponseToJSON(requestParameters.chatCompletionResponse),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ChatCompletionResponseFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new ChatCompletionResponse.
* Create a new ChatCompletionResponse
*/
export function postChatCompletionResponse<T>(requestParameters: PostChatCompletionResponseApiRequest, requestConfig?: runtime.TypedQueryConfig<T, ChatCompletionResponse>): QueryConfig<T> {
    return postChatCompletionResponseRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing ChatCompletionResponse.
 * Update an existing ChatCompletionResponse
 */
function updateChatCompletionResponseRaw<T>(requestParameters: UpdateChatCompletionResponseApiRequest, requestConfig: runtime.TypedQueryConfig<T, ChatCompletionResponse> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateChatCompletionResponse.');
    }

    if (requestParameters.chatCompletionResponse === null || requestParameters.chatCompletionResponse === undefined) {
        throw new runtime.RequiredError('chatCompletionResponse','Required parameter requestParameters.chatCompletionResponse was null or undefined when calling updateChatCompletionResponse.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ChatCompletionResponse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || ChatCompletionResponseToJSON(requestParameters.chatCompletionResponse),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ChatCompletionResponseFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing ChatCompletionResponse.
* Update an existing ChatCompletionResponse
*/
export function updateChatCompletionResponse<T>(requestParameters: UpdateChatCompletionResponseApiRequest, requestConfig?: runtime.TypedQueryConfig<T, ChatCompletionResponse>): QueryConfig<T> {
    return updateChatCompletionResponseRaw(requestParameters, requestConfig);
}

