// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: ChatCompletionResponseApi
*/

import {
  HttpMethods,
  QueryConfig,
  ResponseBody,
  ResponseText,
} from "redux-query";
import * as runtime from "../src/runtime";
import {
  ChatCompletionResponse,
  ChatCompletionResponseFromJSON,
  ChatCompletionResponseToJSON,
} from "../model";

export interface DeleteChatCompletionResponseRequest {
  id: string;
}

export interface GetChatCompletionResponseRequest {
  id: string;
}

export interface PostChatCompletionResponseRequest {
  chatCompletionResponse: ChatCompletionResponse;
}

export interface UpdateChatCompletionResponseRequest {
  id: string;
  chatCompletionResponse: ChatCompletionResponse;
}

/**
 * Deletes a specific ChatCompletionResponse.
 * Delete a ChatCompletionResponse.
 */
function deleteChatCompletionResponseRaw<T>(
  requestParameters: DeleteChatCompletionResponseRequest,
  requestConfig: runtime.TypedQueryConfig<T, void> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      "id",
      "Required parameter requestParameters.id was null or undefined when calling deleteChatCompletionResponse.",
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/ChatCompletionResponse/{id}`.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: "DELETE",
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
  }

  return config;
}

/**
 * Deletes a specific ChatCompletionResponse.
 * Delete a ChatCompletionResponse.
 */
export function deleteChatCompletionResponse<T>(
  requestParameters: DeleteChatCompletionResponseRequest,
  requestConfig?: runtime.TypedQueryConfig<T, void>,
): QueryConfig<T> {
  return deleteChatCompletionResponseRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single ChatCompletionResponse for a specific uid.
 * Retrieve a single ChatCompletionResponse
 */
function getChatCompletionResponseRaw<T>(
  requestParameters: GetChatCompletionResponseRequest,
  requestConfig: runtime.TypedQueryConfig<T, ChatCompletionResponse> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      "id",
      "Required parameter requestParameters.id was null or undefined when calling getChatCompletionResponse.",
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/ChatCompletionResponse/{id}`.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: "GET",
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(ChatCompletionResponseFromJSON(body), text);
  }

  return config;
}

/**
 * Retrieves a single ChatCompletionResponse for a specific uid.
 * Retrieve a single ChatCompletionResponse
 */
export function getChatCompletionResponse<T>(
  requestParameters: GetChatCompletionResponseRequest,
  requestConfig?: runtime.TypedQueryConfig<T, ChatCompletionResponse>,
): QueryConfig<T> {
  return getChatCompletionResponseRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of ChatCompletionResponses.
 * Retrieve a list of ChatCompletionResponses
 */
function getChatCompletionResponseListRaw<T>(
  requestConfig: runtime.TypedQueryConfig<
    T,
    Array<ChatCompletionResponse>
  > = {},
): QueryConfig<T> {
  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/ChatCompletionResponse`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: "GET",
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(body.map(ChatCompletionResponseFromJSON), text);
  }

  return config;
}

/**
 * Retrieves a list of ChatCompletionResponses.
 * Retrieve a list of ChatCompletionResponses
 */
export function getChatCompletionResponseList<T>(
  requestConfig?: runtime.TypedQueryConfig<T, Array<ChatCompletionResponse>>,
): QueryConfig<T> {
  return getChatCompletionResponseListRaw(requestConfig);
}

/**
 * Creates a new ChatCompletionResponse.
 * Create a new ChatCompletionResponse
 */
function postChatCompletionResponseRaw<T>(
  requestParameters: PostChatCompletionResponseRequest,
  requestConfig: runtime.TypedQueryConfig<T, ChatCompletionResponse> = {},
): QueryConfig<T> {
  if (
    requestParameters.chatCompletionResponse === null ||
    requestParameters.chatCompletionResponse === undefined
  ) {
    throw new runtime.RequiredError(
      "chatCompletionResponse",
      "Required parameter requestParameters.chatCompletionResponse was null or undefined when calling postChatCompletionResponse.",
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  headerParameters["Content-Type"] = "application/json";

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/ChatCompletionResponse`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: "POST",
      headers: headerParameters,
    },
    body:
      queryParameters ||
      ChatCompletionResponseToJSON(requestParameters.chatCompletionResponse),
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(ChatCompletionResponseFromJSON(body), text);
  }

  return config;
}

/**
 * Creates a new ChatCompletionResponse.
 * Create a new ChatCompletionResponse
 */
export function postChatCompletionResponse<T>(
  requestParameters: PostChatCompletionResponseRequest,
  requestConfig?: runtime.TypedQueryConfig<T, ChatCompletionResponse>,
): QueryConfig<T> {
  return postChatCompletionResponseRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing ChatCompletionResponse.
 * Update an existing ChatCompletionResponse
 */
function updateChatCompletionResponseRaw<T>(
  requestParameters: UpdateChatCompletionResponseRequest,
  requestConfig: runtime.TypedQueryConfig<T, ChatCompletionResponse> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      "id",
      "Required parameter requestParameters.id was null or undefined when calling updateChatCompletionResponse.",
    );
  }

  if (
    requestParameters.chatCompletionResponse === null ||
    requestParameters.chatCompletionResponse === undefined
  ) {
    throw new runtime.RequiredError(
      "chatCompletionResponse",
      "Required parameter requestParameters.chatCompletionResponse was null or undefined when calling updateChatCompletionResponse.",
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  headerParameters["Content-Type"] = "application/json";

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/ChatCompletionResponse/{id}`.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: "PUT",
      headers: headerParameters,
    },
    body:
      queryParameters ||
      ChatCompletionResponseToJSON(requestParameters.chatCompletionResponse),
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(ChatCompletionResponseFromJSON(body), text);
  }

  return config;
}

/**
 * Updates an existing ChatCompletionResponse.
 * Update an existing ChatCompletionResponse
 */
export function updateChatCompletionResponse<T>(
  requestParameters: UpdateChatCompletionResponseRequest,
  requestConfig?: runtime.TypedQueryConfig<T, ChatCompletionResponse>,
): QueryConfig<T> {
  return updateChatCompletionResponseRaw(requestParameters, requestConfig);
}
