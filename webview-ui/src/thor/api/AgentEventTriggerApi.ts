// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: AgentEventTriggerApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    AgentEventTrigger,
    AgentEventTriggerFromJSON,
    AgentEventTriggerToJSON,
} from '../model';

export interface DeleteAgentEventTriggerRequest {
    id: string;
}

export interface GetAgentEventTriggerRequest {
    id: string;
}

export interface GetAgentEventTriggerListRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostAgentEventTriggerRequest {
    agentEventTrigger: AgentEventTrigger;
}

export interface UpdateAgentEventTriggerRequest {
    id: string;
    agentEventTrigger: AgentEventTrigger;
}


/**
 * Deletes a specific AgentEventTrigger.
 * Delete a AgentEventTrigger.
 */
function deleteAgentEventTriggerRaw<T>(requestParameters: DeleteAgentEventTriggerRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAgentEventTrigger.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/AgentEventTrigger/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific AgentEventTrigger.
* Delete a AgentEventTrigger.
*/
export function deleteAgentEventTrigger<T>(requestParameters: DeleteAgentEventTriggerRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteAgentEventTriggerRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single AgentEventTrigger for a specific uid.
 * Retrieve a single AgentEventTrigger
 */
function getAgentEventTriggerRaw<T>(requestParameters: GetAgentEventTriggerRequest, requestConfig: runtime.TypedQueryConfig<T, AgentEventTrigger> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAgentEventTrigger.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/AgentEventTrigger/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AgentEventTriggerFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single AgentEventTrigger for a specific uid.
* Retrieve a single AgentEventTrigger
*/
export function getAgentEventTrigger<T>(requestParameters: GetAgentEventTriggerRequest, requestConfig?: runtime.TypedQueryConfig<T, AgentEventTrigger>): QueryConfig<T> {
    return getAgentEventTriggerRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of AgentEventTriggers.
 * Retrieve a list of AgentEventTriggers
 */
function getAgentEventTriggerListRaw<T>(requestParameters: GetAgentEventTriggerListRequest, requestConfig: runtime.TypedQueryConfig<T, Array<AgentEventTrigger>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/AgentEventTrigger`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(AgentEventTriggerFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of AgentEventTriggers.
* Retrieve a list of AgentEventTriggers
*/
export function getAgentEventTriggerList<T>(requestParameters: GetAgentEventTriggerListRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<AgentEventTrigger>>): QueryConfig<T> {
    return getAgentEventTriggerListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new AgentEventTrigger.
 * Create a new AgentEventTrigger
 */
function postAgentEventTriggerRaw<T>(requestParameters: PostAgentEventTriggerRequest, requestConfig: runtime.TypedQueryConfig<T, AgentEventTrigger> = {}): QueryConfig<T> {
    if (requestParameters.agentEventTrigger === null || requestParameters.agentEventTrigger === undefined) {
        throw new runtime.RequiredError('agentEventTrigger','Required parameter requestParameters.agentEventTrigger was null or undefined when calling postAgentEventTrigger.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/AgentEventTrigger`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || AgentEventTriggerToJSON(requestParameters.agentEventTrigger),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AgentEventTriggerFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new AgentEventTrigger.
* Create a new AgentEventTrigger
*/
export function postAgentEventTrigger<T>(requestParameters: PostAgentEventTriggerRequest, requestConfig?: runtime.TypedQueryConfig<T, AgentEventTrigger>): QueryConfig<T> {
    return postAgentEventTriggerRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing AgentEventTrigger.
 * Update an existing AgentEventTrigger
 */
function updateAgentEventTriggerRaw<T>(requestParameters: UpdateAgentEventTriggerRequest, requestConfig: runtime.TypedQueryConfig<T, AgentEventTrigger> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAgentEventTrigger.');
    }

    if (requestParameters.agentEventTrigger === null || requestParameters.agentEventTrigger === undefined) {
        throw new runtime.RequiredError('agentEventTrigger','Required parameter requestParameters.agentEventTrigger was null or undefined when calling updateAgentEventTrigger.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/AgentEventTrigger/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || AgentEventTriggerToJSON(requestParameters.agentEventTrigger),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AgentEventTriggerFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing AgentEventTrigger.
* Update an existing AgentEventTrigger
*/
export function updateAgentEventTrigger<T>(requestParameters: UpdateAgentEventTriggerRequest, requestConfig?: runtime.TypedQueryConfig<T, AgentEventTrigger>): QueryConfig<T> {
    return updateAgentEventTriggerRaw(requestParameters, requestConfig);
}

