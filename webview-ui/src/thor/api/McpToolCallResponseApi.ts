// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: McpToolCallResponseApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    McpToolCallResponse,
    McpToolCallResponseFromJSON,
    McpToolCallResponseToJSON,
} from '../model';

export interface DeleteMcpToolCallResponseApiRequest {
    id: string;
}

export interface GetMcpToolCallResponseApiRequest {
    id: string;
}

export interface GetMcpToolCallResponseListApiRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostMcpToolCallResponseApiRequest {
    mcpToolCallResponse: McpToolCallResponse;
}

export interface UpdateMcpToolCallResponseApiRequest {
    id: string;
    mcpToolCallResponse: McpToolCallResponse;
}


/**
 * Deletes a specific McpToolCallResponse.
 * Delete a McpToolCallResponse.
 */
function deleteMcpToolCallResponseRaw<T>(requestParameters: DeleteMcpToolCallResponseApiRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMcpToolCallResponse.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/McpToolCallResponse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific McpToolCallResponse.
* Delete a McpToolCallResponse.
*/
export function deleteMcpToolCallResponse<T>(requestParameters: DeleteMcpToolCallResponseApiRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteMcpToolCallResponseRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single McpToolCallResponse for a specific uid.
 * Retrieve a single McpToolCallResponse
 */
function getMcpToolCallResponseRaw<T>(requestParameters: GetMcpToolCallResponseApiRequest, requestConfig: runtime.TypedQueryConfig<T, McpToolCallResponse> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMcpToolCallResponse.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/McpToolCallResponse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(McpToolCallResponseFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single McpToolCallResponse for a specific uid.
* Retrieve a single McpToolCallResponse
*/
export function getMcpToolCallResponse<T>(requestParameters: GetMcpToolCallResponseApiRequest, requestConfig?: runtime.TypedQueryConfig<T, McpToolCallResponse>): QueryConfig<T> {
    return getMcpToolCallResponseRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of McpToolCallResponses.
 * Retrieve a list of McpToolCallResponses
 */
function getMcpToolCallResponseListRaw<T>(requestParameters: GetMcpToolCallResponseListApiRequest, requestConfig: runtime.TypedQueryConfig<T, Array<McpToolCallResponse>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/McpToolCallResponse`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(McpToolCallResponseFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of McpToolCallResponses.
* Retrieve a list of McpToolCallResponses
*/
export function getMcpToolCallResponseList<T>(requestParameters: GetMcpToolCallResponseListApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<McpToolCallResponse>>): QueryConfig<T> {
    return getMcpToolCallResponseListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new McpToolCallResponse.
 * Create a new McpToolCallResponse
 */
function postMcpToolCallResponseRaw<T>(requestParameters: PostMcpToolCallResponseApiRequest, requestConfig: runtime.TypedQueryConfig<T, McpToolCallResponse> = {}): QueryConfig<T> {
    if (requestParameters.mcpToolCallResponse === null || requestParameters.mcpToolCallResponse === undefined) {
        throw new runtime.RequiredError('mcpToolCallResponse','Required parameter requestParameters.mcpToolCallResponse was null or undefined when calling postMcpToolCallResponse.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/McpToolCallResponse`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || McpToolCallResponseToJSON(requestParameters.mcpToolCallResponse),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(McpToolCallResponseFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new McpToolCallResponse.
* Create a new McpToolCallResponse
*/
export function postMcpToolCallResponse<T>(requestParameters: PostMcpToolCallResponseApiRequest, requestConfig?: runtime.TypedQueryConfig<T, McpToolCallResponse>): QueryConfig<T> {
    return postMcpToolCallResponseRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing McpToolCallResponse.
 * Update an existing McpToolCallResponse
 */
function updateMcpToolCallResponseRaw<T>(requestParameters: UpdateMcpToolCallResponseApiRequest, requestConfig: runtime.TypedQueryConfig<T, McpToolCallResponse> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMcpToolCallResponse.');
    }

    if (requestParameters.mcpToolCallResponse === null || requestParameters.mcpToolCallResponse === undefined) {
        throw new runtime.RequiredError('mcpToolCallResponse','Required parameter requestParameters.mcpToolCallResponse was null or undefined when calling updateMcpToolCallResponse.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/McpToolCallResponse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || McpToolCallResponseToJSON(requestParameters.mcpToolCallResponse),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(McpToolCallResponseFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing McpToolCallResponse.
* Update an existing McpToolCallResponse
*/
export function updateMcpToolCallResponse<T>(requestParameters: UpdateMcpToolCallResponseApiRequest, requestConfig?: runtime.TypedQueryConfig<T, McpToolCallResponse>): QueryConfig<T> {
    return updateMcpToolCallResponseRaw(requestParameters, requestConfig);
}

