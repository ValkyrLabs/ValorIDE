// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: SwarmApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    Swarm,
    SwarmFromJSON,
    SwarmToJSON,
} from '../model';

export interface DeleteSwarmApiRequest {
    id: string;
}

export interface GetSwarmApiRequest {
    id: string;
}

export interface GetSwarmListApiRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostSwarmApiRequest {
    swarm: Swarm;
}

export interface UpdateSwarmApiRequest {
    id: string;
    swarm: Swarm;
}


/**
 * Deletes a specific Swarm.
 * Delete a Swarm.
 */
function deleteSwarmRaw<T>(requestParameters: DeleteSwarmApiRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSwarm.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Swarm/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific Swarm.
* Delete a Swarm.
*/
export function deleteSwarm<T>(requestParameters: DeleteSwarmApiRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteSwarmRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single Swarm for a specific uid.
 * Retrieve a single Swarm
 */
function getSwarmRaw<T>(requestParameters: GetSwarmApiRequest, requestConfig: runtime.TypedQueryConfig<T, Swarm> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSwarm.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Swarm/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SwarmFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single Swarm for a specific uid.
* Retrieve a single Swarm
*/
export function getSwarm<T>(requestParameters: GetSwarmApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Swarm>): QueryConfig<T> {
    return getSwarmRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of Swarms.
 * Retrieve a list of Swarms
 */
function getSwarmListRaw<T>(requestParameters: GetSwarmListApiRequest, requestConfig: runtime.TypedQueryConfig<T, Array<Swarm>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Swarm`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(SwarmFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of Swarms.
* Retrieve a list of Swarms
*/
export function getSwarmList<T>(requestParameters: GetSwarmListApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<Swarm>>): QueryConfig<T> {
    return getSwarmListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new Swarm.
 * Create a new Swarm
 */
function postSwarmRaw<T>(requestParameters: PostSwarmApiRequest, requestConfig: runtime.TypedQueryConfig<T, Swarm> = {}): QueryConfig<T> {
    if (requestParameters.swarm === null || requestParameters.swarm === undefined) {
        throw new runtime.RequiredError('swarm','Required parameter requestParameters.swarm was null or undefined when calling postSwarm.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Swarm`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || SwarmToJSON(requestParameters.swarm),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SwarmFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new Swarm.
* Create a new Swarm
*/
export function postSwarm<T>(requestParameters: PostSwarmApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Swarm>): QueryConfig<T> {
    return postSwarmRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing Swarm.
 * Update an existing Swarm
 */
function updateSwarmRaw<T>(requestParameters: UpdateSwarmApiRequest, requestConfig: runtime.TypedQueryConfig<T, Swarm> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSwarm.');
    }

    if (requestParameters.swarm === null || requestParameters.swarm === undefined) {
        throw new runtime.RequiredError('swarm','Required parameter requestParameters.swarm was null or undefined when calling updateSwarm.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Swarm/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || SwarmToJSON(requestParameters.swarm),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SwarmFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing Swarm.
* Update an existing Swarm
*/
export function updateSwarm<T>(requestParameters: UpdateSwarmApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Swarm>): QueryConfig<T> {
    return updateSwarmRaw(requestParameters, requestConfig);
}

