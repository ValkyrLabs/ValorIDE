// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: FileRecordApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    FileRecord,
    FileRecordFromJSON,
    FileRecordToJSON,
} from '../model';

export interface DeleteFileRecordApiRequest {
    id: string;
}

export interface GetFileRecordApiRequest {
    id: string;
}

export interface GetFileRecordListApiRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostFileRecordApiRequest {
    fileRecord: FileRecord;
}

export interface UpdateFileRecordApiRequest {
    id: string;
    fileRecord: FileRecord;
}


/**
 * Deletes a specific FileRecord.
 * Delete a FileRecord.
 */
function deleteFileRecordRaw<T>(requestParameters: DeleteFileRecordApiRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFileRecord.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/FileRecord/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific FileRecord.
* Delete a FileRecord.
*/
export function deleteFileRecord<T>(requestParameters: DeleteFileRecordApiRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteFileRecordRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single FileRecord for a specific uid.
 * Retrieve a single FileRecord
 */
function getFileRecordRaw<T>(requestParameters: GetFileRecordApiRequest, requestConfig: runtime.TypedQueryConfig<T, FileRecord> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFileRecord.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/FileRecord/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FileRecordFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single FileRecord for a specific uid.
* Retrieve a single FileRecord
*/
export function getFileRecord<T>(requestParameters: GetFileRecordApiRequest, requestConfig?: runtime.TypedQueryConfig<T, FileRecord>): QueryConfig<T> {
    return getFileRecordRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of FileRecords.
 * Retrieve a list of FileRecords
 */
function getFileRecordListRaw<T>(requestParameters: GetFileRecordListApiRequest, requestConfig: runtime.TypedQueryConfig<T, Array<FileRecord>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/FileRecord`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(FileRecordFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of FileRecords.
* Retrieve a list of FileRecords
*/
export function getFileRecordList<T>(requestParameters: GetFileRecordListApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<FileRecord>>): QueryConfig<T> {
    return getFileRecordListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new FileRecord.
 * Create a new FileRecord
 */
function postFileRecordRaw<T>(requestParameters: PostFileRecordApiRequest, requestConfig: runtime.TypedQueryConfig<T, FileRecord> = {}): QueryConfig<T> {
    if (requestParameters.fileRecord === null || requestParameters.fileRecord === undefined) {
        throw new runtime.RequiredError('fileRecord','Required parameter requestParameters.fileRecord was null or undefined when calling postFileRecord.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/FileRecord`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || FileRecordToJSON(requestParameters.fileRecord),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FileRecordFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new FileRecord.
* Create a new FileRecord
*/
export function postFileRecord<T>(requestParameters: PostFileRecordApiRequest, requestConfig?: runtime.TypedQueryConfig<T, FileRecord>): QueryConfig<T> {
    return postFileRecordRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing FileRecord.
 * Update an existing FileRecord
 */
function updateFileRecordRaw<T>(requestParameters: UpdateFileRecordApiRequest, requestConfig: runtime.TypedQueryConfig<T, FileRecord> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateFileRecord.');
    }

    if (requestParameters.fileRecord === null || requestParameters.fileRecord === undefined) {
        throw new runtime.RequiredError('fileRecord','Required parameter requestParameters.fileRecord was null or undefined when calling updateFileRecord.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/FileRecord/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || FileRecordToJSON(requestParameters.fileRecord),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FileRecordFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing FileRecord.
* Update an existing FileRecord
*/
export function updateFileRecord<T>(requestParameters: UpdateFileRecordApiRequest, requestConfig?: runtime.TypedQueryConfig<T, FileRecord>): QueryConfig<T> {
    return updateFileRecordRaw(requestParameters, requestConfig);
}

