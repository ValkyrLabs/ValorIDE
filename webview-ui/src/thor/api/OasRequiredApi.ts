// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: OasRequiredApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    OasRequired,
    OasRequiredFromJSON,
    OasRequiredToJSON,
} from '../model';

export interface DeleteOasRequiredApiRequest {
    id: string;
}

export interface GetOasRequiredApiRequest {
    id: string;
}

export interface GetOasRequiredListApiRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostOasRequiredApiRequest {
    oasRequired: OasRequired;
}

export interface UpdateOasRequiredApiRequest {
    id: string;
    oasRequired: OasRequired;
}


/**
 * Deletes a specific OasRequired.
 * Delete a OasRequired.
 */
function deleteOasRequiredRaw<T>(requestParameters: DeleteOasRequiredApiRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOasRequired.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasRequired/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific OasRequired.
* Delete a OasRequired.
*/
export function deleteOasRequired<T>(requestParameters: DeleteOasRequiredApiRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteOasRequiredRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single OasRequired for a specific uid.
 * Retrieve a single OasRequired
 */
function getOasRequiredRaw<T>(requestParameters: GetOasRequiredApiRequest, requestConfig: runtime.TypedQueryConfig<T, OasRequired> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOasRequired.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasRequired/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasRequiredFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single OasRequired for a specific uid.
* Retrieve a single OasRequired
*/
export function getOasRequired<T>(requestParameters: GetOasRequiredApiRequest, requestConfig?: runtime.TypedQueryConfig<T, OasRequired>): QueryConfig<T> {
    return getOasRequiredRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of OasRequireds.
 * Retrieve a list of OasRequireds
 */
function getOasRequiredListRaw<T>(requestParameters: GetOasRequiredListApiRequest, requestConfig: runtime.TypedQueryConfig<T, Array<OasRequired>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasRequired`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(OasRequiredFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of OasRequireds.
* Retrieve a list of OasRequireds
*/
export function getOasRequiredList<T>(requestParameters: GetOasRequiredListApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<OasRequired>>): QueryConfig<T> {
    return getOasRequiredListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new OasRequired.
 * Create a new OasRequired
 */
function postOasRequiredRaw<T>(requestParameters: PostOasRequiredApiRequest, requestConfig: runtime.TypedQueryConfig<T, OasRequired> = {}): QueryConfig<T> {
    if (requestParameters.oasRequired === null || requestParameters.oasRequired === undefined) {
        throw new runtime.RequiredError('oasRequired','Required parameter requestParameters.oasRequired was null or undefined when calling postOasRequired.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasRequired`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || OasRequiredToJSON(requestParameters.oasRequired),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasRequiredFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new OasRequired.
* Create a new OasRequired
*/
export function postOasRequired<T>(requestParameters: PostOasRequiredApiRequest, requestConfig?: runtime.TypedQueryConfig<T, OasRequired>): QueryConfig<T> {
    return postOasRequiredRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing OasRequired.
 * Update an existing OasRequired
 */
function updateOasRequiredRaw<T>(requestParameters: UpdateOasRequiredApiRequest, requestConfig: runtime.TypedQueryConfig<T, OasRequired> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOasRequired.');
    }

    if (requestParameters.oasRequired === null || requestParameters.oasRequired === undefined) {
        throw new runtime.RequiredError('oasRequired','Required parameter requestParameters.oasRequired was null or undefined when calling updateOasRequired.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasRequired/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || OasRequiredToJSON(requestParameters.oasRequired),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasRequiredFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing OasRequired.
* Update an existing OasRequired
*/
export function updateOasRequired<T>(requestParameters: UpdateOasRequiredApiRequest, requestConfig?: runtime.TypedQueryConfig<T, OasRequired>): QueryConfig<T> {
    return updateOasRequiredRaw(requestParameters, requestConfig);
}

