// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: DiscountApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    Discount,
    DiscountFromJSON,
    DiscountToJSON,
} from '../model';

export interface DeleteDiscountRequest {
    id: string;
}

export interface GetDiscountRequest {
    id: string;
}

export interface GetDiscountListRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostDiscountRequest {
    discount: Discount;
}

export interface UpdateDiscountRequest {
    id: string;
    discount: Discount;
}


/**
 * Deletes a specific Discount.
 * Delete a Discount.
 */
function deleteDiscountRaw<T>(requestParameters: DeleteDiscountRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDiscount.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Discount/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific Discount.
* Delete a Discount.
*/
export function deleteDiscount<T>(requestParameters: DeleteDiscountRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteDiscountRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single Discount for a specific uid.
 * Retrieve a single Discount
 */
function getDiscountRaw<T>(requestParameters: GetDiscountRequest, requestConfig: runtime.TypedQueryConfig<T, Discount> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDiscount.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Discount/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(DiscountFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single Discount for a specific uid.
* Retrieve a single Discount
*/
export function getDiscount<T>(requestParameters: GetDiscountRequest, requestConfig?: runtime.TypedQueryConfig<T, Discount>): QueryConfig<T> {
    return getDiscountRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of Discounts.
 * Retrieve a list of Discounts
 */
function getDiscountListRaw<T>(requestParameters: GetDiscountListRequest, requestConfig: runtime.TypedQueryConfig<T, Array<Discount>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Discount`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(DiscountFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of Discounts.
* Retrieve a list of Discounts
*/
export function getDiscountList<T>(requestParameters: GetDiscountListRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<Discount>>): QueryConfig<T> {
    return getDiscountListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new Discount.
 * Create a new Discount
 */
function postDiscountRaw<T>(requestParameters: PostDiscountRequest, requestConfig: runtime.TypedQueryConfig<T, Discount> = {}): QueryConfig<T> {
    if (requestParameters.discount === null || requestParameters.discount === undefined) {
        throw new runtime.RequiredError('discount','Required parameter requestParameters.discount was null or undefined when calling postDiscount.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Discount`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || DiscountToJSON(requestParameters.discount),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(DiscountFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new Discount.
* Create a new Discount
*/
export function postDiscount<T>(requestParameters: PostDiscountRequest, requestConfig?: runtime.TypedQueryConfig<T, Discount>): QueryConfig<T> {
    return postDiscountRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing Discount.
 * Update an existing Discount
 */
function updateDiscountRaw<T>(requestParameters: UpdateDiscountRequest, requestConfig: runtime.TypedQueryConfig<T, Discount> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDiscount.');
    }

    if (requestParameters.discount === null || requestParameters.discount === undefined) {
        throw new runtime.RequiredError('discount','Required parameter requestParameters.discount was null or undefined when calling updateDiscount.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Discount/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || DiscountToJSON(requestParameters.discount),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(DiscountFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing Discount.
* Update an existing Discount
*/
export function updateDiscount<T>(requestParameters: UpdateDiscountRequest, requestConfig?: runtime.TypedQueryConfig<T, Discount>): QueryConfig<T> {
    return updateDiscountRaw(requestParameters, requestConfig);
}

