// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: SolutionApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    Solution,
    SolutionFromJSON,
    SolutionToJSON,
} from '../model';

export interface DeleteSolutionApiRequest {
    id: string;
}

export interface GetSolutionApiRequest {
    id: string;
}

export interface GetSolutionListApiRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostSolutionApiRequest {
    solution: Solution;
}

export interface UpdateSolutionApiRequest {
    id: string;
    solution: Solution;
}


/**
 * Deletes a specific Solution.
 * Delete a Solution.
 */
function deleteSolutionRaw<T>(requestParameters: DeleteSolutionApiRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSolution.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Solution/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific Solution.
* Delete a Solution.
*/
export function deleteSolution<T>(requestParameters: DeleteSolutionApiRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteSolutionRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single Solution for a specific uid.
 * Retrieve a single Solution
 */
function getSolutionRaw<T>(requestParameters: GetSolutionApiRequest, requestConfig: runtime.TypedQueryConfig<T, Solution> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSolution.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Solution/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SolutionFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single Solution for a specific uid.
* Retrieve a single Solution
*/
export function getSolution<T>(requestParameters: GetSolutionApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Solution>): QueryConfig<T> {
    return getSolutionRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of Solutions.
 * Retrieve a list of Solutions
 */
function getSolutionListRaw<T>(requestParameters: GetSolutionListApiRequest, requestConfig: runtime.TypedQueryConfig<T, Array<Solution>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Solution`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(SolutionFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of Solutions.
* Retrieve a list of Solutions
*/
export function getSolutionList<T>(requestParameters: GetSolutionListApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<Solution>>): QueryConfig<T> {
    return getSolutionListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new Solution.
 * Create a new Solution
 */
function postSolutionRaw<T>(requestParameters: PostSolutionApiRequest, requestConfig: runtime.TypedQueryConfig<T, Solution> = {}): QueryConfig<T> {
    if (requestParameters.solution === null || requestParameters.solution === undefined) {
        throw new runtime.RequiredError('solution','Required parameter requestParameters.solution was null or undefined when calling postSolution.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Solution`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || SolutionToJSON(requestParameters.solution),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SolutionFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new Solution.
* Create a new Solution
*/
export function postSolution<T>(requestParameters: PostSolutionApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Solution>): QueryConfig<T> {
    return postSolutionRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing Solution.
 * Update an existing Solution
 */
function updateSolutionRaw<T>(requestParameters: UpdateSolutionApiRequest, requestConfig: runtime.TypedQueryConfig<T, Solution> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSolution.');
    }

    if (requestParameters.solution === null || requestParameters.solution === undefined) {
        throw new runtime.RequiredError('solution','Required parameter requestParameters.solution was null or undefined when calling updateSolution.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Solution/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || SolutionToJSON(requestParameters.solution),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SolutionFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing Solution.
* Update an existing Solution
*/
export function updateSolution<T>(requestParameters: UpdateSolutionApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Solution>): QueryConfig<T> {
    return updateSolutionRaw(requestParameters, requestConfig);
}

