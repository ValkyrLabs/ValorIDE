// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: OasComponentApi
*/

import {
  HttpMethods,
  QueryConfig,
  ResponseBody,
  ResponseText,
} from "redux-query";
import * as runtime from "../src/runtime";
import {
  OasComponent,
  OasComponentFromJSON,
  OasComponentToJSON,
} from "../model";

export interface DeleteOasComponentRequest {
  id: string;
}

export interface GetOasComponentRequest {
  id: string;
}

export interface PostOasComponentRequest {
  oasComponent: OasComponent;
}

export interface UpdateOasComponentRequest {
  id: string;
  oasComponent: OasComponent;
}

/**
 * Deletes a specific OasComponent.
 * Delete a OasComponent.
 */
function deleteOasComponentRaw<T>(
  requestParameters: DeleteOasComponentRequest,
  requestConfig: runtime.TypedQueryConfig<T, void> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      "id",
      "Required parameter requestParameters.id was null or undefined when calling deleteOasComponent.",
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/OasComponent/{id}`.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: "DELETE",
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
  }

  return config;
}

/**
 * Deletes a specific OasComponent.
 * Delete a OasComponent.
 */
export function deleteOasComponent<T>(
  requestParameters: DeleteOasComponentRequest,
  requestConfig?: runtime.TypedQueryConfig<T, void>,
): QueryConfig<T> {
  return deleteOasComponentRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single OasComponent for a specific uid.
 * Retrieve a single OasComponent
 */
function getOasComponentRaw<T>(
  requestParameters: GetOasComponentRequest,
  requestConfig: runtime.TypedQueryConfig<T, OasComponent> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      "id",
      "Required parameter requestParameters.id was null or undefined when calling getOasComponent.",
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/OasComponent/{id}`.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: "GET",
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(OasComponentFromJSON(body), text);
  }

  return config;
}

/**
 * Retrieves a single OasComponent for a specific uid.
 * Retrieve a single OasComponent
 */
export function getOasComponent<T>(
  requestParameters: GetOasComponentRequest,
  requestConfig?: runtime.TypedQueryConfig<T, OasComponent>,
): QueryConfig<T> {
  return getOasComponentRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of OasComponents.
 * Retrieve a list of OasComponents
 */
function getOasComponentListRaw<T>(
  requestConfig: runtime.TypedQueryConfig<T, Array<OasComponent>> = {},
): QueryConfig<T> {
  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/OasComponent`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: "GET",
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(body.map(OasComponentFromJSON), text);
  }

  return config;
}

/**
 * Retrieves a list of OasComponents.
 * Retrieve a list of OasComponents
 */
export function getOasComponentList<T>(
  requestConfig?: runtime.TypedQueryConfig<T, Array<OasComponent>>,
): QueryConfig<T> {
  return getOasComponentListRaw(requestConfig);
}

/**
 * Creates a new OasComponent.
 * Create a new OasComponent
 */
function postOasComponentRaw<T>(
  requestParameters: PostOasComponentRequest,
  requestConfig: runtime.TypedQueryConfig<T, OasComponent> = {},
): QueryConfig<T> {
  if (
    requestParameters.oasComponent === null ||
    requestParameters.oasComponent === undefined
  ) {
    throw new runtime.RequiredError(
      "oasComponent",
      "Required parameter requestParameters.oasComponent was null or undefined when calling postOasComponent.",
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  headerParameters["Content-Type"] = "application/json";

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/OasComponent`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: "POST",
      headers: headerParameters,
    },
    body: queryParameters || OasComponentToJSON(requestParameters.oasComponent),
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(OasComponentFromJSON(body), text);
  }

  return config;
}

/**
 * Creates a new OasComponent.
 * Create a new OasComponent
 */
export function postOasComponent<T>(
  requestParameters: PostOasComponentRequest,
  requestConfig?: runtime.TypedQueryConfig<T, OasComponent>,
): QueryConfig<T> {
  return postOasComponentRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing OasComponent.
 * Update an existing OasComponent
 */
function updateOasComponentRaw<T>(
  requestParameters: UpdateOasComponentRequest,
  requestConfig: runtime.TypedQueryConfig<T, OasComponent> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      "id",
      "Required parameter requestParameters.id was null or undefined when calling updateOasComponent.",
    );
  }

  if (
    requestParameters.oasComponent === null ||
    requestParameters.oasComponent === undefined
  ) {
    throw new runtime.RequiredError(
      "oasComponent",
      "Required parameter requestParameters.oasComponent was null or undefined when calling updateOasComponent.",
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  headerParameters["Content-Type"] = "application/json";

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/OasComponent/{id}`.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: "PUT",
      headers: headerParameters,
    },
    body: queryParameters || OasComponentToJSON(requestParameters.oasComponent),
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(OasComponentFromJSON(body), text);
  }

  return config;
}

/**
 * Updates an existing OasComponent.
 * Update an existing OasComponent
 */
export function updateOasComponent<T>(
  requestParameters: UpdateOasComponentRequest,
  requestConfig?: runtime.TypedQueryConfig<T, OasComponent>,
): QueryConfig<T> {
  return updateOasComponentRaw(requestParameters, requestConfig);
}
