// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: CampaignApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    Campaign,
    CampaignFromJSON,
    CampaignToJSON,
} from '../model';

export interface DeleteCampaignApiRequest {
    id: string;
}

export interface GetCampaignApiRequest {
    id: string;
}

export interface GetCampaignListApiRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostCampaignApiRequest {
    campaign: Campaign;
}

export interface UpdateCampaignApiRequest {
    id: string;
    campaign: Campaign;
}


/**
 * Deletes a specific Campaign.
 * Delete a Campaign.
 */
function deleteCampaignRaw<T>(requestParameters: DeleteCampaignApiRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCampaign.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Campaign/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific Campaign.
* Delete a Campaign.
*/
export function deleteCampaign<T>(requestParameters: DeleteCampaignApiRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteCampaignRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single Campaign for a specific uid.
 * Retrieve a single Campaign
 */
function getCampaignRaw<T>(requestParameters: GetCampaignApiRequest, requestConfig: runtime.TypedQueryConfig<T, Campaign> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCampaign.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Campaign/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CampaignFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single Campaign for a specific uid.
* Retrieve a single Campaign
*/
export function getCampaign<T>(requestParameters: GetCampaignApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Campaign>): QueryConfig<T> {
    return getCampaignRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of Campaigns.
 * Retrieve a list of Campaigns
 */
function getCampaignListRaw<T>(requestParameters: GetCampaignListApiRequest, requestConfig: runtime.TypedQueryConfig<T, Array<Campaign>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Campaign`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(CampaignFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of Campaigns.
* Retrieve a list of Campaigns
*/
export function getCampaignList<T>(requestParameters: GetCampaignListApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<Campaign>>): QueryConfig<T> {
    return getCampaignListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new Campaign.
 * Create a new Campaign
 */
function postCampaignRaw<T>(requestParameters: PostCampaignApiRequest, requestConfig: runtime.TypedQueryConfig<T, Campaign> = {}): QueryConfig<T> {
    if (requestParameters.campaign === null || requestParameters.campaign === undefined) {
        throw new runtime.RequiredError('campaign','Required parameter requestParameters.campaign was null or undefined when calling postCampaign.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Campaign`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || CampaignToJSON(requestParameters.campaign),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CampaignFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new Campaign.
* Create a new Campaign
*/
export function postCampaign<T>(requestParameters: PostCampaignApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Campaign>): QueryConfig<T> {
    return postCampaignRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing Campaign.
 * Update an existing Campaign
 */
function updateCampaignRaw<T>(requestParameters: UpdateCampaignApiRequest, requestConfig: runtime.TypedQueryConfig<T, Campaign> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCampaign.');
    }

    if (requestParameters.campaign === null || requestParameters.campaign === undefined) {
        throw new runtime.RequiredError('campaign','Required parameter requestParameters.campaign was null or undefined when calling updateCampaign.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Campaign/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || CampaignToJSON(requestParameters.campaign),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CampaignFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing Campaign.
* Update an existing Campaign
*/
export function updateCampaign<T>(requestParameters: UpdateCampaignApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Campaign>): QueryConfig<T> {
    return updateCampaignRaw(requestParameters, requestConfig);
}

