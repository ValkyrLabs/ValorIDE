// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: OasPathApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    OasPath,
    OasPathFromJSON,
    OasPathToJSON,
} from '../model';

export interface DeleteOasPathApiRequest {
    id: string;
}

export interface GetOasPathApiRequest {
    id: string;
}

export interface GetOasPathListApiRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostOasPathApiRequest {
    oasPath: OasPath;
}

export interface UpdateOasPathApiRequest {
    id: string;
    oasPath: OasPath;
}


/**
 * Deletes a specific OasPath.
 * Delete a OasPath.
 */
function deleteOasPathRaw<T>(requestParameters: DeleteOasPathApiRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOasPath.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasPath/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific OasPath.
* Delete a OasPath.
*/
export function deleteOasPath<T>(requestParameters: DeleteOasPathApiRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteOasPathRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single OasPath for a specific uid.
 * Retrieve a single OasPath
 */
function getOasPathRaw<T>(requestParameters: GetOasPathApiRequest, requestConfig: runtime.TypedQueryConfig<T, OasPath> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOasPath.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasPath/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasPathFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single OasPath for a specific uid.
* Retrieve a single OasPath
*/
export function getOasPath<T>(requestParameters: GetOasPathApiRequest, requestConfig?: runtime.TypedQueryConfig<T, OasPath>): QueryConfig<T> {
    return getOasPathRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of OasPaths.
 * Retrieve a list of OasPaths
 */
function getOasPathListRaw<T>(requestParameters: GetOasPathListApiRequest, requestConfig: runtime.TypedQueryConfig<T, Array<OasPath>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasPath`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(OasPathFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of OasPaths.
* Retrieve a list of OasPaths
*/
export function getOasPathList<T>(requestParameters: GetOasPathListApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<OasPath>>): QueryConfig<T> {
    return getOasPathListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new OasPath.
 * Create a new OasPath
 */
function postOasPathRaw<T>(requestParameters: PostOasPathApiRequest, requestConfig: runtime.TypedQueryConfig<T, OasPath> = {}): QueryConfig<T> {
    if (requestParameters.oasPath === null || requestParameters.oasPath === undefined) {
        throw new runtime.RequiredError('oasPath','Required parameter requestParameters.oasPath was null or undefined when calling postOasPath.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasPath`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || OasPathToJSON(requestParameters.oasPath),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasPathFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new OasPath.
* Create a new OasPath
*/
export function postOasPath<T>(requestParameters: PostOasPathApiRequest, requestConfig?: runtime.TypedQueryConfig<T, OasPath>): QueryConfig<T> {
    return postOasPathRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing OasPath.
 * Update an existing OasPath
 */
function updateOasPathRaw<T>(requestParameters: UpdateOasPathApiRequest, requestConfig: runtime.TypedQueryConfig<T, OasPath> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOasPath.');
    }

    if (requestParameters.oasPath === null || requestParameters.oasPath === undefined) {
        throw new runtime.RequiredError('oasPath','Required parameter requestParameters.oasPath was null or undefined when calling updateOasPath.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasPath/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || OasPathToJSON(requestParameters.oasPath),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasPathFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing OasPath.
* Update an existing OasPath
*/
export function updateOasPath<T>(requestParameters: UpdateOasPathApiRequest, requestConfig?: runtime.TypedQueryConfig<T, OasPath>): QueryConfig<T> {
    return updateOasPathRaw(requestParameters, requestConfig);
}

