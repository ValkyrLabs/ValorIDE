// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: EventLogApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    EventLog,
    EventLogFromJSON,
    EventLogToJSON,
} from '../model';

export interface DeleteEventLogApiRequest {
    id: string;
}

export interface GetEventLogApiRequest {
    id: string;
}

export interface GetEventLogListApiRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostEventLogApiRequest {
    eventLog: EventLog;
}

export interface UpdateEventLogApiRequest {
    id: string;
    eventLog: EventLog;
}


/**
 * Deletes a specific EventLog.
 * Delete a EventLog.
 */
function deleteEventLogRaw<T>(requestParameters: DeleteEventLogApiRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteEventLog.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/EventLog/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific EventLog.
* Delete a EventLog.
*/
export function deleteEventLog<T>(requestParameters: DeleteEventLogApiRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteEventLogRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single EventLog for a specific uid.
 * Retrieve a single EventLog
 */
function getEventLogRaw<T>(requestParameters: GetEventLogApiRequest, requestConfig: runtime.TypedQueryConfig<T, EventLog> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEventLog.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/EventLog/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EventLogFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single EventLog for a specific uid.
* Retrieve a single EventLog
*/
export function getEventLog<T>(requestParameters: GetEventLogApiRequest, requestConfig?: runtime.TypedQueryConfig<T, EventLog>): QueryConfig<T> {
    return getEventLogRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of EventLogs.
 * Retrieve a list of EventLogs
 */
function getEventLogListRaw<T>(requestParameters: GetEventLogListApiRequest, requestConfig: runtime.TypedQueryConfig<T, Array<EventLog>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/EventLog`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(EventLogFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of EventLogs.
* Retrieve a list of EventLogs
*/
export function getEventLogList<T>(requestParameters: GetEventLogListApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<EventLog>>): QueryConfig<T> {
    return getEventLogListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new EventLog.
 * Create a new EventLog
 */
function postEventLogRaw<T>(requestParameters: PostEventLogApiRequest, requestConfig: runtime.TypedQueryConfig<T, EventLog> = {}): QueryConfig<T> {
    if (requestParameters.eventLog === null || requestParameters.eventLog === undefined) {
        throw new runtime.RequiredError('eventLog','Required parameter requestParameters.eventLog was null or undefined when calling postEventLog.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/EventLog`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || EventLogToJSON(requestParameters.eventLog),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EventLogFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new EventLog.
* Create a new EventLog
*/
export function postEventLog<T>(requestParameters: PostEventLogApiRequest, requestConfig?: runtime.TypedQueryConfig<T, EventLog>): QueryConfig<T> {
    return postEventLogRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing EventLog.
 * Update an existing EventLog
 */
function updateEventLogRaw<T>(requestParameters: UpdateEventLogApiRequest, requestConfig: runtime.TypedQueryConfig<T, EventLog> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateEventLog.');
    }

    if (requestParameters.eventLog === null || requestParameters.eventLog === undefined) {
        throw new runtime.RequiredError('eventLog','Required parameter requestParameters.eventLog was null or undefined when calling updateEventLog.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/EventLog/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || EventLogToJSON(requestParameters.eventLog),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EventLogFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing EventLog.
* Update an existing EventLog
*/
export function updateEventLog<T>(requestParameters: UpdateEventLogApiRequest, requestConfig?: runtime.TypedQueryConfig<T, EventLog>): QueryConfig<T> {
    return updateEventLogRaw(requestParameters, requestConfig);
}

