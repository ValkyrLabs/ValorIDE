// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: AgentApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    ActivateAgent200Response,
    ActivateAgent200ResponseFromJSON,
    ActivateAgent200ResponseToJSON,
    Agent,
    AgentFromJSON,
    AgentToJSON,
} from '../model';

export interface ActivateAgentRequest {
    id: string;
}

export interface DeleteAgentRequest {
    id: string;
}

export interface GetAgentRequest {
    id: string;
}

export interface GetAgentListRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostAgentRequest {
    agent: Agent;
}

export interface PublishAgentEventRequest {
    id: string;
    eventType: string;
    requestBody?: { [key: string]: any | undefined; };
}

export interface UpdateAgentRequest {
    id: string;
    agent: Agent;
}


/**
 * Applies the Agent\'s CRON schedule to its workflows and registers configured event triggers.
 * Activate an Agent (schedule workflows and register triggers)
 */
function activateAgentRaw<T>(requestParameters: ActivateAgentRequest, requestConfig: runtime.TypedQueryConfig<T, ActivateAgent200Response> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling activateAgent.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Agent/{id}/activate`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ActivateAgent200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Applies the Agent\'s CRON schedule to its workflows and registers configured event triggers.
* Activate an Agent (schedule workflows and register triggers)
*/
export function activateAgent<T>(requestParameters: ActivateAgentRequest, requestConfig?: runtime.TypedQueryConfig<T, ActivateAgent200Response>): QueryConfig<T> {
    return activateAgentRaw(requestParameters, requestConfig);
}

/**
 * Deletes a specific Agent.
 * Delete a Agent.
 */
function deleteAgentRaw<T>(requestParameters: DeleteAgentRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAgent.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Agent/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific Agent.
* Delete a Agent.
*/
export function deleteAgent<T>(requestParameters: DeleteAgentRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteAgentRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single Agent for a specific uid.
 * Retrieve a single Agent
 */
function getAgentRaw<T>(requestParameters: GetAgentRequest, requestConfig: runtime.TypedQueryConfig<T, Agent> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAgent.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Agent/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AgentFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single Agent for a specific uid.
* Retrieve a single Agent
*/
export function getAgent<T>(requestParameters: GetAgentRequest, requestConfig?: runtime.TypedQueryConfig<T, Agent>): QueryConfig<T> {
    return getAgentRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of Agents.
 * Retrieve a list of Agents
 */
function getAgentListRaw<T>(requestParameters: GetAgentListRequest, requestConfig: runtime.TypedQueryConfig<T, Array<Agent>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Agent`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(AgentFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of Agents.
* Retrieve a list of Agents
*/
export function getAgentList<T>(requestParameters: GetAgentListRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<Agent>>): QueryConfig<T> {
    return getAgentListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new Agent.
 * Create a new Agent
 */
function postAgentRaw<T>(requestParameters: PostAgentRequest, requestConfig: runtime.TypedQueryConfig<T, Agent> = {}): QueryConfig<T> {
    if (requestParameters.agent === null || requestParameters.agent === undefined) {
        throw new runtime.RequiredError('agent','Required parameter requestParameters.agent was null or undefined when calling postAgent.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Agent`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || AgentToJSON(requestParameters.agent),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AgentFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new Agent.
* Create a new Agent
*/
export function postAgent<T>(requestParameters: PostAgentRequest, requestConfig?: runtime.TypedQueryConfig<T, Agent>): QueryConfig<T> {
    return postAgentRaw(requestParameters, requestConfig);
}

/**
 * Publishes an event that will be routed to any workflows registered for this Agent.
 * Publish an event for an Agent
 */
function publishAgentEventRaw<T>(requestParameters: PublishAgentEventRequest, requestConfig: runtime.TypedQueryConfig<T, string> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling publishAgentEvent.');
    }

    if (requestParameters.eventType === null || requestParameters.eventType === undefined) {
        throw new runtime.RequiredError('eventType','Required parameter requestParameters.eventType was null or undefined when calling publishAgentEvent.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Agent/{id}/event/{eventType}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"eventType"}}`, encodeURIComponent(String(requestParameters.eventType))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || requestParameters.requestBody,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Publishes an event that will be routed to any workflows registered for this Agent.
* Publish an event for an Agent
*/
export function publishAgentEvent<T>(requestParameters: PublishAgentEventRequest, requestConfig?: runtime.TypedQueryConfig<T, string>): QueryConfig<T> {
    return publishAgentEventRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing Agent.
 * Update an existing Agent
 */
function updateAgentRaw<T>(requestParameters: UpdateAgentRequest, requestConfig: runtime.TypedQueryConfig<T, Agent> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAgent.');
    }

    if (requestParameters.agent === null || requestParameters.agent === undefined) {
        throw new runtime.RequiredError('agent','Required parameter requestParameters.agent was null or undefined when calling updateAgent.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Agent/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || AgentToJSON(requestParameters.agent),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AgentFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing Agent.
* Update an existing Agent
*/
export function updateAgent<T>(requestParameters: UpdateAgentRequest, requestConfig?: runtime.TypedQueryConfig<T, Agent>): QueryConfig<T> {
    return updateAgentRaw(requestParameters, requestConfig);
}

