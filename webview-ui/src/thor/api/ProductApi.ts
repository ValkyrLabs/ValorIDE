// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi
Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-10-30T14:43:21.527935-07:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen


Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: ProductApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    Product,
    ProductFromJSON,
    ProductToJSON,
} from '../model';

export interface DeleteProductApiRequest {
    id: string;
}

export interface GetProductApiRequest {
    id: string;
}

export interface GetProductListApiRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PostProductApiRequest {
    product: Product;
}

export interface UpdateProductApiRequest {
    id: string;
    product: Product;
}


/**
 * Deletes a specific Product.
 * Delete a Product.
 */
function deleteProductRaw<T>(requestParameters: DeleteProductApiRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProduct.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Product/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific Product.
* Delete a Product.
*/
export function deleteProduct<T>(requestParameters: DeleteProductApiRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteProductRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single Product for a specific uid.
 * Retrieve a single Product
 */
function getProductRaw<T>(requestParameters: GetProductApiRequest, requestConfig: runtime.TypedQueryConfig<T, Product> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProduct.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Product/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ProductFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single Product for a specific uid.
* Retrieve a single Product
*/
export function getProduct<T>(requestParameters: GetProductApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Product>): QueryConfig<T> {
    return getProductRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of Products.
 * Retrieve a list of Products
 */
function getProductListRaw<T>(requestParameters: GetProductListApiRequest, requestConfig: runtime.TypedQueryConfig<T, Array<Product>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort) {
        queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Product`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ProductFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of Products.
* Retrieve a list of Products
*/
export function getProductList<T>(requestParameters: GetProductListApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<Product>>): QueryConfig<T> {
    return getProductListRaw(requestParameters, requestConfig);
}

/**
 * Creates a new Product.
 * Create a new Product
 */
function postProductRaw<T>(requestParameters: PostProductApiRequest, requestConfig: runtime.TypedQueryConfig<T, Product> = {}): QueryConfig<T> {
    if (requestParameters.product === null || requestParameters.product === undefined) {
        throw new runtime.RequiredError('product','Required parameter requestParameters.product was null or undefined when calling postProduct.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Product`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ProductToJSON(requestParameters.product),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ProductFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new Product.
* Create a new Product
*/
export function postProduct<T>(requestParameters: PostProductApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Product>): QueryConfig<T> {
    return postProductRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing Product.
 * Update an existing Product
 */
function updateProductRaw<T>(requestParameters: UpdateProductApiRequest, requestConfig: runtime.TypedQueryConfig<T, Product> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProduct.');
    }

    if (requestParameters.product === null || requestParameters.product === undefined) {
        throw new runtime.RequiredError('product','Required parameter requestParameters.product was null or undefined when calling updateProduct.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Product/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || ProductToJSON(requestParameters.product),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ProductFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing Product.
* Update an existing Product
*/
export function updateProduct<T>(requestParameters: UpdateProductApiRequest, requestConfig?: runtime.TypedQueryConfig<T, Product>): QueryConfig<T> {
    return updateProductRaw(requestParameters, requestConfig);
}

